<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/posts/4a17b156.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="Quick-Start"><a class="header-anchor" href="#Quick-Start"></a>Quick Start</h2>
<h3 id="Create-a-new-post"><a class="header-anchor" href="#Create-a-new-post"></a>Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a class="header-anchor" href="#Run-server"></a>Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a class="header-anchor" href="#Generate-static-files"></a>Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a class="header-anchor" href="#Deploy-to-remote-sites"></a>Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Redis开发与运维笔记-Redis的噩梦-阻塞</title>
    <url>/posts/3586754738.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>Redis是典型的单线程架构，所有的读写操作都是在一条主线程中完成的。当Redis用于高并发场景时，这条线程就变成了它的生命线。如果出现阻塞，哪怕是很短时间，对于我们的应用来说都是噩梦</p>

</blockquote>
<span id="more"></span>
<blockquote>
<p>参考书籍：<a href="https://book.douban.com/subject/26971561/">Redis开发与运维</a></p>
</blockquote>
<hr>
<h1>Redis的噩梦-阻塞</h1>
<h2 id="发现阻塞"><a class="header-anchor" href="#发现阻塞"></a>发现阻塞</h2>
<p>通过收集Redis日志或者通过监控Redis的关键指标等发现Redis阻塞问题。</p>
<h2 id="内在原因"><a class="header-anchor" href="#内在原因"></a>内在原因</h2>
<h3 id="API或数据结构使用不合理"><a class="header-anchor" href="#API或数据结构使用不合理"></a>API或数据结构使用不合理</h3>
<p>对大数据量的hash结构执行<code>hgetall</code>操作，由于其算法复杂度为<code>O(n)</code>，这条命令执行速度必然很慢。这个问题就是典型的不合理使用API和数据结构。</p>
<ol>
<li>
<p>发现慢查询<br>
通过<code>slowlog get &#123;n&#125;</code>获取慢查询日志。更多详情请查看<a href="./2425201134.html#%E6%85%A2%E6%9F%A5%E8%AF%A2%E5%88%86%E6%9E%90">Redis开发与运维笔记-小功能大用处</a></p>
</li>
<li>
<p>发现大对象<br>
通过<code>redis-cli -h &#123;ip&#125; -p &#123;port&#125; bigkeys</code>发现大对象。其内部采用分段进行scan操作，把扫描过的最大对象统计出来便于分析优化。</p>
</li>
</ol>
<h3 id="CPU饱和的问题"><a class="header-anchor" href="#CPU饱和的问题"></a>CPU饱和的问题</h3>
<p>通过<code>reids-cli --stat</code>获取当前Redis使用情况。<br>
通过<code>top</code>命令获取进程对CPU的利用率等信息<br>
通过<code>info commandstats</code>统计信息分析出命令不合理开销时间，查看是否是因为高算法复杂度或者过度的内存优化问题。</p>
<h3 id="持久化相关的阻塞"><a class="header-anchor" href="#持久化相关的阻塞"></a>持久化相关的阻塞</h3>
<ol>
<li>
<p>fork阻塞<br>
持久化时，Redis调用fork操作产生共享内存的子进程，由子进程完成持久化文件重写工作。fork时间过长，阻塞主线程。<br>
通过<code>info stats</code>命令获取到<code>latest_fork_usec</code>指标，表示Redis最近一次fork操作耗时</p>
</li>
<li>
<p>AOF刷盘阻塞<br>
开启AOF持久化后，文件刷盘一般1s一次，如果主线程发现距离上次fsync成功超过2秒，为了数据安全性它会阻塞直到后台线程执行fsync操作完成。通过Redis日志可以识别这种情况。也可以通过<code>info persistence</code>统计中的<code>aof_delayed_fsync</code>指标，每次发生fdatasync阻塞主线程时会累加。</p>
</li>
<li>
<p>HugePage写操作阻塞<br>
子进程在执行重写期间利用Linux写时复制技术降低内存开销，因此只有写操作时Redis才复制要修改的内存页。对于开启**Transparent HugePages<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>**的操作系统，，每次写复制的内存页单位由4K变为2MB，会拖慢写操作的执行时间，导致大量写操作慢查询。</p>
</li>
</ol>
<h2 id="外在原因"><a class="header-anchor" href="#外在原因"></a>外在原因</h2>
<h3 id="CPU竞争"><a class="header-anchor" href="#CPU竞争"></a>CPU竞争</h3>
<ul>
<li>进程竞争： Redis是典型的CPU密集型应用，不建议和其他多核CPU密集型服务部署在一起.通过<code>top</code>、<code>sar</code>命令定位CPU消耗的时间点和具体进程</li>
<li>绑定CPU：部署Redis时为了充分利用多核CPU，通常在一个机器上部署多个实例。常见的一种优化是将Redis进程绑定在CPU上，用于降低CPU频繁上下文切换的开销。但是当Redis进行RDB/AOF重写时，如果绑定CPU，子进程重写时会大量消耗CPU资源，对Redis主进程造成影响。因此对于开启持久化或复制的主节点不建议绑定CPU。</li>
</ul>
<h3 id="内存交换"><a class="header-anchor" href="#内存交换"></a>内存交换</h3>
<p>内存交换是非常致命的。Redis保证高性能主要原因是所有数据在内存中，如果操作系统把Redis使用的部分内存换出到硬盘，会造成性能的机制下降。识别Redis内存交换的检查方法如下：</p>
<ol>
<li>查询Redis进程号</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reids-cli -p 6383 info server | grep process_id</span><br><span class="line">process_id: 4476</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>根据进程号查询内存交换信息</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /proc/4476/smaps | grep Swap</span><br><span class="line">Swap: 0kB</span><br><span class="line">Swap: 0kB</span><br><span class="line">Swap: 4kB</span><br><span class="line">Swap: 0kB</span><br><span class="line">Swap: 0kB</span><br><span class="line">.....</span><br></pre></td></tr></table></figure>
<p>如果交换量都是0KB或者个别的是4KB，则正常。预防内存交换的方法由：</p>
<ul>
<li>保证机器充足的可用内存</li>
<li>确保所有Redis实例设置最大可用内存(maxmemory)，防止极端情况Redis内存不可控的增长</li>
<li>降低系统使用swap优先级，如<code>echo 10 &gt; /proc/sys/vm/swappiness</code></li>
</ul>
<h3 id="网络问题"><a class="header-anchor" href="#网络问题"></a>网络问题</h3>
<h4 id="连接拒绝"><a class="header-anchor" href="#连接拒绝"></a>连接拒绝</h4>
<ol>
<li>
<p>网络闪断<br>
一般发生在网络切割或者带宽耗尽的情况，对于网络闪断的识别比较困难，常见做法是通过<code>sar -n DEV</code>查看本机历史流量是否正常，或者借助外部系统监控工具如<code>Ganglia</code>进行识别。</p>
</li>
<li>
<p>Redis连接拒绝<br>
Redis客户端数量超过<code>maxclients</code>限制时，会拒绝新的连接接入。<code>info stats</code>中的<code>rejected_connections</code>统计指标记录被拒绝连接的数量。</p>
</li>
</ol>
<blockquote>
<p>建议根据情况设置<code>tcp-keepalive</code>和<code>timeout</code>参数让Redis主动检查和关闭无效连接。</p>
</blockquote>
<ol start="3">
<li>连接溢出
<ol>
<li>操作系统文件句柄数限制 <code>ulimit -n</code></li>
<li>backlog队列溢出<br>
系统对于特定的TCP连接使用backlog队列保存。Redis通过<code>tcp-backlog</code>设置，默认511.系统的backlog默认128，使用<code>echo 511 &gt; /proc/sys/net/core/somaxconn</code>命令修改。<br>
通过<code>netstat -s | grep overflowed</code>查看因backlog队列溢出造成的连接拒绝统计指标。</li>
</ol>
</li>
</ol>
<h4 id="网络延迟"><a class="header-anchor" href="#网络延迟"></a>网络延迟</h4>
<p>网络延迟经常出现在跨机房的部署结构上，对于机房之间延迟比较严重的场景需要调整拓扑结构。<br>
测试网络延迟可以使用<code>redis-cli --latency</code>相关命令进行测试。<br>
带宽瓶颈通常出现在以下几个方面：</p>
<ul>
<li>机器网卡带宽</li>
<li>机器交换机带宽</li>
<li>机房之间专线带宽</li>
</ul>
<h4 id="网卡软中断"><a class="header-anchor" href="#网卡软中断"></a>网卡软中断</h4>
<p>网卡软中断是指由于单个网卡队列只能使用一个CPU，高并发下数据交互都集中在一个CPU上，导致无法充分利用多核CPU的情况。网卡软中断瓶颈一般出现在网络高流量吞吐的场景，使用<code>top</code>后按数字<code>1</code>查看CPU使用情况，其中<code>si</code>为软中断参数</p>
<h2 id="本章重点回顾"><a class="header-anchor" href="#本章重点回顾"></a>本章重点回顾</h2>
<ol>
<li>客户端最先感知阻塞等Redis超时行为，加入日志监控报警工具可快速定位阻塞问题，同时需要对Redis进程和机器做全面监控。</li>
<li>阻塞的内在原因：确认主线程是否存在阻塞，检查慢查询等信息，发现不合理使用API或数据结构的情况，如<code>keys</code>、<code>sort</code>、<code>hgetall</code>等。关注CPU使用率防止单核跑满。当硬盘IO资源紧张时，AOF追加也会阻塞主进程。</li>
<li>阻塞的外在原因：CPU竞争、内存交换、网络问题等。</li>
</ol>
<hr>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>关于Huge Pages与 Transparent Huge Pages的关系与区别请参阅博客<a href="https://www.cnblogs.com/kerrycode/p/7760026.html">潇湘隐者 - Linux传统Huge Pages与Transparent Huge Pages再次学习总结</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis开发与运维笔记_初识Redis</title>
    <url>/posts/1097430507.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>本章将带领读者进入Redis的世界，了解它的前世今生、众多特性、典型应用场景、安装配置、如何好用等，最后会对Redis发展过程中的重要版本进行说明</p>

</blockquote>
<span id="more"></span>
<p>参考书籍：<a href="https://book.douban.com/subject/26971561/">Redis开发与运维</a></p>
<hr>
<h1>初识Redis</h1>
<h2 id="盛赞Redis"><a class="header-anchor" href="#盛赞Redis"></a>盛赞Redis</h2>
<p>Redis[1]是一种基于键值对(key-value)的NoSQL数据库，与很多键值对 数据库不同的是，Redis中的值可以是由string(字符串)、hash(哈希)、 list(列表)、set(集合)、zset(有序集合)、Bitmaps(位图)、 HyperLogLog、GEO(地理信息定位)等多种数据结构和算法组成，因此 Redis可以满足很多的应用场景，而且因为Redis会将所有数据都存放在内存 中，所以它的读写性能非常惊人。不仅如此，Redis还可以将内存的数据利 用快照和日志的形式保存到硬盘上，这样在发生类似断电或者机器故障的时 候，内存中的数据不会“丢失”。除了上述功能以外，Redis还提供了键过 期、发布订阅、事务、流水线、Lua脚本等附加功能。总之，如果在合适的 场景使用好Redis，它就会像一把瑞士军刀一样所向披靡。</p>
<blockquote>
<p>Redis官网：  <a href="http://redis.io">redis.io</a></p>
</blockquote>
<h2 id="Redis特性"><a class="header-anchor" href="#Redis特性"></a>Redis特性</h2>
<ol>
<li>
<p>速度快</p>
<ul>
<li>数据基于内存</li>
<li>使用C语言实现，更接近操作系统</li>
<li>Redis使用了单线程架构，避免多线程线程间切换开销</li>
<li>Redis代码优化</li>
</ul>
</li>
<li>
<p>5种数据结构</p>
<p>String(字符串)、Hash(哈希)、List(列表)、Set(集合)、ZSet(有序集合)</p>
</li>
<li>
<p>丰富的功能</p>
<ul>
<li>过期功能：方便缓存的实现</li>
<li>发布/订阅功能：可以实现消息系统</li>
<li>支持Lua脚本，可以利用Lua创造出新的Redis命令</li>
<li>提供了简单的事务</li>
<li>提供了Pipeline(流水线)功能，可以减少网络开销</li>
</ul>
</li>
<li>
<p>稳定简单</p>
<p>源码简短而不简单</p>
</li>
<li>
<p>客户端语言多</p>
<p>提供了多种语言的客户端</p>
</li>
<li>
<p>持久化</p>
<p>RDB和AOF</p>
</li>
<li>
<p>主从复制</p>
<p>Redis提供了复制功能，实现了多个数据相同的Redis副本</p>
</li>
<li>
<p>高可用和分布式</p>
<p>Redis 2.8版本实现了高可用实现<code>Redis Sentinel</code>，它能够保证Redis节点的故障发现和故障自动转移。Redis 3.0版本实现了分布式实现<code>Redis Cluster</code>，它是Redis真正的分布式实现，提供了高可用、读写和容量的扩展</p>
</li>
</ol>
<h2 id="Redis的使用场景"><a class="header-anchor" href="#Redis的使用场景"></a>Redis的使用场景</h2>
<h3 id="Redis可以做什么"><a class="header-anchor" href="#Redis可以做什么"></a>Redis可以做什么</h3>
<ol>
<li>缓存</li>
<li>排行榜</li>
<li>计数器应用</li>
<li>社交网络</li>
<li>消息队列系统</li>
</ol>
<h3 id="Redis不可以做什么"><a class="header-anchor" href="#Redis不可以做什么"></a>Redis不可以做什么</h3>
<ol>
<li>数据量过大不适合使用Redis，Redis数据存放在内存中，数据量过大会导致内存资源紧张</li>
<li>常用热数据适合缓存，反之，冷数据如果缓存会造成内存资源的浪费</li>
</ol>
<h2 id="用好Redis的建议"><a class="header-anchor" href="#用好Redis的建议"></a>用好Redis的建议</h2>
<ol>
<li>使用者应了解Redis的<strong>单线程模型</strong>，<strong>持久化策略(RDB&amp;AOF)</strong>。</li>
<li>阅读Redis源码，吃透原理并可以根据业务需求对Redis进行定制化开发</li>
</ol>
<h2 id="正确安装并启动Redis"><a class="header-anchor" href="#正确安装并启动Redis"></a>正确安装并启动Redis</h2>
<h3 id="安装Redis"><a class="header-anchor" href="#安装Redis"></a>安装Redis</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-3.0.7.tar.gz</span><br><span class="line">tar xzf redis-3.0.7.tar.gz</span><br><span class="line">ln -s redis-3.0.7 redis</span><br><span class="line"><span class="built_in">cd</span> redis</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<ul>
<li>下载Redis指定版本的源码压缩包到当前目录。</li>
<li>解压缩Redis源码压缩包。</li>
<li>建立一个redis目录的软连接，指向redis-3.0.7。</li>
<li>进入redis目录。</li>
<li>编译(编译之前确保操作系统已经安装gcc)。</li>
<li>安装</li>
</ul>
<blockquote>
<p>注： 安装后会将Redis相关运行文件放到<code>/usr/local/bin</code>目录下</p>
</blockquote>
<h3 id="配置、启动、操作、关闭Redis"><a class="header-anchor" href="#配置、启动、操作、关闭Redis"></a>配置、启动、操作、关闭Redis</h3>
<p>Redis安装后，<code>/usr/local/bin</code>目录下会新增几个redis开头的可执行文件，说明如下：</p>
<table>
<thead>
<tr>
<th>可执行文件</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>redis-server</td>
<td>启动Redis</td>
</tr>
<tr>
<td>redis-cli</td>
<td>Redis命令行工具</td>
</tr>
<tr>
<td>redis-benchmark</td>
<td>Redis基准测试工具</td>
</tr>
<tr>
<td>redis-check-aof</td>
<td>Redis AOF 持久化文件检测和修复工具</td>
</tr>
<tr>
<td>redis-check-dump</td>
<td>Redis RDB 持久化文件检测和修复工具</td>
</tr>
<tr>
<td>redis-sentinel</td>
<td>启动 Redis Sentinel</td>
</tr>
</tbody>
</table>
<ol>
<li>
<p>启动Redis</p>
<ul>
<li>
<p>默认配置，执行<code>redis-server</code></p>
</li>
<li>
<p>运行启动，<code>redis-server --configKey1 configValue1 --configKey2 configValue2</code></p>
<p>例如：<code>redis-server --port 6378</code></p>
</li>
<li>
<p>配置文件启动，<code>redis-server /opt/redis/redis.conf</code></p>
</li>
</ul>
</li>
<li>
<p>Redis命令行客户端</p>
<p><code>redis-cli -h &#123;host&#125; -p &#123;port&#125;</code>，例如<code>redis-cli -h 127.0.0.1 -p 6379</code></p>
</li>
<li>
<p>停止Redis服务</p>
<p><code>redis-cli shutdown</code></p>
</li>
</ol>
<h2 id="Redis的重大版本"><a class="header-anchor" href="#Redis的重大版本"></a>Redis的重大版本</h2>
<blockquote>
<p>Redis借鉴了Linux对于版本号的命名规则，版本号第二位为奇数则表示版本为非稳定版本，且为下一稳定版本的开发版本</p>
</blockquote>
<ol>
<li>Redis 2.6
<ul>
<li>服务端支持Lua脚本。</li>
<li>去掉虚拟内存相关功能。</li>
<li>放开对客户端连接数的硬编码限制。</li>
<li>键的过期时间支持毫秒。</li>
<li>从节点提供只读功能。</li>
<li>两个新的位图命令:bitcount和bitop。</li>
<li>增强了redis-benchmark的功能:支持定制化的压测，CSV输出等功能。</li>
<li>基于浮点数自增命令:incrbyfloat和hincrbyfloat。</li>
<li>redis-cli可以使用–eval参数实现Lua脚本执行。</li>
<li>shutdown命令增强。</li>
<li>info可以按照section输出，并且添加了一些统计项。</li>
<li>重构了大量的核心代码，所有集群相关的代码都去掉了，cluster功 能将会是3.0版本最大的亮点。</li>
<li>sort命令优化。</li>
</ul>
</li>
<li>Redis 2.8
<ul>
<li>添加部分主从复制的功能，在一定程度上降低了由于网络问题，造成频繁全量复制生成RDB对系统造成的压力。</li>
<li>尝试性地支持IPv6。</li>
<li>可以通过config set命令设置maxclients。</li>
<li>可以用bind命令绑定多个IP地址。</li>
<li>Redis设置了明显的进程名，方便使用ps命令查看系统进程。</li>
<li>config rewrite命令可以将config set持久化到Redis配置文件中。</li>
<li>发布订阅添加了pubsub命令。</li>
<li>Redis Sentinel第二版，相比于Redis2.6的Redis Sentinel，此版本已经 变成生产可用。</li>
</ul>
</li>
</ol>
<blockquote>
<p>可以通过github仓库查看各版本重大改动： <a href="https://github.com/redis/redis/tags">Redis版本</a></p>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis开发与运维笔记-复制</title>
    <url>/posts/3460365957.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>在分布式系统中为了解决单点问题，通常会把数据复制多个副本部署到其他机器，满足故障恢复和负载均衡等需求。Redis也是如此，它为我们提供了复制功能，实现了相同数据的多个Redis副本。复制功能是高可用Redis的基础，后面章节的哨兵和集群都是在复制的基础上实现高可用的。复制也是Redis日常运维的常见维护点</p>

</blockquote>
<span id="more"></span>
<blockquote>
<p>参考书籍：<a href="https://book.douban.com/subject/26971561/">Redis开发与运维</a></p>
</blockquote>
<hr>
<h1>复制</h1>
<h2 id="配置"><a class="header-anchor" href="#配置"></a>配置</h2>
<h3 id="建立复制"><a class="header-anchor" href="#建立复制"></a>建立复制</h3>
<p>建立复制有以下三种方式：</p>
<ul>
<li>在配置文件中加入 <code>slaveof &#123;masterHost&#125; &#123;masterPort&#125;</code>，随着Redis启动生效</li>
<li>在<code>redis-server</code>启动命令后加入 <code>--salveof &#123;masterHost&#125; &#123;masterPort&#125;</code>生效</li>
<li>直接使用<code>slaveof &#123;masterHost&#125; &#123;masterPort&#125;</code></li>
</ul>
<p>可以使用<code>info replication</code>命令查看复制相关状态</p>
<h3 id="断开复制"><a class="header-anchor" href="#断开复制"></a>断开复制</h3>
<p>使用<code>slaveof no one</code>可以断开从节点的复制状态，之前同步的数据不会被删除。</p>
<p><code>slaveof</code>命令还可以用来切换主节点。切换流程：1）断开与旧主节点的复制关系，2）建立与新主节点的复制关系，3）删除从节点当前数据，4）对新主节点进行复制操作</p>
<blockquote>
<p>切换主节点后会清空之前所有的数据，线上操作应小心。</p>
</blockquote>
<h3 id="安全性"><a class="header-anchor" href="#安全性"></a>安全性</h3>
<p>主节点设置密码时，从节点应配置<code>masterauth</code>参数保持和主节点密码一致。</p>
<h3 id="只读"><a class="header-anchor" href="#只读"></a>只读</h3>
<p>默认情况下，从节点使用<code>slave-read-only=yes</code>配置为只读模式。线上建议不要修改</p>
<h3 id="传输延迟"><a class="header-anchor" href="#传输延迟"></a>传输延迟</h3>
<p>主从节点一般部署在不同的机器上。Redis提供了<code>repl-disable-tcp-nodelay</code>参数用于控制是否关闭TCP_NODELAY<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>，默认关闭，说明如下：</p>
<ul>
<li>关闭时，主节点产生的命令数据无论大小都会及时的发送给从节点，这样会导致主从延迟减小、带宽消耗增加。适用于主从之间网络环境良好的场景，如同机架或同机房部署</li>
<li>开启时，主节点会合并较小的TCP数据包而节省带宽。默认发送间隔一般为40毫秒。适合主从网络环境复杂或带宽紧张的场景，如跨机房部署。</li>
</ul>
<h2 id="拓扑"><a class="header-anchor" href="#拓扑"></a>拓扑</h2>
<h3 id="一主一从结构"><a class="header-anchor" href="#一主一从结构"></a>一主一从结构</h3>
<p>一主一从是最简单的复制拓扑结构，用于故障转移。当写高并发场景时，可以在从节点上开启AOF持久化功能。主节点关闭持久化功能时，要避免主节点自动重启，因为复制关系，主节点重启后，从节点复制数据会导致从节点的数据丢失。</p>
<h3 id="一主多从结构"><a class="header-anchor" href="#一主多从结构"></a>一主多从结构</h3>
<p>对于读占比较大的场景，可以把读命令发送到从节点分摊主节点压力。但是对于写并发较高场景，多个从节点复制过程会增加主节点的输出网络带宽消耗。</p>
<h3 id="树状结构"><a class="header-anchor" href="#树状结构"></a>树状结构</h3>
<p>树状结构有效的解决了主节点下从节点过多导致的主节点带宽消耗问题，但也引入了新的问题，即系统的复杂性。</p>
<h2 id="原理"><a class="header-anchor" href="#原理"></a>原理</h2>
<h3 id="复制过程"><a class="header-anchor" href="#复制过程"></a>复制过程</h3>
<ol>
<li>
<p>保存主节点信息</p>
</li>
<li>
<p>主从建立Socket连接<br>
从节点内部通过每秒运行的定时任务维护复制相关逻辑，当定时任务发现存在新的主节点时，会尝试与该节点建立网络连接</p>
<p>连接失败可通过<code>info replication</code>查看<code>master_link_down_since_seconds</code>指标，它会记录与主节点连接失败的系统时间</p>
</li>
<li>
<p>发送<code>ping</code>命令<br>
从节点发送Ping到主节点，如果没有收到主节点的Pong或者超时，从节点会断开复制链接，下次定时重新发起重连</p>
</li>
<li>
<p>权限验证<br>
如果主节点设置了<code>requirepass</code>参数，则需要密码验证。从节点密码错误则会导致复制终止，从节点后续重新发起复制流程</p>
</li>
<li>
<p>同步数据集<br>
主从正常通信后，首次建立复制的场景，主节点会把持有的数据全部发送给从节点，这部分操作是耗时最长的步骤。</p>
</li>
<li>
<p>命令持续复制<br>
当主节点把当前数据同步给从节点后，遍完成了复制的建立流程。接下来主节点会持续地把写命令发送给从节点，保证主从数据一致性。</p>
</li>
</ol>
<h3 id="数据同步"><a class="header-anchor" href="#数据同步"></a>数据同步</h3>
<p>数据同步过程分为全量复制和部分复制：</p>
<ul>
<li>全量复制：初次复制场景使用。开销较大</li>
<li>部分复制：用于处理主从复制中因网络闪电等原因造成的数据丢失场景。从节点连接主节点后，如果条件允许，主节点会补发丢失数据给从节点。</li>
</ul>
<p>复制命令<code>psync</code>需要以下组件支持:</p>
<ol>
<li>
<p>复制偏移量<br>
主节点保存自身偏移量(命令的字节长度累加),在<code>info replicaiton</code>中的<code>master_repl_offset</code></p>
<p>从节点没秒钟上报自身的复制偏移量，主节点也保存从节点的复制偏移量</p>
<p>从节点接收到主节点发送的命令后，也会累加记录自身的偏移量，统计信息在<code>info replication</code>的<code>slave_repl_offset</code>指标中。</p>
</li>
</ol>
<blockquote>
<p>可以计算主从节点的复制偏移量的差，判断主从复制是否健康，当差值较大时，可能存在网络延迟或者命令阻塞等问题。</p>
</blockquote>
<ol start="2">
<li>
<p>复制积压缓冲区<br>
复制积压缓冲区是主节点上一个固定长度的队列，默认大小为1MB，当Redis作为主节点拥有从节点时被创建。主节点响应写命令时，不但会把命令发送给从节点，还会写入复制积压缓冲区，缓冲区的信息保存在主节点的<code>info replication</code>中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info replication <span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">...</span><br><span class="line">repl_backlog_active:1 <span class="comment"># 开启复制缓冲区</span></span><br><span class="line">repl_backlog_size:1048576 <span class="comment"># 缓冲区最大长度</span></span><br><span class="line">repl_backlog_first_byte_offset:7479 <span class="comment"># 起始偏移量，计算当前缓冲区可用范围</span></span><br><span class="line">repl_backlog_histlen:1048576 <span class="comment"># 已保存数据的有效长度。</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>主节点运行ID<br>
每个Redis节点启动后都会动态分配一个40为的十六进制字符串作为运行ID。从节点通过运行ID识别主节点。通过<code>info server</code>命令可以查看当前节点的运行ID。这样做主要是防止主节点重启变更数据集(通过ip+port无法定位)，从节点再根据偏移量复制数据会变得不安全。</p>
<p>想要不变更运行ID重启可以使用<code>debug reload</code>命令</p>
<blockquote>
<p><code>debug reload</code>命令会阻塞当前Redis节点主线程，阻塞期间会生成本地RDB快照并清空数据后再加载RDB文件。谨慎使用！</p>
</blockquote>
</li>
<li>
<p>psync命令<br>
<code>psync &#123;runID&#125; &#123;offset&#125;</code>,回复参数有三种：1）全量复制：<code>+FULLRESYNC &#123;runID&#125; &#123;offset&#125;</code>。2）部分复制：<code>+CONTINUE</code>，从节点触发部分复制流程。3）不支持:<code>+ERR</code></p>
</li>
</ol>
<h3 id="全量复制"><a class="header-anchor" href="#全量复制"></a>全量复制</h3>
<img src="/posts/3460365957/%E5%85%A8%E9%87%8F%E5%A4%8D%E5%88%B6.png" class="" title="全量复制">
<ol>
<li>
<p>从节点没有主节点运行ID和偏移量数据，发送<code>psync -1</code>请求全量复制</p>
</li>
<li>
<p>主节点响应<code>+FULLRESYNC</code></p>
</li>
<li>
<p>从节点获取响应数据中的运行ID和偏移量offset</p>
</li>
<li>
<p>主节点执行<code>bgsave</code>保存RDB文件到本地</p>
</li>
<li>
<p>主节点发送RDB文件给从节点，从节点接收RDB文件保存到本地并直接作为从节点的数据文件</p>
<p>为了降低主机点的磁盘开销，可以使用<code>repl-diskless-sync</code>参数开启无盘复制，默认关闭。开启时主节点不会再本地生成RDB，而是直接通过网络发送到从节点。适用于磁盘性能差、网络带宽足的场景。</p>
</li>
<li>
<p>从节点加载RDB文件期间，主节点仍响应写命令。并将其写入复制客户端缓冲区内，从节点加载完成，主节点再将缓冲区内的数据发送给从节点。如果主节点创建和传输RDB的时间过长，高并发写时容易造成主节点复制客户端缓冲区溢出。Redis提供了<code>client-output-buffer-limit slave 256MB64MB60</code>如果60秒内缓冲区消耗持续大于64MB或者直接超过256MB，主节点将直接关闭客户端连接，造成全量同步失败。</p>
</li>
<li>
<p>从节点接收完主节点传送来的全部数据后会清空自身旧数据。</p>
</li>
<li>
<p>从节点加载RDB文件。<br>
<code>slave-serve-stale-data</code>参数控制复制数据期间是否响应读命令，默认开启。</p>
</li>
<li>
<p>从节点加载RDB成功后，如果开启了AOF，会立刻执行<code>bgrewriteaof</code>操作，保证AOF持久化文件立刻可用。</p>
</li>
</ol>
<h3 id="部分复制"><a class="header-anchor" href="#部分复制"></a>部分复制</h3>
<p>主从节点之间网络中断超过<code>repl-timeout</code>时间，主节点会认为从节点故障并中断复制链接。中断期间主节点将写命令下入复制积压缓冲区，最大缓存1MB。从节点再次上线后，通过<code>psync</code>将自身偏移量发送给主节点，要求部分复制。主节点检查运行ID，根据offset判断是否命中积压缓冲区，如果命中响应<code>+CONTINUE</code>。主节点根据偏移量将复制积压缓冲区里的数据发送给从节点。</p>
<h3 id="心跳"><a class="header-anchor" href="#心跳"></a>心跳</h3>
<ol>
<li>主节点每隔10秒对从节点发送ping命令。通过<code>repl-ping-slave-period</code>控制发送频率</li>
<li>从节点在主线程每隔1秒发送<code>replconf ack &#123;offset&#125;</code>命令，上报自身复制偏移量，作用如下：
<ul>
<li>监测主节点网络状态</li>
<li>上报自身偏移量，检查数据是否丢失。如丢失发起部分复制从主节点复制缓冲区拉取。</li>
<li>实现保证从节点的数量和延迟性功能，通过<code>min-slaves-to-write</code>、<code>min-slaves-max-lag</code>参数配置定义</li>
</ul>
</li>
</ol>
<p>主节点根据replconf命令判断从节点超时时间。体现在<code>info replication</code>统计中的<code>lag</code>信息中，lag表示与从节点最后一次通信延迟的描述，正常应该在0-1之间。如果超过<code>repl-timeout</code>配置的值(默认60秒)，则判定从节点下线并断开连接。从节点恢复后，心跳检测会继续进行。</p>
<h3 id="异步复制"><a class="header-anchor" href="#异步复制"></a>异步复制</h3>
<p>主节点将写命令发送给从节点是异步的。这样会导致主从之间数据存在延迟，延迟取决于主从之间网络环境、<code>repl-disable-tcp-nodelay</code>、命令处理速度等，一般情况下，延迟应在1秒以内。</p>
<h2 id="开发与运维中的问题"><a class="header-anchor" href="#开发与运维中的问题"></a>开发与运维中的问题</h2>
<h3 id="读写分离"><a class="header-anchor" href="#读写分离"></a>读写分离</h3>
<ol>
<li>数据延迟</li>
<li>读取到过期数据(惰性删除数据，Redis3.2后从节点读取前会检查过期时间，解决了该问题)</li>
<li>从节点故障</li>
</ol>
<h3 id="主从配置不一致"><a class="header-anchor" href="#主从配置不一致"></a>主从配置不一致</h3>
<p>避免主从配置不一致，如<code>maxmemroy</code>。从节点设置小于主节点的<code>maxmemory</code>可能导致从节点过早进行内存溢出控制导致数据丢失。也可能由于参数不同主从使用不同的内部编码实现对应数据结构导致主从内存不一致。</p>
<h3 id="规避全量复制"><a class="header-anchor" href="#规避全量复制"></a>规避全量复制</h3>
<ol>
<li>
<p>首次复制<br>
对数据量较大的主节点添加从节点时，在低峰时进行操作。</p>
</li>
<li>
<p>节点运行ID不匹配<br>
主节点故障后，应进行故障转移，手动提升从节点为主节点或者使用哨兵或集群方案。</p>
</li>
<li>
<p>复制积压缓冲区不足<br>
合理调整复制积压缓冲区的大小，避免因从节点故障重新上线无法命中缓冲区导致的全量复制。</p>
</li>
</ol>
<h3 id="规避复制风暴"><a class="header-anchor" href="#规避复制风暴"></a>规避复制风暴</h3>
<ol>
<li>
<p>单主节点复制风暴<br>
减少主节点挂载从节点数量，或者采用树状复制结构。</p>
</li>
<li>
<p>单机器复制风暴<br>
避免在单个机器上部署过多的主节点。主节点所在机器故障后提供故障转移机制，避免机器恢复后进行密集的全量复制。</p>
</li>
</ol>
<h2 id="本章重点回顾"><a class="header-anchor" href="#本章重点回顾"></a>本章重点回顾</h2>
<ol>
<li>Reids通过复制功能实现主节点的多个副本，从节点可灵活地通过<code>slaveof</code>命令建立或断开复制流程</li>
<li>复制支持树状结构。复制分为全量复制和部分复制，设置合理的积压缓冲区大小可以规避不必要的全量复制</li>
<li>主从节点通过心跳和偏移量检查机制，保证主从节点通信正常和数据一致</li>
<li>Redis为了保证高性能，复制过程是异步的，写命令处理后直接返回给客户端，不等待从节点复制完成。因此从节点数据集会有延迟情况。</li>
<li>当使用从节点用于读写分离时会存在数据延迟、过期数据、从节点可用性等问题，需要根据自身业务提前做出规避</li>
<li>运维过程中，主节点存在多个从节点或者一台机器上部署大量主节点的情况下，会有复制风暴的风险。</li>
</ol>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>关于TCP_NODELAY可以查看<a href="https://www.cnblogs.com/wajika/p/6573028.html">详解Socket编程—TCP_NODELAY选项</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis开发与运维笔记_客户端</title>
    <url>/posts/3206834815.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>Redis是用单线程来处理多个客户端的访问，因此作为Redis的开发和运维人员需要了解Redis服务端和客户端的通信协议，以及主流编程语言的Redis客户端使用方法，同时还需要了解客户端管理的相应API以及开发运维中可能遇到的问题</p>

</blockquote>
<span id="more"></span>
<p>参考书籍：<a href="https://book.douban.com/subject/26971561/">Redis开发与运维</a></p>
<hr>
<h1>客户端</h1>
<h2 id="客户端通信协议"><a class="header-anchor" href="#客户端通信协议"></a>客户端通信协议</h2>
<p>Redis的通信协议是在TCP协议之上构建的。Redis定制了RESP(Redis Serialization Protocol,Redis序列化协议)实现客户端与服务端的正常交互。</p>
<h3 id="发送命令格式"><a class="header-anchor" href="#发送命令格式"></a>发送命令格式</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*&lt;参数数量&gt; CRLF</span><br><span class="line">$&lt;参数1的字节数量&gt; CRLF</span><br><span class="line">&lt;参数1&gt; CRLF</span><br><span class="line">...</span><br><span class="line">$&lt;参数N的字节数量&gt; CRLF</span><br><span class="line">&lt;参数N&gt; CRLF</span><br></pre></td></tr></table></figure>
<ul>
<li>以<code>set hello world</code>为例，命令为<code>*3\r\n$3\r\nSET\r\n$5\r\nhello\r\n$5\r\nworld\r\n</code></li>
</ul>
<h3 id="返回结果格式"><a class="header-anchor" href="#返回结果格式"></a>返回结果格式</h3>
<ul>
<li>状态回复：在RESP中第一个字节是&quot;+&quot;</li>
<li>错误回复：“-”</li>
<li>整数回复：“:”</li>
<li>字符串回复：“$”</li>
<li>多条字符串回复：“*”</li>
</ul>
<blockquote>
<p>Redis-cli只能看到最终结果，想要看到Redis的真正返回结果可以使用<code>telnet</code>、<code>nc</code>、甚至使用Socket程序进行模拟。<br>
当结果中包含不存在的值(nil)，返回$-1。</p>
</blockquote>
<h2 id="Java客户端Jedis"><a class="header-anchor" href="#Java客户端Jedis"></a>Java客户端Jedis</h2>
<h3 id="获取Jedis"><a class="header-anchor" href="#获取Jedis"></a>获取Jedis</h3>
<p>使用maven,gradle等将Redis坐标加入依赖中。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Jedis的基本使用方法"><a class="header-anchor" href="#Jedis的基本使用方法"></a>Jedis的基本使用方法</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">jedis.set(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">String value = jedis.get(<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>Jedis初始化需要两个参数，除此之外，包含四个参数的构造函数也比较常用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * host: 主机地址</span></span><br><span class="line"><span class="comment"> * port: 主机IP</span></span><br><span class="line"><span class="comment"> * connectionTimeout: 客户端连接超时</span></span><br><span class="line"><span class="comment"> * soTimeout: 客户端读写超时</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Jedis(<span class="keyword">final</span> String host, <span class="keyword">final</span> <span class="keyword">int</span> port, <span class="keyword">final</span> <span class="keyword">int</span> connectionTimeout, <span class="keyword">final</span> <span class="keyword">int</span> soTimeout)</span><br></pre></td></tr></table></figure>
<p>除了使用传统的String类型，Jedis还提供了基于字节数组的操作。可以使用序列化工具将Java对象进行序列化保存到Redis中，读取后再反序列化为对应对象。</p>
<h3 id="Jedis连接池的使用方法"><a class="header-anchor" href="#Jedis连接池的使用方法"></a>Jedis连接池的使用方法</h3>
<p>连接池的优缺点不再赘述，主要是提高复用性，节省每次进行连接及创建对象的开销。<br>
Jedis提供了JedisPool这个类作为Jedis的连接池对象，使用Apache的通用池对象工具common-pool作为资源的管理工具。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// common-pool连接池配置，这里使用默认配置，后面小节会介绍具体配置说明 </span></span><br><span class="line">GenericObjectPoolConfig poolConfig = <span class="keyword">new</span> GenericObjectPoolConfig(); </span><br><span class="line"><span class="comment">// 初始化Jedis连接池</span></span><br><span class="line">JedisPool jedisPool = <span class="keyword">new</span> JedisPool(poolConfig, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  jedis = jedisPool.getResource();</span><br><span class="line">  jedis.get(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">  logger.error(e.getMessage(),e);</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(jedis!=<span class="keyword">null</span>)&#123;</span><br><span class="line">    jedis.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Jedis中Pipeline的使用方法"><a class="header-anchor" href="#Jedis中Pipeline的使用方法"></a>Jedis中Pipeline的使用方法</h3>
<ul>
<li>利用jedis对象生成一个pipeline对象，<code>jedis.pipelined()</code></li>
<li>使用pipeline对象进行jedis操作，此时的命令不会真正执行</li>
<li>使用pipeline.sync()完成此次pipeline对象的调用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mdel</span><span class="params">(List&lt;String&gt; keys)</span></span>&#123;</span><br><span class="line">  Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">  Pipeline pipeline = jedis.pipelined();</span><br><span class="line">  <span class="keyword">for</span>(String key : keys)&#123;</span><br><span class="line">    pipeline.del(key);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  pipeline.sync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>除了<code>pipeline.sync()</code>，还可以使用<code>List&lt;Object&gt; Pipeline#syncAndReturnAll()</code>获取pipeline的执行结果。</li>
</ul>
<h3 id="Jedis的Lua脚本"><a class="header-anchor" href="#Jedis的Lua脚本"></a>Jedis的Lua脚本</h3>
<p>Jedis中关于Lua脚本的内容与Redis-cli十分类似，主要有以下几个函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Object <span class="title">eval</span><span class="params">(String script, <span class="keyword">int</span> keyCount, String... params)</span> </span></span><br><span class="line"><span class="function">Object <span class="title">evalsha</span><span class="params">(String sha1, <span class="keyword">int</span> keyCount, String... params)</span> </span></span><br><span class="line"><span class="function">String <span class="title">scriptLoad</span><span class="params">(String script)</span></span></span><br></pre></td></tr></table></figure>
<h2 id="Python客户端redis-py"><a class="header-anchor" href="#Python客户端redis-py"></a>Python客户端redis-py</h2>
<p>略过此篇幅；</p>
<h2 id="客户端管理"><a class="header-anchor" href="#客户端管理"></a>客户端管理</h2>
<h3 id="客户端API"><a class="header-anchor" href="#客户端API"></a>客户端API</h3>
<ol>
<li><code>client list</code>: 列出与Redis实例连接的客户端信息</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; client list</span><br><span class="line">id=3 addr=127.0.0.1:54162 fd=8 name= age=4 idle=0 flags=N db=0 sub=0 psub=0 multi=-1 qbuf=26 qbuf-free=32742 obl=0 oll=0 omem=0 events=r cmd=client</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>标识：id,addr,fd,name</p>
<ul>
<li>id：客户端连接唯一标识，自增，重启后重置为0</li>
<li>addr：客户端连接的ip和端口</li>
<li>fd: socket的文件描述符。<code>=-1</code>标识当前客户端不是外部客户端，而是Redis内部的伪装客户端</li>
<li>name: 客户端的名字。对应<code>client setName</code>和<code>client getName</code></li>
</ul>
</li>
<li>
<p>输入缓冲区：qbuf、qbuf-free</p>
<ul>
<li>Redis为每个客户端分配了输入缓冲区，临时保存客户端的命令。</li>
<li>qbuf和qbuf-free分别代表缓冲区的总容量和剩余容量。Redis没有配置设置缓冲区大小，而是会根据输入内容的大小不同动态调整，缓冲区不能超过1G，超过后客户端将被关闭。</li>
<li>输入缓冲区使用不当可能造成两个问题：
<ol>
<li>客户端的输入缓冲区超过1G，客户端将会被关闭</li>
<li>多个客户端使用过多内存，会使Redis的内存占用超出<code>maxmemory</code>，造成数据丢失、键值淘汰、OOM等情况</li>
<li>解决以上问题的方法：1)可以通过定期执行<code>client list</code>命令，收集qbuf和qbuf-free.2)通过info命令的info clients模块，当最大的缓冲区超过一定阈值进行报警。</li>
</ol>
</li>
</ul>
</li>
<li>
<p>输出缓冲区：obl、oll、omen</p>
<ul>
<li>Redis为每个客户端分配了输出缓冲区，保存命令执行的结果返回给客户端。它可以通过参数<code>client-output-buffer-limit</code>来进行设置。</li>
</ul>
</li>
<li>
<p>客户端的存活状态 age、idle</p>
<ul>
<li>age：客户端已经连接的时间</li>
<li>idle：最近一次的空闲时间</li>
</ul>
</li>
<li>
<p>客户端的限制 maxclients和timeout</p>
<ul>
<li>maxclients:最大客户端连接数，默认是10000，可通过<code>info clients</code>查看当前Redis的连接数</li>
<li>timeout: 客户端最大空闲时间，为防止客户端没有关闭连接造成连接数过多。开发过程中应注意是否设置此参数，避免造成客户端错误</li>
</ul>
</li>
<li>
<p>客户端类型：flag</p>
<ul>
<li>flag：当前客户端的类型，S：当前客户端是slave客户端，N：普通客户端，O：当前客户端正在执行monitor命令。</li>
</ul>
</li>
</ul>
<ol start="2">
<li><code>clinet setName</code>和<code>client getName</code></li>
<li><code>client kill ip:port</code>  手动杀掉客户端连接</li>
<li><code>client pause timeout(毫秒)</code> 暂停客户端连接</li>
</ol>
<ul>
<li><code>client puase</code>只对普通和发布订阅客户端有效</li>
<li><code>client pause</code>可以用一种可控的方式将客户端连接从一个Redis节点切换到另一个Redis节点</li>
</ul>
<ol start="5">
<li><code>monitor</code> 监控Redis正在执行的命令。需要注意的是，高并发场景下，多个客户端执行的命令通过monitor进行监视，可能造成输出缓冲区内存暴涨。</li>
</ol>
<h3 id="客户端相关配置"><a class="header-anchor" href="#客户端相关配置"></a>客户端相关配置</h3>
<ul>
<li>timeout: 客户端空闲连接的超时时间</li>
<li>maxclients: 客户端最大连接数</li>
<li>tcp-keepalive: 检测TCP连接活性的周期，默认为0，不检测。</li>
<li>tcp-backlog: TCP三次握手后，会将接受的连接放入队列，参数为此队列大小，默认511。受操作系统影响，一般不需要调整。Linux中如果<code>/proc/sys/net/core/somaxconn</code>小于tcp-backlog.那么Redis启动时会看到如下日志</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/ sys/net/core/somaxconn is set to the lower value of 128.</span></span><br></pre></td></tr></table></figure>
<h3 id="客户端统计片段-info-clients"><a class="header-anchor" href="#客户端统计片段-info-clients"></a>客户端统计片段 <code>info clients</code></h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; info clients</span><br><span class="line"><span class="comment"># Clients</span></span><br><span class="line">connected_clients:1 <span class="comment"># 当前Redis的客户端连接数</span></span><br><span class="line">client_recent_max_input_buffer:2  <span class="comment"># 当前所有输入缓冲区中占用的最大容量</span></span><br><span class="line">client_recent_max_output_buffer:0 <span class="comment"># 当前输出缓冲区队列对象个数的最大值</span></span><br><span class="line">blocked_clients:0 <span class="comment"># 正在执行阻塞命令的客户端个数</span></span><br></pre></td></tr></table></figure>
<p>除此之外<code>info stats</code>中也包含两个客户端相关的统计指标.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; INFO stats</span><br><span class="line"><span class="comment"># Stats</span></span><br><span class="line">total_connections_received:1  <span class="comment"># 客户端连接总数</span></span><br><span class="line">...</span><br><span class="line">rejected_connections:0 <span class="comment"># 拒绝客户端连接数</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h2 id="本章重点回顾"><a class="header-anchor" href="#本章重点回顾"></a>本章重点回顾</h2>
<ol>
<li>RESO保证客户端与服务端的正常通信，是各种编程语言开发的基础</li>
<li>区分Redis直连和连接池的区别，在生产环境中，应该使用连接池</li>
<li>Jedis客户端没有内置序列化，需要自己选用</li>
<li>客户端输入缓冲区不能配置，强制限制在1G之内，但是不会受到<code>maxmemory</code>限制</li>
<li>客户端输出缓冲区支持普通客户端、发布订阅客户端、复制客户端配置，会受到<code>maxmemory</code>限制。</li>
<li>Redis的<code>timeout</code>配置可以自动关闭闲置客户端，<code>tcp-keepalive</code>参数可以周期性检查关闭无效TCP连接</li>
<li><code>info clients</code>可以帮助开发运维人员找到客户端可能存在的问题</li>
<li>理解Redis通信原理和建立完善的监控系统对快速定位解决客户端常见问题非常有帮助</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis开发与运维笔记_小功能大用处</title>
    <url>/posts/2425201134.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>Redis提供的5种数据结构已经足够强大，但除此之外，Redis还提供了诸如慢查询分析、功能强大的Redis Shell、Pipeline、事务与Lua脚本、 Bitmaps、HyperLogLog、发布订阅、GEO等附加功能，这些功能可以在某些场景发挥重要的作用</p>

</blockquote>
<span id="more"></span>
<p>参考书籍：<a href="https://book.douban.com/subject/26971561/">Redis开发与运维</a></p>
<hr>
<h1>小功能大用处</h1>
<h2 id="慢查询分析"><a class="header-anchor" href="#慢查询分析"></a>慢查询分析</h2>
<p>客户端执行一条命令分为如下四个阶段：1、发送命令 2、命令排队 3、命令执行 4、返回结果<br>
慢查询值统计步骤3的时间，所有没有慢查询并不代表客户端没有超时问题。</p>
<h3 id="慢查询的两个参数"><a class="header-anchor" href="#慢查询的两个参数"></a>慢查询的两个参数</h3>
<ul>
<li><strong>slowlog-log-slower-than</strong>：慢查询阈值，单位是微妙，默认值10000
<ul>
<li><code>=0</code>时会记录所有命令</li>
<li><code>&lt;0</code>时不记录任何命令</li>
</ul>
</li>
<li><strong>slowlog-max-len</strong>：慢查询日志列表的最大长度,默认值128</li>
</ul>
<blockquote>
<p>通过 <code>config set</code>命令动态调整Redis配置</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">config <span class="built_in">set</span> slowlog-log-slower-than 20000 </span><br><span class="line">config <span class="built_in">set</span> slowlog-max-len 1000</span><br><span class="line">config rewrite  <span class="comment"># 持久化到本地配置文件</span></span><br></pre></td></tr></table></figure>
<ul>
<li>redis的慢查询日志存放在redis的列表中。慢查询日志项由标识ID、发生时间戳、命令耗时、执行命令四部分组成。可以使用如下api进行查询：
<ul>
<li>获取慢查询日志 <code>slowlog get [n]</code></li>
<li>获取慢查询日志列表当前的长度 <code>slowlog len</code></li>
<li>慢查询日志重置 <code>slowlog reset</code></li>
</ul>
</li>
</ul>
<h3 id="最佳实践"><a class="header-anchor" href="#最佳实践"></a>最佳实践</h3>
<ol>
<li><code>slowlog-max-len</code>:线上建议调大，避免溢出丢失慢查询记录，慢查询日志会对长命令进行截取，不会占用过多内存</li>
<li><code>slowlog-log-slower-than</code>:默认值10毫秒为慢查询，对于高并发场景，如果命令执行时间超过1毫秒，那么Redis最多可支撑OPS不到1000。建议高OPS场景的Redis设置为1毫秒。</li>
<li>慢查询只记录命令执行时间，客户端请求超时时，可根据慢查询记录分析是否是慢查询导致的超时。</li>
<li>由于慢查询日志是一个先进先出的队列，慢查询较多时可能导致丢失部分慢查询命令，可以定时通过<code>slowlog get</code>命令将慢查询日志持久化到其他存储中(如MySQL)，然后制作可视化界面进行展示。</li>
</ol>
<h2 id="Redis-Shell"><a class="header-anchor" href="#Redis-Shell"></a>Redis Shell</h2>
<p>Redis提供了redis-cli、redis-server、redis-benchmark等Shell工具</p>
<h3 id="redis-cli"><a class="header-anchor" href="#redis-cli"></a>redis-cli</h3>
<ol>
<li><code>-r</code> 将命令执行多次</li>
<li><code>-i</code> 每隔几秒执行一次，需配合<code>-r</code>一起使用</li>
<li><code>-x</code> 从标准输入<code>stdin</code>读取数据作为redis-cli的最后一个参数</li>
<li><code>-c</code> 连接Redis Cluster节点时需要使用的，-c选项可以防止moved和ask异常</li>
<li><code>-a</code> 如果设置了密码可以使用-a选项，不用再手动输入<code>auth</code>命令</li>
<li><code>--scan和--pattern</code> 相当于<code>scan</code>命令</li>
<li><code>--slave</code> 将当前客户端模拟成当前Redis实例的从节点</li>
<li><code>--rdb</code> 请求Redis实例生成并发送RDB持久化文件，保存在本地，可以使用它做持久化文件的定期备份</li>
<li><code>--pipe</code> 将命令封装成Redis通信协议定义的数据格式，批量发送 给Redis执行.<code>echo -en '*3\r\n$3\r\nSET\r\n$5\r\nhello\r\n$5\r\nworld\r\n*2\r\n$4\r\nincr\r\ n$7\r\ncounter\r\n' | redis-cli --pipe</code></li>
<li><code>--bigkeys</code> 使用<code>scan</code>命令对Redis的键进行采样，从中找到内存占用比较大的键值，这些键可能是系统的瓶颈</li>
<li><code>--eval</code> 用于执行Lua脚本</li>
<li><code>--latency</code></li>
</ol>
<ul>
<li><code>--latency</code>：测试客户端到目标Redis实例的延迟</li>
<li><code>--latency-history</code>: 每15s输出一次延迟信息</li>
<li><code>--latency-dist</code>:以图表形式展示延迟信息</li>
</ul>
<ol start="13">
<li><code>--stat</code>: 实时获取Redis的重要统计信息</li>
<li><code>--raw</code>和<code>--no-raw</code>: <code>--raw</code>返回格式花数据，<code>--no-raw</code>返回原始格式数据。</li>
</ol>
<h3 id="redis-server"><a class="header-anchor" href="#redis-server"></a>redis-server</h3>
<p>redis-server 除了启动Redis实例外，还有一个<code>--test-memory</code>，用于检测当前机器能否稳定的分配指定容量的内存给Redis.<br>
<code>redis-server --test-memory 1024</code>,检测当前操作系统能否提供1G的内存给Redis</p>
<h3 id="redis-benchmark"><a class="header-anchor" href="#redis-benchmark"></a>redis-benchmark</h3>
<p>redis-benchmark可以为Redis做基准性能测试，它提供了很多选项帮助开发和运维人员测试Redis的相关性能，下面分别介绍这些选项。</p>
<ol>
<li><code>-c</code>: 客户端的并发数量，默认50</li>
<li><code>-n</code>: 客户端请求总数，默认100000</li>
<li><code>-q</code>: 仅显示基准测试的<code>requests per second</code></li>
<li><code>-r</code>: 生成随机个数个键，<code>-r 10000</code>，代表仅处理生成键的后四位，如<code>&quot;key:000000004580&quot;、&quot;key:000000004519&quot;</code></li>
<li><code>-p</code>: 代表每个请求pipeline的数量</li>
<li><code>-k</code>: 客户端是否使用keepalive，1：使用，0：不使用，默认为1</li>
<li><code>-t</code>: 可以对指定命令进行基准测试，如:<code>-t get,set</code></li>
<li><code>--csv</code>: 输出csv格式结果</li>
</ol>
<h2 id="Pipeline"><a class="header-anchor" href="#Pipeline"></a>Pipeline</h2>
<p>将多条命令封装成一条pipeline命令，节省发送多次命令造成的网络耗时，提供性能可以考虑</p>
<p>原生批量命令和Pipeline对比</p>
<ul>
<li>原生批量命令是原子的，Pipeline是非原子的</li>
<li>原生批量命令是支持多个key，Pipeline是支持使用多个命令</li>
<li>原生批量命令是Redis服务端支持的，而Pipeline需要服务端和客户端共同实现</li>
</ul>
<h2 id="事务与Lua"><a class="header-anchor" href="#事务与Lua"></a>事务与Lua</h2>
<h3 id="事务"><a class="header-anchor" href="#事务"></a>事务</h3>
<p>Redis支持的事务非常简单，<code>multi</code>代表事务开始，<code>exec</code>代表事务结束。<br>
Redis的错误处理机制：</p>
<ul>
<li>命令错误，事务不进行</li>
<li>运行时错误，命令格式正确，但是语义错误，这种事务执行到语义错误的位置时才会停下，而之前的命令已经执行<br>
Redis提供<code>watch key</code>命令来保证事务期间，key没有被更改.</li>
</ul>
<h3 id="Lua用法简介"><a class="header-anchor" href="#Lua用法简介"></a>Lua用法简介</h3>
<p>Lua是一种脚本语言，它是用C语言实现的。</p>
<h4 id="数据类型及其处理逻辑"><a class="header-anchor" href="#数据类型及其处理逻辑"></a>数据类型及其处理逻辑</h4>
<p>Lua提供了<code>booleans(布尔)、numbers(数值)、strings(字符串)、tables(表格)</code>几种数据类型</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">--### 基本数据类型 ###---</span></span><br><span class="line"><span class="keyword">local</span> strings val = <span class="string">&quot;world&quot;</span> <span class="comment">-- local代表val是局部变量，没有则是全局变量</span></span><br><span class="line"><span class="built_in">print</span>(val)  <span class="comment">-- world</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> tables myArray = &#123;<span class="string">&quot;redis&quot;</span>, <span class="string">&quot;jedis&quot;</span>, <span class="literal">true</span>, <span class="number">88.0</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(myArray[<span class="number">3</span>]) <span class="comment">-- true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--### for 的用法 ###---</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, #myArray</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">print</span>(myArray[i])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index,value <span class="keyword">in</span> <span class="built_in">ipairs</span>(myArray)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">print</span>(index)</span><br><span class="line">  <span class="built_in">print</span>(value)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--### while 的用法 ###---</span></span><br><span class="line"><span class="keyword">local</span> int sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">local</span> int i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(i &lt; #myArray)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  sum = sum + i;</span><br><span class="line">  i = i + <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--### if 的用法 ###---</span></span><br><span class="line"><span class="keyword">if</span> myArray[<span class="number">1</span>] == <span class="string">&quot;jedis&quot;</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;true&quot;</span>)</span><br><span class="line">  <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="comment">-- do nothing</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--### 实现hash ###---</span></span><br><span class="line"><span class="keyword">local</span> tables user_1 = &#123;age = <span class="number">28</span>, name = <span class="string">&quot;tom&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;user_1 age is &quot;</span> .. user_1[<span class="string">&quot;age&quot;</span>])  <span class="comment">-- user_1 age is 28 其中..是字符串连接</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> <span class="built_in">pairs</span>(user_1) </span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">  <span class="built_in">print</span>(key .. value)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h4 id="函数定义"><a class="header-anchor" href="#函数定义"></a>函数定义</h4>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">contact</span><span class="params">(str1, str2)</span></span></span><br><span class="line">  <span class="keyword">return</span> str1..str2</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(contact(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot; world&quot;</span>))  <span class="comment">--&quot;hello world&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Redis与Lua"><a class="header-anchor" href="#Redis与Lua"></a>Redis与Lua</h3>
<h4 id="在Redis中使用Lua"><a class="header-anchor" href="#在Redis中使用Lua"></a>在Redis中使用Lua</h4>
<ol>
<li>eval <code>eval 脚本内容 key个数 key列表 参数列表</code></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; <span class="built_in">eval</span> <span class="string">&#x27;return &quot;hello &quot; .. KEYS[1] .. ARGV[1]&#x27;</span> 1 redis world</span><br><span class="line"><span class="string">&quot;hello redisworld&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>脚本内容较长时，可以使用<code>redis-cli --eval</code>直接执行文件</li>
</ul>
<ol>
<li>evalsha</li>
</ol>
<ul>
<li>加载脚本</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># redis-cli script load &quot;$(cat lua_get.lua)&quot;</span></span><br><span class="line"><span class="string">&quot;7413dc2440db1fea7c0a0bde841fa68eefaf149c&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>执行脚本  <code>evalsha 脚本SHA1值 key个数 key列表 参数列表</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; evalsha 7413dc2440db1fea7c0a0bde841fa68eefaf149c 1 redis world <span class="string">&quot;hello redisworld&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="Lua的Redis-API"><a class="header-anchor" href="#Lua的Redis-API"></a>Lua的Redis API</h4>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">redis.call(<span class="string">&quot;set&quot;</span>, <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>)</span><br><span class="line">redis.call(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;hello&quot;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>除此之外，还可以使用redis.pcall函数实现对Redis的调用。<code>redis.call</code>如果报错脚本直接返回错误。<code>redis.pcall</code>会忽略错误继续执行。</li>
</ul>
<h3 id="案例"><a class="header-anchor" href="#案例"></a>案例</h3>
<p>Lua的优点：Lua脚本是原子执行的。使用Lua脚本可以定制命令。Lua脚本将多条命令打包，有效减少了网络开销。</p>
<ul>
<li>当前列表记录着热门用户的ID</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange hot:user:list 0 -1 </span><br><span class="line">1) <span class="string">&quot;user:1:ratio&quot;</span></span><br><span class="line">2) <span class="string">&quot;user:8:ratio&quot;</span></span><br><span class="line">3) <span class="string">&quot;user:3:ratio&quot;</span></span><br><span class="line">4) <span class="string">&quot;user:99:ratio&quot;</span> </span><br><span class="line">5) <span class="string">&quot;user:72:ratio&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>user:{id}:ratio代表着用户的热度值，它本身是一个字符串类型的键</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; mget user:1:ratio user:8:ratio user:3:ratio user:99:ratio user:72:ratio</span><br><span class="line">1) <span class="string">&quot;986&quot;</span> </span><br><span class="line">2) <span class="string">&quot;762&quot;</span> </span><br><span class="line">3) <span class="string">&quot;556&quot;</span> </span><br><span class="line">4) <span class="string">&quot;400&quot;</span> </span><br><span class="line">5) <span class="string">&quot;101&quot;</span></span><br></pre></td></tr></table></figure>
<p>现将列表内用户的热度值+1，并且保证是原子执行，可以使用Lua脚本</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">local</span> mylist = redis.call(<span class="string">&quot;lrange&quot;</span>, KEYS[<span class="number">1</span>], <span class="number">0</span>, <span class="number">-1</span>)</span><br><span class="line"><span class="keyword">local</span> count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> index,key <span class="keyword">in</span> <span class="built_in">ipairs</span>(mylist)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  redis.call(<span class="string">&quot;incr&quot;</span>,key)</span><br><span class="line">  count = count + <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> count</span><br></pre></td></tr></table></figure>
<p>将上述脚本写入<code>lrange_and_mincr.lua</code>文件中，并执行如下操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli --<span class="built_in">eval</span> lrange_and_mincr.lua hot:user:list </span><br><span class="line">(<span class="built_in">integer</span>) 5</span><br></pre></td></tr></table></figure>
<h3 id="Redis如何管理Lua"><a class="header-anchor" href="#Redis如何管理Lua"></a>Redis如何管理Lua</h3>
<ol>
<li><code>script load script</code></li>
<li><code>script exists sha1 [sha1 ...]</code></li>
<li><code>script flush</code> 清除已经加载的脚本</li>
<li><code>script kill</code> 停止正在执行的脚本，当脚本进行写操作时，无法通过此命令终止，需要使用<code>shutdown save</code>关闭Redis实例。</li>
</ol>
<h2 id="Bitmaps"><a class="header-anchor" href="#Bitmaps"></a>Bitmaps</h2>
<ul>
<li>Bitmaps不是一种新的数据结构，它就是在字符串的基础上提供了对位的操作。</li>
<li>Bitmaps提供了一套命令，可以将字符串想象成以位为单位的数组，数组的每个元素只能存储0和1</li>
</ul>
<h3 id="命令"><a class="header-anchor" href="#命令"></a>命令</h3>
<ol>
<li>
<p>设置值 <code>setbit key offset value</code></p>
</li>
<li>
<p>获取值 <code>gitbit key offset</code></p>
</li>
<li>
<p>获取Bitmaps指定范围值为1的个数 <code>bitcount [start][end]</code></p>
</li>
<li>
<p>Bitmaps间的操作  <code>bitop op destkey key[key....]</code><br>
bitop是一个复合操作，它可以做多个Bitmaps的and(交集)、or(并 集)、not(非)、xor(异或)操作并将结果保存在destkey中</p>
</li>
<li>
<p>计算Bitmaps中第一个值为targetBit的偏移量 <code>bitpos key targetBit [start] [end]</code></p>
</li>
</ol>
<h3 id="Bitmaps分析"><a class="header-anchor" href="#Bitmaps分析"></a>Bitmaps分析</h3>
<p>Bitmaps在存储较多有效数据时才能发挥节省内存的效果。</p>
<h2 id="HyperLogLog"><a class="header-anchor" href="#HyperLogLog"></a>HyperLogLog</h2>
<p>HyperLogLog<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>不是一种新的数据结构，而是一种基数算法。通过HyperLogLog可以利用极小的空间完成独立总数的统计。HyperLogLog提供了3个命令<code>pfadd</code>、<code>pfcount</code>、<code>pfmerge</code>。</p>
<h3 id="添加"><a class="header-anchor" href="#添加"></a>添加</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pfadd key element [element ...]</span><br></pre></td></tr></table></figure>
<h3 id="计算独立用户数"><a class="header-anchor" href="#计算独立用户数"></a>计算独立用户数</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pfcount key [key ...]</span><br></pre></td></tr></table></figure>
<h3 id="合并"><a class="header-anchor" href="#合并"></a>合并</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pfmerge destkey sourcekey [sourcekey ...]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>结构选型需要确认以下两点：</p>
<ul>
<li>只为了计算独立总数，不需要获取单条数据</li>
<li>可以容忍一定误差率</li>
</ul>
</blockquote>
<h2 id="发布订阅"><a class="header-anchor" href="#发布订阅"></a>发布订阅</h2>
<p>Redis提供了基于“发布/订阅”模式的消息机制，此种模式下，消息发布者和订阅者不进行直接通信，发布者客户端向指定的频道(channel)发布消息，订阅该频道的每个客户端都可以收到该消息</p>
<h3 id="命令-2"><a class="header-anchor" href="#命令-2"></a>命令</h3>
<ol>
<li>发布消息 <code>publish channel message</code></li>
<li>订阅消息 <code>subscribe channel [channel ...]</code></li>
<li>取消订阅 <code>unsubscribe [channel [channel ...]]</code></li>
<li>按照模式订阅或取消订阅</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">psubscribe pattern [pattern...]</span><br><span class="line">punsubscribe [pattern [pattern ...]]</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>查询订阅
<ol>
<li>查看活跃的频道 <code>pubsub channels [pattern]</code></li>
<li>查看频道订阅数 <code>pubsub numsub [channel ...]</code></li>
<li>查看模式订阅数 <code>pubsub numpat</code></li>
</ol>
</li>
</ol>
<h3 id="使用场景"><a class="header-anchor" href="#使用场景"></a>使用场景</h3>
<p>聊天室、公告牌及服务之间利用消息解耦都可以使用发布订阅模式</p>
<h2 id="Geo"><a class="header-anchor" href="#Geo"></a>Geo</h2>
<p>Redis3.2版本提供了GEO(地理信息定位)功能，支持存储地理位置信 息用来实现诸如附近位置、摇一摇这类依赖于地理位置信息的功能，对于需 要实现这些功能的开发者来说是一大福音。GEO功能是Redis的另一位作者 Matt Stancliff<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>借鉴NoSQL数据库Ardb<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>实现的，Ardb的作者来自中国，它提供了优秀的GEO功能。</p>
<h3 id="增加地理位置信息"><a class="header-anchor" href="#增加地理位置信息"></a>增加地理位置信息</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">geoadd key longitude latitude member [longitude latitude member ...]</span><br></pre></td></tr></table></figure>
<ul>
<li>longitude、latitude、member分别是该地理位置的经度、纬度、成员</li>
</ul>
<h3 id="获取地理信息"><a class="header-anchor" href="#获取地理信息"></a>获取地理信息</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">geopos key member [member ...]</span><br></pre></td></tr></table></figure>
<ul>
<li>会返回对应位置的经纬度</li>
</ul>
<h3 id="获取两个地理位置之间的距离"><a class="header-anchor" href="#获取两个地理位置之间的距离"></a>获取两个地理位置之间的距离</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">geodist key member1 member2 [unit]</span><br></pre></td></tr></table></figure>
<ul>
<li>unit:返回结果的单位:m(meters)代表米，km(kilometers)代表公里，mi(miles)代表英里，ft(feet)代表尺</li>
</ul>
<h3 id="获取指定位置范围内的地理信息位置集合"><a class="header-anchor" href="#获取指定位置范围内的地理信息位置集合"></a>获取指定位置范围内的地理信息位置集合</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">georadius key longitude latitude radiusm|km|ft|mi [withcoord] [withdist] [withhash] [COUNT count] [asc|desc] [store key] [storedist key]</span><br><span class="line">georadiusbymember key member radiusm|km|ft|mi [withcoord] [withdist] [withhash] [COUNT count] [asc|desc] [store key] [storedist key]</span><br></pre></td></tr></table></figure>
<ul>
<li>georadius以经纬度为中心，georadiusbymember以成员为中心</li>
<li><strong>withcoord</strong>:返回结果中包含经纬度</li>
<li><strong>withdist</strong>:返回结果中包含距中心店的距离</li>
<li><strong>withhash</strong>:返回结果中包含gethash</li>
<li><strong>COUNT count</strong>:指定返回结果数量</li>
<li><strong>asc|desc</strong>:按照距中心的距离做升序或降序</li>
<li><strong>store key</strong>:将返回结果的地理信息保存到指定键。使用Sorted Set保存(城市)</li>
<li><strong>storedist key</strong>:将返回结果距中心距离保存到指定键</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; georadiusbymember cities:locations beijing 150 km <span class="comment"># 距离北京150km内的城市</span></span><br><span class="line">1) <span class="string">&quot;beijing&quot;</span></span><br><span class="line">2) <span class="string">&quot;tianjin&quot;</span></span><br><span class="line">3) <span class="string">&quot;tangshan&quot;</span></span><br><span class="line">4) <span class="string">&quot;baoding&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="获取-geohash"><a class="header-anchor" href="#获取-geohash"></a>获取 geohash</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">geohash key member [member ...]</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>geohash</strong><sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup> 的数据类型为zset，Redis将所有地理位置信息存放在zset中</li>
<li>字符串越长，精确度越准确</li>
<li>两个字符串越相似，它们之间的距离越近</li>
<li>geohash编码和经纬度可以相互转换</li>
</ul>
<h3 id="删除地理位置"><a class="header-anchor" href="#删除地理位置"></a>删除地理位置</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zrem key member</span><br></pre></td></tr></table></figure>
<ul>
<li>geo没有提供删除位置的命令，但是Geo的底层实现是zset，所以可以借用zrem命令实现对地理位置信息的删除。</li>
</ul>
<h2 id="本章重点回顾"><a class="header-anchor" href="#本章重点回顾"></a>本章重点回顾</h2>
<ul>
<li>慢查询中的两个重要参数<code>slowlog-log-slower-than</code>和<code>slowlog-max-len</code></li>
<li>慢查询不包含命令网络传输和排队时间</li>
<li>有必要将慢查询定期存放</li>
<li>redis-cli的一些重要的选项，例如<code>--latency</code>、<code>–-bigkeys</code>、<code>-i</code>和<code>-r</code>组合</li>
<li>redis-benchmark 的使用方法和重要参数</li>
<li>Pipeline可以有效减少RTT次数，但每次Pipeline的命令数量不能无节制</li>
<li>Redis可以使用Lua脚本创造出原子、高效、自定义命令组合</li>
<li>Redis执行Lua脚本有两种方法:eval和evalsha</li>
<li>Bitmaps可以用来做独立用户统计，有效节省内存</li>
<li>Bitmaps中setbit一个大的偏移量，由于申请大量内存会导致阻塞</li>
<li>HyperLogLog虽然在统计独立总量时存在一定的误差，但是节省的内存量十分惊人</li>
<li>Redis的发布订阅机制相比许多专业的消息队列系统功能较弱，不具备堆积和回溯消息的能力，但胜在足够简单</li>
<li>Redis3.2提供了GEO功能，用来实现基于地理位置信息的应用，但底层实现是zset。</li>
</ul>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>HyperLogLog的算法是由<a href="https://en.wikipedia.org/wiki/Philippe_Flajolet">Philippe Flajolet</a>在 The analysis of a near-optimal cardinality estimation algorithm 这篇论文中提出，读者如果有兴趣 可以自行阅读。 <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p><a href="https://matt.sh/">https://matt.sh/</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p><a href="https://github.com/yinqiwen/ardb">https://github.com/yinqiwen/ardb</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn4" class="footnote-item"><p><a href="https://en.wikipedia.org/wiki/Geohash">https://en.wikipedia.org/wiki/Geohash</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis开发与运维笔记_持久化</title>
    <url>/posts/1023191841.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>Redis支持RDB和AOF两种持久化机制，持久化功能有效地避免因进程退出造成的数据丢失问题，当下次重启时利用之前持久化的文件即可实现数据恢复</p>

</blockquote>
<span id="more"></span>
<p>参考书籍：<a href="https://book.douban.com/subject/26971561/">Redis开发与运维</a></p>
<hr>
<h1>持久化</h1>
<h2 id="RDB"><a class="header-anchor" href="#RDB"></a>RDB</h2>
<p>RDB持久化就是把当前数据生成快照保存到硬盘的过程。</p>
<h3 id="触发机制"><a class="header-anchor" href="#触发机制"></a>触发机制</h3>
<p>手动触发分为<code>save</code>和<code>bgsave</code></p>
<ul>
<li><code>save</code>:阻塞当前Redis服务器，线上不建议使用</li>
<li><code>bgsave</code>:fork创建子进程进行持久化。fork期间会阻塞</li>
</ul>
<p>除执行命令手动触发之外，Redis内部还存在自动触发RDB的持久化机制，例如以下场景：</p>
<ul>
<li>使用<code>save</code>相关配置,如<code>save m n</code>。m秒内数据集存在n此修改，自动触发<code>bgsave</code></li>
<li>主从复制，主节点自动执行<code>bgsave</code>生成RDB文件并发送给从节点</li>
<li>执行<code>debug reload</code>命令重新加载Redis时，会自动触发<code>save</code>操作</li>
<li>默认情况下执行<code>shutdown</code>命令，如果没有开启AOF持久化功能则自动执行<code>bgsave</code></li>
</ul>
<h3 id="流程说明"><a class="header-anchor" href="#流程说明"></a>流程说明</h3>
<img src="/posts/1023191841/bgsave.png" class="" title="bgsave">
<ol>
<li>执行bgsave命令，Redis父进程判断是否存在正在执行的子进程，如RDB/AOF子进程，如果存在bgsave命令直接返回</li>
<li>父进程执行fork操作创建子进程，fork操作过程中父进程会阻塞，通过<code>info stats</code>命令查看<code>lasted_fork_usec</code>选项，可以获取最近一个fork操作的耗时，单位为微妙</li>
<li>父进程fork完成后，<code>bgsave</code>命令返回<code>Background saving started</code>信息并不再阻塞父进程，父进程可以继续响应其他命令。</li>
<li>子进程创建RDB，根据父进程内存生成临时快照文件，完成后对原有文件进行原子替换。执行<code>lastsave</code>命令可以获取最后一次生成RDB的时间，对应info统计的<code>rdb_last_save_time</code>选项。</li>
<li>子进程发送信号给父进程表示完成，父进程更新统计信息，具体见<code>info Persistence</code>下的rbd_*相关选项。</li>
</ol>
<h3 id="RDB文件的处理"><a class="header-anchor" href="#RDB文件的处理"></a>RDB文件的处理</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">config <span class="built_in">set</span> dir &#123;newDir&#125; <span class="comment"># rdb文件保存路径</span></span><br><span class="line">config <span class="built_in">set</span> dbfilename &#123;newFileName&#125; <span class="comment"># rdb文件名</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>遇到坏盘或磁盘写满的情况时，可以通过config set dir {newDir}在线修改文件路径，之后执行bgsave进行磁盘切换，同样适用于AOF持久化文件<br>
Redis默认采用LZF算法对生成的RDB文件做压缩处理。可以通过参数<code>config set rdbcompression &#123;yes|no&#125;</code>动态修改，默认开启。<br>
Redis加载损坏的RDB文件时拒绝启动，并打印如下日志<code># Short read or OOM loading DB. Unrecoverable error, aborting now.</code>，此时可以通过<code>redis-check-dump</code>工具检测RDB文件并获取对应的错误报告</p>
</blockquote>
<h3 id="RDB的优缺点"><a class="header-anchor" href="#RDB的优缺点"></a>RDB的优缺点</h3>
<p>优点：</p>
<ul>
<li>RDB是一个紧凑的二进制文件，代表Redis在某个时间点上的数据快照。非常适合备份、全量复制等场景。比如每6小时备份，并存储到远程机器(或文件系统)，用于灾难恢复</li>
<li>Redis加载RDB恢复数据远远快于AOF的方式</li>
</ul>
<p>缺点：</p>
<ul>
<li>RDB方式数据没办法做到实时持久化。bgsave属于重量级操作，执行成本高</li>
<li>RDB文件格式随着Redis版本升级不断演进，存在兼容性问题。</li>
</ul>
<h2 id="AOF"><a class="header-anchor" href="#AOF"></a>AOF</h2>
<p>AOF(append only file)持久化：以独立日志的方式记录每次写命令，重启时再重新执行AOF文件中的命令达到恢复数据的目的。AOF主要解决的数据持久化的实时性，目前已经是Redis持久化的主流方式。</p>
<h3 id="使用AOF"><a class="header-anchor" href="#使用AOF"></a>使用AOF</h3>
<p>AOF通过<code>appendonl yes</code>开启，默认不开启，AOF文件名通过<code>appendfilename</code>配置进行配置，保存路径同RDB一直，通过<code>dir</code>指定。AOF的工作流程如下：</p>
<img src="/posts/1023191841/AOF%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png" class="" title="AOF工作流程">
<ol>
<li>所有的写入命令会追加到aof_buf(缓冲区)中</li>
<li>AOF缓冲区根据对应的策略向硬盘做同步操作</li>
<li>随着AOF文件越来越大，需要定期对AOF文件进行重写，达到压缩的目的</li>
<li>当Redis服务器重启时，可以加载AOF文件进行数据恢复</li>
</ol>
<h3 id="命令写入"><a class="header-anchor" href="#命令写入"></a>命令写入</h3>
<p>AOF命令写入的内容直接是文本协议格式。例如<code>set hello world</code>这条命令，在AOF缓冲区会追加以下文本<code>*3\r\n$3\r\nset\r\n$5\r\nhello\r\n$5\r\nworld\r\n</code></p>
<ul>
<li>为什么直接采用文本协议格式
<ul>
<li>文本协议具有很好的兼容性</li>
<li>直接采用协议格式，避免二次处理开销</li>
<li>具有可读性，方便直接修改和处理</li>
</ul>
</li>
<li>为什么将命令追加到<code>aof_buf</code>中。Redis使用单线程响应命令，如果每次写AOF文件命令都直接追加到硬盘，那么性能完全取决于当前硬盘负载。先写入缓冲区aof_buf中，就可以使用多种缓冲区同步硬盘的策略，在性能和安全性方面做出平衡。</li>
</ul>
<h3 id="文件同步"><a class="header-anchor" href="#文件同步"></a>文件同步</h3>
<p>Redis提供了多种AOF缓冲区同步文件策略，由参数<code>appendfsync</code>控制。</p>
<table>
<thead>
<tr>
<th>配置值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>always</td>
<td>命令写入aof_buf后调用系统<code>fsync</code>操作同步到aof文件，fsync完成后线程返回</td>
</tr>
<tr>
<td>everysec</td>
<td>命令写入aof_buf后调用系统<code>write</code>操作，完成后线程返回。fsync同步文件操作由专门线程每秒调用一次</td>
</tr>
<tr>
<td>no</td>
<td>命令写入aof_buf后调用系统<code>write</code>操作，不对AOF文件做<code>fsync</code>同步，同步硬盘操作由操作系统负责，通常同步周期最长30秒</td>
</tr>
</tbody>
</table>
<ul>
<li><code>write</code>操作会触发延迟写(delayed write)机制。Linux在内核提供页缓冲区来提高IO性能。write操作写入系统缓冲区后直接返回。同步硬盘操作依赖系统调度机制(固定周期或缓冲区页满)。同步文件之前，若此时系统故障宕机，缓冲区内数据将丢失。</li>
<li><code>fsync</code>针对单个文件操作(AOF文件)。强制硬盘同步，<code>fsync</code>将阻塞直到写入硬盘，保证了数据的持久化</li>
<li>建议配置为<code>everysec</code>，兼顾性能和数据安全性。</li>
</ul>
<h3 id="重写机制"><a class="header-anchor" href="#重写机制"></a>重写机制</h3>
<p>AOF文件重写就是将Redis进程内的数据转化为写命令同步到新AOF文件的过程。</p>
<p>重写后为什么可以变小？</p>
<ul>
<li>进程内已经超时的数据不再写入文件</li>
<li>移除了AOF文件内的无效命令，如<code>del key</code>等，重写使用进程内数据直接生成，新的AOF文件只保留最终数据的写入命令。</li>
<li>多条命令可以合并为一个，如<code>lpush list a,lpush list b,lpush c</code>合并为<code>lpush list a b c</code>。为防止单条命令过大造成客户端缓冲区溢出，对于list、set、zset等类型操作。以64个元素为界拆分为多条。</li>
</ul>
<p>AOF重写过程可以手动触发和自动触发：</p>
<ul>
<li>手动触发： <code>bgrewriteaof</code></li>
<li>自动触发：根据<code>auto-aof-rewrite-min-size</code>和<code>auto-aof-rewrite-percentage</code>参数确定自动触发时机
<ul>
<li><code>auto-aof-rewrite-min-size</code>表示AOF重写时文件的最小体积，默认64MB。</li>
<li><code>auto-aof-rewrite-percentage</code>表示当前AOF文件增量(aof_current_size-aof_base_size)和上一次重写后AOF文件空间(aof_base_size)的比值。</li>
<li>自动触发时机： <code>aof_current_size&gt;auto-aof-rewrite-size &amp;&amp; (aof_current_size-aof_base_size)/aof_base_size &gt;= auto-aof-rewrite-percentage</code></li>
</ul>
</li>
</ul>
<p>AOF重写流程：</p>
<img src="/posts/1023191841/AOF%E9%87%8D%E5%86%99%E6%B5%81%E7%A8%8B.png" class="" title="AOF重写流程">
<ol>
<li>
<p>如果当前进程正在执行AOF重写，请求不执行并返回如下响应<br>
<code>ERR Background append only file rewriting already in progress</code>。如果当前进程正在执行<code>bgsave</code>操作，重写命令延迟到<code>bgsave</code>完成之后在执行，返回如下响应:<code>Background append only file rewriting scheduled</code></p>
</li>
<li>
<p>父进程执行fork创建子进程，开销等同于<code>bgsave</code>过程</p>
</li>
<li>
<p>3.1）主进程fork完成后，继续响应其他命令，所有修改命令依然写入AOF缓冲区并根据<code>appendfsync</code>策略同步到硬盘，保证旧AOF机制正确性；fork运用写时复制技术，子进程只能共享fork操作时的内存数据，3.2）此时父进程依然响应命令，Redis使用&quot;AOF重写缓冲区“保存这部分新数据。防止新AOF文件生成期间丢失这部分数据</p>
</li>
<li>
<p>子进程根据内存快照，按照命令合并规则写入到新的AOF文件。每次批量写入硬盘数据量由配置<code>aof-rewirte-incremental-fsync</code>控制。默认为32MB，防止单次刷盘数据过多造成硬盘阻塞。</p>
</li>
<li>
<p>5.1）新AOF文件写入完成后，子进程发信号给父进程。父进程更新统计信息，具体见<code>info persistence</code>下的aof_*相关统计。5.2）父进程把AOF重写缓冲拿过去的数据写入到AOF文件。5.3）使用新AOF文件替换老文件，完成AOF重写。</p>
</li>
</ol>
<h3 id="重启加载"><a class="header-anchor" href="#重启加载"></a>重启加载</h3>
<p>优先加载AOF文件。AOF/RDB文件加载成功后，Redis启动成功，加载失败时，打印错误信息。</p>
<h3 id="文件校验"><a class="header-anchor" href="#文件校验"></a>文件校验</h3>
<p>加载损坏的AOF文件时会拒绝启动，并打印如下日志:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Bad file format reading the append only file: make a backup of your AOF file, then use ./redis-check-aof --fix &lt;filename&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>对于错误格式的AOF文件，先进行备份，然后采用<code>redis-check-aof --fix</code>命令修复，然后通过diff对比，找出丢失的数据，进而人工修改补全。</li>
</ul>
<blockquote>
<p>Redis实例所在服务器突然断电导致AOF文件结尾不完整，Redis提供<code>aof-load-truncated</code>配置来兼容这种情况，默认开启。加载AOF时，遇到此问题会忽略并继续启动。同时打印警告日志。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !!! Warning: short read while loading the AOF file !!!</span></span><br><span class="line"><span class="comment"># !!! Truncating the AOF at offset 397856725 !!!</span></span><br><span class="line"><span class="comment"># AOF loaded anyway because aof-load-truncated is enabled</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="问题定位与优化"><a class="header-anchor" href="#问题定位与优化"></a>问题定位与优化</h2>
<h3 id="fork操作"><a class="header-anchor" href="#fork操作"></a>fork操作</h3>
<p>fork操作耗时，通过<code>info stats</code>统计中查看<code>lasted_fork_usec</code>获取最近一次fork操作耗时(微妙)</p>
<p>改善fork操作的耗时：</p>
<ol>
<li>有限使用物理机或者高效支持fork操作的虚拟化技术</li>
<li>控制Redis实例最大可用内存，fork耗时和内存量成正比。线上建议10GB以内</li>
<li>合理配置Linux内存分配策略，避免物理内存不足导致fork失败</li>
<li>降低fork操作的频率，比如适度放宽AOF自动触发时机，避免不必要的全量复制等</li>
</ol>
<h3 id="子进程开销监控和优化"><a class="header-anchor" href="#子进程开销监控和优化"></a>子进程开销监控和优化</h3>
<p>子进程负责AOF或者RDB文件的重写，它的运行过程主要涉及CPU、内存、硬盘三部分的消耗。</p>
<h4 id="CPU"><a class="header-anchor" href="#CPU"></a>CPU</h4>
<ul>
<li>CPU开销分析。子进程负责把进程内的数据分批写入文件，这个过程属于CPU密集操作，通常子进程对单核CPU利用率接近90%</li>
<li>CPU消耗优化。Redis是CPU密集型服务，不要做绑定单核CPU操作。避免子进程和父进程竞争单核资源。避免和其他CPU密集型服务部署在一起。多实例部署时，尽量保证同一时刻只有一个子进程执行重写工作。</li>
</ul>
<h4 id="内存"><a class="header-anchor" href="#内存"></a>内存</h4>
<ul>
<li>
<p>内存消耗分析。子进程通过fork操作产生，Linux有写时复制机制(copy on write)。父子进程共享内存页，父进程处理写请求时会把要修改的页创建副本。</p>
</li>
<li>
<p>内存消耗监控。<br>
RDB重写时，Redis日志输出内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">* Background saving started by pid 7692</span><br><span class="line">* DB saved on disk</span><br><span class="line">* RDB: 5 MB of memory used by copy-on-write</span><br><span class="line">* Background saving terminated with success</span><br></pre></td></tr></table></figure>
<ul>
<li>重写过程中如果存在内存修改操作，父进程负责拷贝副本，从日志中看出这部分内存消耗了5MB，可以等价认为RDB重写消耗了5MB的内存。</li>
</ul>
<p>AOF重写时，Redis日志输出内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">* Background append only file rewriting started by pid 8937 </span><br><span class="line">* AOF rewrite child asks to stop sending diffs.</span><br><span class="line">* Parent agreed to stop sending diffs. Finalizing AOF... </span><br><span class="line">* Concatenating 0.00 MB of AOF diff received from parent. </span><br><span class="line">* SYNC append only file rewrite performed</span><br><span class="line">* AOF rewrite: 53 MB of memory used by copy-on-write</span><br><span class="line">* Background AOF rewrite terminated with success</span><br><span class="line">* Residual parent diff successfully flushed to the rewritten AOF (1.49 MB) </span><br><span class="line">* Background AOF rewrite finished successfully</span><br></pre></td></tr></table></figure>
<ul>
<li>父进程维护页副本消耗同RDB重写过程类似，不同之处在于AOF重写需要AOF重写缓冲区。根据以上日志预估内存消耗为:53MB+1.49MB。</li>
</ul>
</li>
</ul>
<h4 id="硬盘"><a class="header-anchor" href="#硬盘"></a>硬盘</h4>
<ul>
<li>硬盘开销分析。持久化文件造成的硬盘开销。结合系统工具如sar,iostat,iotop等工具，可以分析出硬盘负载情况</li>
<li>硬盘开销优化
<ul>
<li>避免和其他高硬盘负载服务部署在一起。如：存储服务、消息队列服务</li>
<li>AOF重写时会消耗大量硬盘IO，可以开启配置<code>no-appendfsync-on-rewrite</code>，默认关闭。表示在AOF期间不做fsync操作</li>
<li>当开启AOF功能的Redis用于高流量写入场景时，普通机械磁盘，写入吞吐量在100MB/s左右，此时Redis实例的瓶颈主要在AOF同步硬盘上</li>
<li>对于单机配置多个Redis实例的情况，可以配置不同实例分盘存储AOF文件，分摊硬盘写入压力。</li>
</ul>
</li>
</ul>
<blockquote>
<p>配置<code>no-appendfsync-on-write=yes</code>时，极端情况下可能丢失整个AOF重写期间的数据，需要根据数据安全性决定是否配置。</p>
</blockquote>
<h3 id="AOF追加阻塞"><a class="header-anchor" href="#AOF追加阻塞"></a>AOF追加阻塞</h3>
<p>AOF持久化常用的同步硬盘策略是<code>everysec</code>，用于平衡性能和数据安全性。对于这种方式，Redis使用另一条线程每秒执行<code>fsync</code>同步硬盘。当系统硬盘资源繁忙时，会造成Redis主线程阻塞。如下图所示</p>
<img src="/posts/1023191841/everysec%E7%AD%96%E7%95%A5.png" class="" title="everysec策略">
<p>阻塞流程分析：</p>
<ol>
<li>主线程负责写入AOF缓冲区</li>
<li>AOF线程每秒执行一次同步磁盘操作，并记录最近一次同步时间</li>
<li>主线程负责对比上次AOF同步时间：
<ul>
<li>如果上次同步成功时间在2秒内，主线程直接返回</li>
<li>如果超过2秒，主线程将阻塞，知道同步操作完成</li>
</ul>
</li>
</ol>
<p>通过对AOF阻塞流程的分析可以发现:</p>
<ol>
<li>everysec配置最多可能丢失2秒数据，不是1秒</li>
<li>如果系统fsync缓慢，将会导致Redis主线程阻塞影响效率</li>
</ol>
<p>AOF阻塞问题定位：</p>
<ol>
<li>发生AOF阻塞时，日志如下</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Asynchronous AOF fsync is taking too long (disk is busy). Writing the AOF buffer without waiting <span class="keyword">for</span> fsync to complete, this may slow down Redis</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>每当发生AOF追加阻塞事件时，在<code>info Persistence</code>统计中，<code>aof_delayed_fsync</code>指标会累加，查看指标方便定位AOF阻塞问题</li>
<li>AOF同步最多允许2秒的延迟，可以使用iotop，定位消耗硬盘IO资源的进程。</li>
</ol>
<h2 id="多实例部署"><a class="header-anchor" href="#多实例部署"></a>多实例部署</h2>
<p>Redis单线程架构无法充分利用COU多核特性，通常做法是在一台机器上部署多个Redis实例。当开启AOF后，彼此之间会产生对CPU和IO的竞争。</p>
<p>我们可以通过<code>info Persistence</code>监控子进程运行状况。通过外部定时器方式轮询检查各个实例是否需要进行持久化。</p>
<h2 id="本章重点回顾"><a class="header-anchor" href="#本章重点回顾"></a>本章重点回顾</h2>
<ol>
<li>Redis提供了两种持久化方式：RDB和AOF</li>
<li>RDB使用一次性生成内存快照的方式，产生的文件紧凑压缩比更高，因此读取RDB恢复速度更快。由于每次生成RDB开销较大，无法做到实时持久化，一般用于数据冷备和复制传输</li>
<li>save命令会阻塞主线程，不建议使用。<code>bgsave</code>命令通过fork操作创建子进程生成RDB避免阻塞</li>
<li>AOF通过追加写命令到文件实现持久化，通过<code>appendfsync</code>参数可以控制实时/秒级持久化</li>
<li>AOF可以通过<code>auto-aof-rewrite-min-size</code>和<code>auto-aof-rewrite-percentage</code>参数控制自动触发，也可以使用<code>bgwriteaof</code>命令手动触发</li>
<li>子进程执行期间使用<code>copy-on-write</code>机制与父进程共享内存，避免内存消耗翻倍。AOF重写期间还需要维护重写缓冲区，保存新的写入命令避免数据丢失</li>
<li>持久化阻塞主线程场景有:fork阻塞和AOF追加阻塞。fork阻塞时间跟内存量和系统有关，AOF追加阻塞说明硬盘资源紧张</li>
<li>单机下部署多个实例时，为了防止出现多个子进程执行重写操作，建议做隔离控制，避免CPU和I/O资源竞争</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis开发与运维笔记-理解内存</title>
    <url>/posts/1495994843.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>Redis所有的数据都存在内存中，高效利用Redis内存首先需要理解Redis内存消耗在哪里，如何管理内存，最后才能考虑如何优化内存。</p>

</blockquote>
<span id="more"></span>
<blockquote>
<p>参考书籍：<a href="https://book.douban.com/subject/26971561/">Redis开发与运维</a></p>
</blockquote>
<hr>
<h1>理解内存</h1>
<h2 id="内存消耗"><a class="header-anchor" href="#内存消耗"></a>内存消耗</h2>
<h3 id="内存使用统计"><a class="header-anchor" href="#内存使用统计"></a>内存使用统计</h3>
<p><code>info memory</code></p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>属性说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>used_memory</td>
<td>Redis分配器分配的内存总量，也就是内部存储的所有数据的内存占用量</td>
</tr>
<tr>
<td>used_memory_human</td>
<td>以可读的格式返回used_memory</td>
</tr>
<tr>
<td>used_memory_rss</td>
<td>从操作系统的角度显示Redis进程占用的物理内存总量</td>
</tr>
<tr>
<td>used_memory_peak</td>
<td>内存使用的最大值，表示used_memory的峰值</td>
</tr>
<tr>
<td>used_memory_peak_human</td>
<td>以可读的格式返回used_memory_peak</td>
</tr>
<tr>
<td>used_memory_lua</td>
<td>Lua引擎所消耗的内存大小</td>
</tr>
<tr>
<td>mem_fragmentation_retio</td>
<td>used_memory_rss/used_memory比值，表示内存碎片率</td>
</tr>
<tr>
<td>mem_allocator</td>
<td>Redis所使用的内存分配器。默认为jemalloc</td>
</tr>
</tbody>
</table>
<p>重点关注的指标：<code>used_memory_rss</code>、<code>used_memory</code>以及<code>mem_fragmentation_ratio</code></p>
<p>mem_fragmentation&gt;1，说明存在内存碎片。&lt;1时说明操作系统Reids内存交换(Swap)到硬盘。</p>
<h3 id="内存消耗划分"><a class="header-anchor" href="#内存消耗划分"></a>内存消耗划分</h3>
<p>Redis进程内消耗主要包括：自身内存+对象内存+缓存内存+内存碎片。</p>
<ul>
<li>
<p>对象内存<br>
是Redis内存占用最大的一块，存储着用户所有的数据。</p>
</li>
<li>
<p>缓存内存</p>
<ul>
<li>客户端缓冲：接入到服务器TCP了解的输入输出缓冲。输入缓冲无法控制，最大为1G。输出缓冲通过<code>client-output-buffer-limit</code>控制。普通客户端要注意控制数量，从客户端不要挂载过多，订阅客户端要注意生产及消费消息的速度</li>
<li>复制积压缓冲区：用于实现部分复制功能，Redis提供的一个缓冲区，建议在合理范围内调大，可以有效避免全量复制</li>
<li>AOF缓冲区：这部分空间用于在Redis重写期间保存最近的写入命令。</li>
</ul>
</li>
<li>
<p>内存碎片<br>
容易出现高内存碎片的场景：</p>
<ol>
<li>频繁做更新操作，例如频繁对已存在的键执行<code>append、setrange</code>等更新操作</li>
<li>大量过期键删除，键对象过期删除后，释放的空间无法得到充分利用，导致碎片率上升。</li>
<li>解决以上问题的方法：1）尽量做到数据对齐，2）安全重启</li>
</ol>
</li>
</ul>
<h3 id="子进程内存消耗"><a class="header-anchor" href="#子进程内存消耗"></a>子进程内存消耗</h3>
<p>主要发生在AOF/RDB重写时Redis创建的子进程内存消耗。总结如下：</p>
<ol>
<li>Redis产生的子进程因为写时复制技术，并不需要消耗1倍的父进程内存。预留足够内存防止溢出即可</li>
<li>需要设置<code>sysctl vm.overcommit_memory=1</code>允许内核可以分配所有物理内存，防止Redis进程执行fork时因系统剩余内存不足而失败</li>
<li>排查当前系统是否支持并开启THP，如果开启建议关闭，防止copy-on-write期间内存过度消耗</li>
</ol>
<h2 id="内存管理"><a class="header-anchor" href="#内存管理"></a>内存管理</h2>
<ol>
<li>通过<code>maxmemory</code>设置Redis最大内存，需要注意的是由于碎片率的存在，实际消耗的内存可能会比<code>maxmemory</code>设置的更大</li>
<li>通过<code>config set maxmemory 2GB</code>可以动态调整内存上限</li>
<li>内存回收策略
<ul>
<li>过期键删除策略：惰性删除和定时任务删除</li>
<li>内存溢出控制策略，通过<code>maxmemory-policy</code>参数控制
<ul>
<li><code>noeviction</code>:默认策略，不删除数据。拒绝所有写入操作并返回客户端错误信息<code>(error)OOM command not allowed when used memory</code>，此时Redis只响应读操作</li>
<li><code>vloatile-lru</code>：根据LRU算法删除设置了超时的键，直到腾出足够空间。如果没有可删除的键，回退到<code>noeviction</code></li>
<li><code>allkeys-lru</code>：根据LRU算法删除键。直到腾出足够空间</li>
<li><code>allkeys-random</code>：随机删除所有键，直到腾出足够空间</li>
<li><code>volatile-ttl</code>：根据键值对象的ttl，删除最近要过期的数据，如果没有，回退到noeviction策略</li>
<li>设置了<code>maxmemory</code>时，当<code>used_memory&gt;maxmemory</code>的状态下，会触发回收内存操作。应设置足够大的<code>maxmemory</code>避免长期处于这种状态下。</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="内存优化"><a class="header-anchor" href="#内存优化"></a>内存优化</h2>
<h3 id="redisObject对象"><a class="header-anchor" href="#redisObject对象"></a>redisObject对象</h3>
<blockquote>
<p>Redis存储的所有值对象在内部定义为redisObject结构体，内部结构如图：</p>
</blockquote>
<img src="/posts/1495994843/redisObject.png" class="" title="redisObject">
<ul>
<li>type:当前对象数据类型。可以使用<code>type &#123;key&#125;</code>查看对象所属类型</li>
<li>encoding:redis内部编码类型</li>
<li>lru:对象最后一次被访问的时间。可以使用<code>object idletime &#123;key&#125;</code>在不更新lru字段情况下查看键的空闲时间</li>
<li>refcount:记录对象被引用次数</li>
<li>*ptr:整数直接存储数据，否则为指向数据的指针</li>
</ul>
<h3 id="缩减键值对象"><a class="header-anchor" href="#缩减键值对象"></a>缩减键值对象</h3>
<blockquote>
<p>在保证业务的前提下，缩减键<code>key</code>和值<code>value</code>的长度。</p>
</blockquote>
<h3 id="共享对象池"><a class="header-anchor" href="#共享对象池"></a>共享对象池</h3>
<p>Redis内部维护[0-9999]的整数对象池。优先使用整型数字有助于节省内存开销。需要注意的是对象池与<code>maxmemory</code>和<code>LRU</code>淘汰算法冲突。</p>
<h3 id="字符串优化"><a class="header-anchor" href="#字符串优化"></a>字符串优化</h3>
<h4 id="字符串结构"><a class="header-anchor" href="#字符串结构"></a>字符串结构</h4>
<blockquote>
<p>Redis实现了自己的字符串结构，内部简单动态字符串(simple dynamic string,SDS).结构如图：</p>
</blockquote>
<img src="/posts/1495994843/sds.png" class="" title="sds">
<p>Redis字符串结构的特点：</p>
<ol>
<li>字符串长度，已用长度，未用长度的操作复杂度为O(1)</li>
<li>可用于保存字节数组，支持安全的二进制数据存储</li>
<li>预分配机制，降低内存再分配次数</li>
<li>惰性删除机制，字符串缩减后的空间不释放，作为预分配空间保留</li>
</ol>
<h4 id="预分配机制"><a class="header-anchor" href="#预分配机制"></a>预分配机制</h4>
<ol>
<li>第一次创建len属性等于数据实际大小，free等于0，不做预分配</li>
<li>修改后如果free空间不够且数据小于1M，每次预分配一倍的容量</li>
<li>修改后如果free空间不够且数据大于1M，每次预分配1MB的容量</li>
</ol>
<h4 id="字符串重构"><a class="header-anchor" href="#字符串重构"></a>字符串重构</h4>
<blockquote>
<p>JSON数据不一定要用string来存储，可以改为通过hash结构实现，同时使用hash结构也可以使用hmget、hmset命令支持字段的部分读取修改，而不用每次全部读取。</p>
</blockquote>
<h3 id="编码优化"><a class="header-anchor" href="#编码优化"></a>编码优化</h3>
<blockquote>
<p>主要是根据业务场景，选择合适的参数保证Redis使用合适的内部编码进而在性能和内存上进行取舍。</p>
</blockquote>
<h3 id="控制键的数量"><a class="header-anchor" href="#控制键的数量"></a>控制键的数量</h3>
<blockquote>
<p>客户端可以预估键的数量规模，把大量键映射到多个hash结构中降低键的数量</p>
</blockquote>
<ul>
<li>hash的field可以记录原始key字符串，方便哈希查找</li>
<li>hash的value保存原始值对象，确保不要超过<code>hash-max-ziplist-value</code>限制</li>
</ul>
<h2 id="本章重点回顾"><a class="header-anchor" href="#本章重点回顾"></a>本章重点回顾</h2>
<ol>
<li>Redis实际内存消耗主要包括：键值对象、缓冲区碎片、内存碎片</li>
<li>通过<code>maxmemory</code>控制Redis最大可用内存。内存溢出时，根据<code>maxmemory-policy</code>控制内存回收策略</li>
<li>内存资源宝贵，可以通过以下手段优化内存使用:
<ol>
<li>精简键值对大小，使用高效二进制序列化工具</li>
<li>使用对象共享池优化小整数对象</li>
<li>数据优先使用整数</li>
<li>优化字符串的使用，避免预分配造成的内存浪费</li>
<li>使用ziplist压缩编码优化hash、list等结构，注重效率和空间的平衡</li>
<li>使用intset编码优化整数集合</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis开发与运维笔记-缓存设计</title>
    <url>/posts/3358854259.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>缓存能够有效地加速应用的读写速度，同时也可以降低后端负载，对日常应用的开发至关重要。但是将缓存加入应用架构后也会带来一些问题，本 章将针对这些问题介绍缓存使用技巧和设计方案</p>

</blockquote>
<span id="more"></span>
<h1>缓存设计</h1>
<h2 id="缓存的收益与成本"><a class="header-anchor" href="#缓存的收益与成本"></a>缓存的收益与成本</h2>
<p>缓存收益：</p>
<ul>
<li>加速读写</li>
<li>降低后端负载</li>
</ul>
<p>缓存成本：</p>
<ul>
<li>数据不一致</li>
<li>代码维护成本</li>
<li>维护成本</li>
</ul>
<h2 id="缓存更新策略"><a class="header-anchor" href="#缓存更新策略"></a>缓存更新策略</h2>
<h3 id="LRU-LFU-FIFO算法剔除"><a class="header-anchor" href="#LRU-LFU-FIFO算法剔除"></a>LRU/LFU/FIFO算法剔除</h3>
<p>清理数据由算法决定，一致性无法得到保障。算法无需开发人员实现，根据业务场景选择合适算法即可。</p>
<h3 id="超时剔除"><a class="header-anchor" href="#超时剔除"></a>超时剔除</h3>
<p>通过给键设置过期时间，过期期间内数据可能存在数据不一致问题。</p>
<h3 id="主动更新"><a class="header-anchor" href="#主动更新"></a>主动更新</h3>
<p>对数据一致性要求高，需要在真实数据更新后通过消息或其他方式通知立即更新缓存。一致性最高，但如果主动更新发生了问题，那么这条数据很可能很长时间不会更新，所以建议结合超时剔除一起使用效果会更好。维护成本会比较高，开发者需要自己来完成更新，并保证更新操作的正确性。</p>
<table>
<thead>
<tr>
<th>策略</th>
<th>一致性</th>
<th>维护成本</th>
</tr>
</thead>
<tbody>
<tr>
<td>LRU/LFU/FIFO算法剔除</td>
<td>最差</td>
<td>低</td>
</tr>
<tr>
<td>超时剔除</td>
<td>较差</td>
<td>较低</td>
</tr>
<tr>
<td>主动更新</td>
<td>强</td>
<td>高</td>
</tr>
</tbody>
</table>
<h3 id="最佳实践"><a class="header-anchor" href="#最佳实践"></a>最佳实践</h3>
<ul>
<li>低一致性业务建议配置最大内存和淘汰策略的方式使用</li>
<li>高一致性业务可以结合使用超时剔除和主动更新，这样即使主动更新出了问题，也能保证数据过期时间后删除脏数据</li>
</ul>
<h2 id="缓存粒度控制"><a class="header-anchor" href="#缓存粒度控制"></a>缓存粒度控制</h2>
<p>缓存粒度需要在空间以及时间上进行取舍，决定时需要综合数据通用性、空间占用比、代码维护性三点进行取舍</p>
<h2 id="穿透优化"><a class="header-anchor" href="#穿透优化"></a>穿透优化</h2>
<p>缓存穿透是指查询一个根本不存在的数据，缓存层和存储层都不会命中，通常出于容错的考虑，如果从存储层查不到数据则不写入缓存层。</p>
<h3 id="缓存空对象"><a class="header-anchor" href="#缓存空对象"></a>缓存空对象</h3>
<p>存储层不命中时，仍然将空对象保存到缓存层。这样下次查询会命中缓存层。这样解决会导致以下两个问题：</p>
<ul>
<li>
<p>空值进行缓存，浪费了内存</p>
<p>通常要设置一个较短的过期时间，过期后剔除缓存。</p>
</li>
<li>
<p>数据不一致，过期时间内，当前缓存与储存层存在数据不一致现象</p>
<p>存储层修改时，主动更新缓存层数据。</p>
</li>
</ul>
<h3 id="布隆过滤器"><a class="header-anchor" href="#布隆过滤器"></a>布隆过滤器</h3>
<p>有关布隆过滤器的相关知识，可以参考：<a href="https://en.wikipedia.org/wiki/Bloom_filter%E5%8F%AF%E4%BB%A5%E5%88%A9%E7%94%A8Redis%E7%9A%84Bitmaps%E5%AE%9E%E7%8E%B0%E5%B8%83">https://en.wikipedia.org/wiki/Bloom_filter可以利用Redis的Bitmaps实现布</a> 隆过滤器，GitHub上已经开源了类似的方案，读者可以进行参 考：<a href="https://github.com/erikdubbelboer/redis-lua-scaling-bloom-filter%E3%80%82">https://github.com/erikdubbelboer/redis-lua-scaling-bloom-filter。</a></p>
<blockquote>
<p>这种方法适用于数据命中不高、数据相对固定、实时性低（通常是数据集较大）的应用场景，代码维护较为复杂，但是缓存空间占用少</p>
</blockquote>
<h2 id="无底洞优化"><a class="header-anchor" href="#无底洞优化"></a>无底洞优化</h2>
<p>分布式服务节点过多时，数据分布到的节点数更多，一次批量操作的数据可能分布在n个节点上，操作的时间为<code>n*网络+n*命令</code>，常见的优化思路如下：</p>
<h3 id="串行命令"><a class="header-anchor" href="#串行命令"></a>串行命令</h3>
<p>执行n次get命令，Jedis客户端示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;String&gt; <span class="title">serialMGet</span><span class="params">(List&lt;String&gt; keys)</span> </span>&#123; </span><br><span class="line">    <span class="comment">// 结果集 </span></span><br><span class="line">    List&lt;String&gt; values = <span class="keyword">new</span> ArrayList&lt;String&gt;(); </span><br><span class="line">    <span class="comment">// n次串行get </span></span><br><span class="line">    <span class="keyword">for</span> (String key : keys) </span><br><span class="line">    &#123; </span><br><span class="line">        String value = jedisCluster.get(key); </span><br><span class="line">        values.add(value);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> values;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="串行IO"><a class="header-anchor" href="#串行IO"></a>串行IO</h3>
<p>使用Smart客户端，将映射到相同槽（节点）的key合并为一个集合，之后对每个节点执行mget或pipeline命令。它的操作时间=node次网络时间+n次命令时间，如果节点数过多，还是存在性能问题。Jedis客户端示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Map&lt;String, String&gt; <span class="title">serialIOMget</span><span class="params">(List&lt;String&gt; keys)</span> </span>&#123; </span><br><span class="line">    <span class="comment">// 结果集 </span></span><br><span class="line">    Map&lt;String, String&gt; keyValueMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;(); </span><br><span class="line">    <span class="comment">// 属于各个节点的key列表,JedisPool要提供基于ip和port的hashcode方法 </span></span><br><span class="line">    Map&lt;JedisPool, List&lt;String&gt;&gt; nodeKeyListMap = <span class="keyword">new</span> HashMap&lt;JedisPool, List&lt;String&gt;&gt;(); </span><br><span class="line">    <span class="comment">// 遍历所有的key</span></span><br><span class="line">    <span class="keyword">for</span> (String key : keys) &#123; </span><br><span class="line">        <span class="comment">// 使用CRC16本地计算每个key的slot </span></span><br><span class="line">        <span class="keyword">int</span> slot = JedisClusterCRC16.getSlot(key); </span><br><span class="line">        <span class="comment">// 通过jedisCluster本地slot-&gt;node映射获取slot对应的node </span></span><br><span class="line">        JedisPool jedisPool = jedisCluster.getConnectionHandler().getJedisPoolFromSlot(slot);</span><br><span class="line">        <span class="comment">// 归档 </span></span><br><span class="line">        <span class="keyword">if</span> (nodeKeyListMap.containsKey(jedisPool)) &#123; </span><br><span class="line">            nodeKeyListMap.get(jedisPool).add(key);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;(); </span><br><span class="line">            list.add(key); </span><br><span class="line">            nodeKeyListMap.put(jedisPool, list);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">// 从每个节点上批量获取，这里使用mget也可以使用pipeline </span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;JedisPool, List&lt;String&gt;&gt; entry : nodeKeyListMap.entrySet()) &#123;</span><br><span class="line">        JedisPool jedisPool = entry.getKey(); </span><br><span class="line">        List&lt;String&gt; nodeKeyList = entry.getValue(); </span><br><span class="line">        <span class="comment">// 列表变为数组 </span></span><br><span class="line">        String[] nodeKeyArray = nodeKeyList.toArray(<span class="keyword">new</span> String[nodeKeyList.size()]); </span><br><span class="line">        <span class="comment">// 批量获取，可以使用mget或者Pipeline </span></span><br><span class="line">        List&lt;String&gt; nodeValueList = jedisPool.getResource().mget(nodeKeyArray); </span><br><span class="line">        <span class="comment">// 归档 </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nodeKeyList.size(); i++) &#123; </span><br><span class="line">            keyValueMap.put(nodeKeyList.get(i), nodeValueList.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> keyValueMap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="并行IO"><a class="header-anchor" href="#并行IO"></a>并行IO</h3>
<p>将方案2中的改为多线程执行。由于改为多线程，网络时间变为O(1)，这种方案会增加编程的复杂度。</p>
<h3 id="hash-tag"><a class="header-anchor" href="#hash-tag"></a>hash_tag</h3>
<p>hash_tag可以将多个key强制分配到同一个槽(节点)上，它的操作时间=1次网络时间+n次命令时间</p>
<h3 id="四种方案对比"><a class="header-anchor" href="#四种方案对比"></a>四种方案对比</h3>
<table>
<thead>
<tr>
<th>方案</th>
<th>优点</th>
<th>缺点</th>
<th>网络IO</th>
</tr>
</thead>
<tbody>
<tr>
<td>串行命令</td>
<td>1）编程简单<br/>2）如果少量keys，性能可以满足要求</td>
<td>大量keys请求延迟严重</td>
<td>O(keys)</td>
</tr>
<tr>
<td>串行IO</td>
<td>1）编程简单<br/>2）少量节点，性能满足要求</td>
<td>大量node延迟严重</td>
<td>O(nodes)</td>
</tr>
<tr>
<td>并行IO</td>
<td>利用并行特性，延迟取决于最慢的节点</td>
<td>1）编程复杂<br/>2）多线程，定位问题比较难</td>
<td>O(max_slow(nodes))</td>
</tr>
<tr>
<td>hash_tag</td>
<td>性能最高</td>
<td>1）业务维护成本较高<br/>2）容易出现数据倾斜</td>
<td>O(1)</td>
</tr>
</tbody>
</table>
<h2 id="雪崩优化"><a class="header-anchor" href="#雪崩优化"></a>雪崩优化</h2>
<p>缓存层由于某些原因不能提供服务或大量键同时过期，导致大量的请求发送到存储层，造成级联宕机的情况。</p>
<h3 id="保证缓存层高可用"><a class="header-anchor" href="#保证缓存层高可用"></a>保证缓存层高可用</h3>
<p>使用<code>Redis Sentinel</code> 或 <code>Redis Cluster</code>架构增强可用性</p>
<h3 id="使用隔离组件为后端限流并降级"><a class="header-anchor" href="#使用隔离组件为后端限流并降级"></a>使用隔离组件为后端限流并降级</h3>
<p>对重要资源进行隔离，让每种资源都运行在各自的线程池中，避免因个别服务出现问题导致的全体服务不可用。这部分可以查看<a href="https://github.com/netflix/hystrix">Hystrix</a>，注意的是Hystrix只适用于Java。</p>
<h3 id="提前演练"><a class="header-anchor" href="#提前演练"></a>提前演练</h3>
<p>上线前对各种情况进行演练，包括但不限于，数据库宕机，缓存不可用，大量并发涌入系统等。</p>
<h2 id="热点key重建优化"><a class="header-anchor" href="#热点key重建优化"></a>热点key重建优化</h2>
<p>当一个热点key的并发量非常大，并且更新缓存不能在短时间内完成时，缓存失效到重建期间，大量请求的话，会导致大量线程重建缓存，增加后端负载。要解决这个问题可以减少重建缓存的次数。</p>
<h3 id="互斥锁"><a class="header-anchor" href="#互斥锁"></a>互斥锁</h3>
<p>只允许一个线程重建缓存，其他线程等待重建缓存的线程执行完，从缓存中获取数据即可。使用redis的setnx实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">String <span class="title">get</span><span class="params">(String key)</span> </span>&#123; </span><br><span class="line">    <span class="comment">// 从Redis中获取数据 </span></span><br><span class="line">    String value = redis.get(key); </span><br><span class="line">    <span class="comment">// 如果value为空，则开始重构缓存 </span></span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123; </span><br><span class="line">        <span class="comment">// 只允许一个线程重构缓存，使用nx，并设置过期时间ex </span></span><br><span class="line">        String mutexKey = <span class="string">&quot;mutext:key:&quot;</span> + key; </span><br><span class="line">        <span class="keyword">if</span> (redis.set(mutexKey, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;ex 180&quot;</span>, <span class="string">&quot;nx&quot;</span>)) &#123; </span><br><span class="line">            <span class="comment">// 从数据源获取数据 </span></span><br><span class="line">            value = db.get(key); </span><br><span class="line">            <span class="comment">// 回写Redis，并设置过期时间 </span></span><br><span class="line">            redis.setex(key, timeout, value); </span><br><span class="line">            <span class="comment">// 删除key_mutex </span></span><br><span class="line">            redis.delete(mutexKey);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">// 其他线程休息50毫秒后重试 </span></span><br><span class="line">        <span class="keyword">else</span> &#123; </span><br><span class="line">            Thread.sleep(<span class="number">50</span>); </span><br><span class="line">            get(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="永远不过期"><a class="header-anchor" href="#永远不过期"></a>永远不过期</h3>
<p>缓存中不设置过期时间，过期时间由业务系统来维护。业务系统发现缓存过期后，通过单独的线程去重建缓存。此种方法在重建缓存期间会存在数据不一致情况。</p>
<h2 id="本章重点回顾"><a class="header-anchor" href="#本章重点回顾"></a>本章重点回顾</h2>
<ol>
<li>缓存的使用带来的收益是能够加速读写，降低后端存储负载。</li>
<li>缓存的使用带来的成本是缓存和存储数据不一致性，代码维护成本增大，架构复杂度增大。</li>
<li>比较推荐的缓存更新策略是结合剔除、超时、主动更新三种方案共同完成。</li>
<li>穿透问题：使用缓存空对象和布隆过滤器来解决，注意它们各自的使用场景和局限性。</li>
<li>无底洞问题：分布式缓存中，有更多的机器不保证有更高的性能。有四种批量操作方式：串行命令、串行IO、并行IO、hash_tag。</li>
<li>雪崩问题：缓存层高可用、客户端降级、提前演练是解决雪崩问题的重要方法。</li>
<li>热点key问题：互斥锁、“永远不过期”能够在一定程度上解决热点key问题，开发人员在使用时要了解它们各自的使用成本。</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis开发与运维笔记-集群</title>
    <url>/posts/ddc0d24d.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>Redis Cluster是Redis的分布式解决方案，在3.0版本正式推出，有效地解决了Redis分布式方面的需求。当遇到单机内存、并发、流量等瓶颈时，可以采用Cluster架构方案达到负载均衡的目的。</p>

</blockquote>
<span id="more"></span>
<blockquote>
<p>参考书籍：<a href="https://book.douban.com/subject/26971561/">Redis开发与运维</a></p>
</blockquote>
<hr>
<h1>集群</h1>
<h2 id="数据分布"><a class="header-anchor" href="#数据分布"></a>数据分布</h2>
<h3 id="Redis数据分布"><a class="header-anchor" href="#Redis数据分布"></a>Redis数据分布</h3>
<p>Redis Cluser采用虚拟槽分区，所有的键根据哈希函数映射到0~16383整数槽内，计算公式：<code>slot=CRC16（key）&amp;16383</code></p>
<p>Redis虚拟槽分区的特点：</p>
<ul>
<li>解耦数据和节点之间的关系，简化了节点扩容和收缩难度。</li>
<li>节点自身维护槽的映射关系，不需要客户端或者代理服务维护槽分区元数据。</li>
<li>支持节点、槽、键之间的映射查询，用于数据路由、在线伸缩等场景</li>
</ul>
<h3 id="Redis分布式集群功能限制"><a class="header-anchor" href="#Redis分布式集群功能限制"></a>Redis分布式集群功能限制</h3>
<ol>
<li>key批量操作支持有限。如mset、mget，目前只支持具有相同slot值的key执行批量操作。对于映射为不同slot值的key由于执行mget、mget等操作可 能存在于多个节点上因此不被支持。</li>
<li>key事务操作支持有限。同理只支持多key在同一节点上的事务操作，当多个key分布在不同的节点上时无法使用事务功能。</li>
<li>key作为数据分区的最小粒度，因此不能将一个大的键值对象如hash、list等映射到不同的节点。</li>
<li>不支持多数据库空间。单机下的Redis可以支持16个数据库，集群模式下只能使用一个数据库空间，即db0。</li>
<li>复制结构只支持一层，从节点只能复制主节点，不支持嵌套树状复制结构</li>
</ol>
<h2 id="节点通信"><a class="header-anchor" href="#节点通信"></a>节点通信</h2>
<p>​	Redis集群采用P2P的Gossip（流言）协议， Gossip协议工作原理就是节点彼此不断通信交换信息，一段时间后所有的节 点都会知道集群完整的信息，这种方式类似流言传播。</p>
<h3 id="Gossip消息"><a class="header-anchor" href="#Gossip消息"></a>Gossip消息</h3>
<p>常用的Goosip消息分为：ping消息、pong消息、meet消息、fail消息等</p>
<ul>
<li>meet消息：用于通知新节点加入</li>
<li>ping消息：每个节点向其他多个节点发送ping消息，消息中含有节点自身及其他部分节点的状态数据。</li>
<li>pong消息：接收到meet、ping消息时作为返回数据，封装自身状态信息。也可以广播pong消息用于通知其他节点更新当前节点状态。</li>
<li>fail消息：当节点判定其他节点下线时，会向集群内广播fail消息，其他节点收到消息后将标记节点设置为下线状态。</li>
</ul>
<h2 id="搭建集群"><a class="header-anchor" href="#搭建集群"></a>搭建集群</h2>
<p>搭建集群需要以下三个步骤：</p>
<ol>
<li>准备节点</li>
<li>节点握手</li>
<li>分配槽</li>
</ol>
<p>搭建集群以及集群伸缩部分可以参考如下文章：</p>
<ul>
<li><a href="./778231993">Redis集群搭建(Redis3.0版)</a></li>
<li><a href="./1044596185">Redis集群搭建(Redis5.0版)</a></li>
</ul>
<h2 id="请求路由"><a class="header-anchor" href="#请求路由"></a>请求路由</h2>
<h3 id="请求重定向"><a class="header-anchor" href="#请求重定向"></a>请求重定向</h3>
<p>​	在集群模式下，Redis接收任何键相关命令时首先计算键对应的槽，再根据槽找出所对应的节点，如果节点是自身，则处理键命令；否则回复 MOVED重定向错误，通知客户端请求正确的节点。这个过程称为MOVED重定向。</p>
<h3 id="hash-tag"><a class="header-anchor" href="#hash-tag"></a>hash_tag</h3>
<p>​	如果键值包含<code>&#123;hash_tag&#125;</code>，计算键值对应的槽时会使用大括号内的内容进行计算，可以利用此特性保持业务相关性强的内容分不到同一个槽内。</p>
<blockquote>
<p>Pipeline同样可以受益于hash_tag，由于Pipeline只能向一个节点批量发送执行命令，而相同slot必然会对应到唯一的节点，降低了集群使用Pipeline的门槛</p>
</blockquote>
<h3 id="Smart客户端"><a class="header-anchor" href="#Smart客户端"></a>Smart客户端</h3>
<p>​	客户端通过缓存槽与节点映射关系来进行命令的执行，当出现Move重定向错误时，向正确的节点发送命令并更新本地缓存。流程如下：</p>
<img src="/posts/ddc0d24d/Smart%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B.png" class="" title="Smart客户端操作流程">
<blockquote>
<p>针对高并发的场景，客户端与Redis实例通信这里是绝对的热点代码。集群协议通过Smart客户端全面高效的支持需要一个过程，因此用户在选择Smart客户端时要重点审核集群交互代码，防止线上踩坑。必要时可以自行优化修改客户端源码。</p>
</blockquote>
<h3 id="ASK重定向"><a class="header-anchor" href="#ASK重定向"></a>ASK重定向</h3>
<p>当一个slot数据从源节点迁移到目标节点时，期间可能出现一部分数据在源节点，而另一部分在目标节点。</p>
<ol>
<li>当集群进行槽迁移时，客户端根据本地缓存发送命令到源节点，如果源节点存在数据则直接返回</li>
<li>如果键对象不存在，可能在目标节点中，节点返回ASK重定向错误，格式为<code>(error)ASK &#123;slot&#125; &#123;targetIP&#125; : &#123;targetPort&#125;</code></li>
<li>客户端提取目标节点信息，发送<code>asking</code>命令打开客户端连接标识，再执行键命令，如果存在则执行，不存在则返回不存在信息。</li>
</ol>
<ul>
<li>ASK和MOVE虽然都返回目标节点，但是意义不同，ASK返回表示当前正在迁移键，不确定何时能完成，客户端此时不需要更新本地缓存。而MOVE重定向表示当前键已经在其他节点，需要更新本地缓存。</li>
</ul>
<blockquote>
<p>集群环境下对于使用批量操作的场景，建议优先使用Pipeline方式，在客户端实现对ASK重定向的正确处理，这样既可以受益于批量操作的IO优化，又可以兼容slot迁移场景。</p>
</blockquote>
<h2 id="故障转移"><a class="header-anchor" href="#故障转移"></a>故障转移</h2>
<h3 id="故障发现"><a class="header-anchor" href="#故障发现"></a>故障发现</h3>
<p>集群内通过ping/pong来进行节点通信，消息可以传播槽信息、主从状态、节点故障等。</p>
<h4 id="主观下线"><a class="header-anchor" href="#主观下线"></a>主观下线</h4>
<p>如果其他节点在<code>cluster-node-timeout</code>时间内没有回复自己发出的ping请求，会将此节点标记为<code>pfail</code>状态。</p>
<h4 id="客观下线"><a class="header-anchor" href="#客观下线"></a>客观下线</h4>
<p>当节点被客观下线后，其状态会随消息在进群内散播。当<code>cluster-node-timeout*2</code>时间内有超过半数的节点认为该节点下线，集群会删除该节点。</p>
<blockquote>
<p>下线的有效期为<code>cluster-node-timeout*2</code>，如果到达时间时没有超过半数节点认为该节点下线，那么故障节点将不会下线导致故障转移失败。应根据实际情况适当调大<code>cluster-node-timeout</code>配置。</p>
</blockquote>
<h3 id="故障恢复"><a class="header-anchor" href="#故障恢复"></a>故障恢复</h3>
<p>下线主节点的从节点发现自身复制的主节点下线时，进行故障恢复工作。</p>
<h4 id="资格检查"><a class="header-anchor" href="#资格检查"></a>资格检查</h4>
<p>从节点与主节点断线时间超过<code>cluster-node-time*cluster-slavevalidity-factor</code>时，该从节点不具备故障转移资格。</p>
<h4 id="准备选举时间"><a class="header-anchor" href="#准备选举时间"></a>准备选举时间</h4>
<p>各个从节点根据自身偏移量设置不同的延时选举时间，偏移量大的节点优先发起选举。</p>
<h4 id="发起选举"><a class="header-anchor" href="#发起选举"></a>发起选举</h4>
<p>当从节点定时任务发现到达故障选举时间<code>failover_auth_time</code>到达后，发起选举，流程如下：</p>
<ol>
<li>更新配置纪元</li>
<li>广播选举消息</li>
</ol>
<h4 id="选举投票"><a class="header-anchor" href="#选举投票"></a>选举投票</h4>
<p>持有槽的主节点会处理故障选举消息，当一个从节点在<code>cluster-node-timeout*2</code>时间内获取N/2+1个投票时，该从节点会晋升为主节点。</p>
<h4 id="替换主节点"><a class="header-anchor" href="#替换主节点"></a>替换主节点</h4>
<p>当从节点收集到足够的选票之后，触发替换主节点操作：</p>
<ol>
<li>当前从节点取消复制变为主节点</li>
<li>执行cluster DelSlot操作撤销故障主节点负责的槽，并执行cluster AddSlot把这些槽委派给自己。</li>
<li>向集群广播自己的pong消息，通知集群内所有节点当前从节点变为主节点并接管故障主节点的槽信息。</li>
</ol>
<h3 id="故障转移时间"><a class="header-anchor" href="#故障转移时间"></a>故障转移时间</h3>
<p>估算故障转移时间</p>
<ol>
<li>主观下线(pfail)识别时间 =<code> cluster-node-timeout</code></li>
<li>主观下线状态消息传播时间&lt;=cluster-node-timeout/2。消息通信机制对超过<code>cluster-node-timeout/2</code>未通信节点会发起ping消息，消息体在选择包含 哪些节点时会优先选取下线状态节点，所以通常这段时间内能够收集到半数 以上主节点的pfail报告从而完成故障发现</li>
<li>从节点转移时间&lt;=1000毫秒。由于存在延迟发起选举机制，偏移量最大的从节点会最多延迟1秒发起选举。通常第一次选举就会成功，所以从 节点执行转移时间在1秒以内</li>
</ol>
<blockquote>
<p>根据以上分析可以预估出故障转移时间，如下：</p>
<p><code>failover-time(毫秒) ≤ cluster-node-timeout + cluster-node-timeout/2 + 1000</code></p>
<p>因此，故障转移时间和<code>cluster-node-timeout</code>参数息息相关，默认15s</p>
</blockquote>
<h2 id="集群运维"><a class="header-anchor" href="#集群运维"></a>集群运维</h2>
<h3 id="集群完整性"><a class="header-anchor" href="#集群完整性"></a>集群完整性</h3>
<p>参数<code>cluster-require-full-coverage</code>控制集群槽未完成分配时，集群是否可用，默认为<code>false</code>。大多数业务应设置为<code>ture</code></p>
<h3 id="带宽消耗"><a class="header-anchor" href="#带宽消耗"></a>带宽消耗</h3>
<p>集群内Gossip消息通信会消耗带宽，官方建议集群最大规模在1000以内。</p>
<p>建议：</p>
<ol>
<li>在满足业务要求的前提下避免大集群。可以根据业务场景拆分为多个小集群</li>
<li>适度提高<code>cluster-node-timeout</code>降低消息发送频率，但是同时会导致故障转移速度变慢，应根据业务场景平衡二者。</li>
<li>条件允许部署在多个机器上。</li>
</ol>
<h3 id="Pub-Sub广播问题"><a class="header-anchor" href="#Pub-Sub广播问题"></a>Pub/Sub广播问题</h3>
<p>集群模式下，频繁应用Pub/Sub功能时，会严重消耗集群带宽。针对这种情况建议使用Sentinel结构专门用于Pub/Sub功能，从而规避这一问题。</p>
<h3 id="集群倾斜"><a class="header-anchor" href="#集群倾斜"></a>集群倾斜</h3>
<h4 id="数据倾斜"><a class="header-anchor" href="#数据倾斜"></a>数据倾斜</h4>
<ul>
<li>节点和槽分配严重不均，使用如下命令查看并处理</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[blog@localhost ~]$ redis-cli --cluster info 127.0.0.1:6379 <span class="comment"># 查看集群槽分配情况</span></span><br><span class="line">127.0.0.1:6379 (e8e05250...) -&gt; 0 keys | 5461 slots | 1 slaves.</span><br><span class="line">127.0.0.1:6381 (fcceb74f...) -&gt; 0 keys | 5461 slots | 1 slaves.</span><br><span class="line">127.0.0.1:6380 (e34482fb...) -&gt; 0 keys | 5462 slots | 1 slaves.</span><br><span class="line">[OK] 0 keys <span class="keyword">in</span> 3 masters.</span><br><span class="line">0.00 keys per slot on average.</span><br><span class="line">[blog@localhost ~]$ redis-cli --cluster rebalance 127.0.0.1:6379 <span class="comment"># 重新平衡槽</span></span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 127.0.0.1:6379)</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br><span class="line">*** No rebalancing needed! All nodes are within the 2.00% threshold.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>不同槽对应键数量差异过大</p>
<p>过度使用<code>&#123;hash_tag&#125;</code>时，会导致槽对应的键数量分布不均匀。通过<code>cluster countkeysinslot &#123;slot&#125;</code>可以查看槽内对应的键数量，再使用<code>cluster countkeysinslot &#123;slot&#125; &#123;count&#125;</code>循环迭代出槽下所有的键，进而发现过度使用{hash_tag}的键。</p>
</li>
<li>
<p>集合对象包含大量元素</p>
<p>大对象可以使用<code>redis-cli --bigkeys</code>命令查找，找到后应根据业务进行拆分，另外，集群槽数据迁移通过对键执行<code>migrate</code>操作完成，键过大可能导致<code>migrate</code>超时导致数据迁移失败。</p>
</li>
<li>
<p>内存相关配置不一致</p>
<p>主要指<code>hash-max-ziplist-value</code>、<code>set-max-inset-entries</code>等压缩数据结构配置。当集群大量使用hash、set等数据结构，配置不同可能导致集群内节点占用内存不同，导致内存量倾斜。</p>
</li>
</ul>
<h4 id="请求倾斜"><a class="header-anchor" href="#请求倾斜"></a>请求倾斜</h4>
<p>集群内请求量过大并且集中在少部分节点时将导致集群负载不均。常出现在热点键场景，当键命令消耗较低时影响有限，当使用复杂命令如<code>hgetall</code>、<code>smembers</code>时影响很大。避免方式如下：</p>
<ol>
<li>合理设计键，热点大集合拆分或使用<code>hmget</code>代替<code>hgetall</code>避免整体读取</li>
<li>不要使用热点key作为hash_tag，避免热点key映射到同一个节点</li>
<li>对于一致性要求不高的场景，客户端使用本地缓存代替热键调用</li>
</ol>
<h3 id="手动故障转移"><a class="header-anchor" href="#手动故障转移"></a>手动故障转移</h3>
<p>在从节点上执行<code>cluster failover</code>会发起手动故障转移流程，如下：</p>
<ol>
<li>从节点通知主节点停止处理所有客户端请求</li>
<li>主节点发送对应从节点延迟复制的数据</li>
<li>从节点处理延迟复制的数据，直到与主节点偏移量一致</li>
<li>从节点立刻发起选举投票，选举成功后断开复制成为主节点，之后向集群内广播pong消息，</li>
<li>旧主节点接收消息后更新自身配置变为从节点，解除客户端请求阻塞，重定向到新主节点上执行请求。</li>
<li>旧主节点变为从节点后，向新的主节点发起全量复制流程</li>
</ol>
<ul>
<li><code>cluster failover force</code>: 从节点直接进行选举，不需要确认和主节点偏移量，用于主节点宕机的场景。</li>
<li><code>cluster failover takeover</code>: 从节点直接更新配置纪元并替换主节点，用于无法完成选举的情况：超过半数节点故障，网络不通畅导致规定时间内无法完成选举，导致当前节点失去选举资格(断线时间超过<code>cluster-node-time*cluster-slavevalidity-factor</code>)</li>
</ul>
<blockquote>
<p>手动故障转移时，在满足当前需求的情况下建议优先级：cluster failver&gt;cluster failover force&gt;cluster failover takeover</p>
</blockquote>
<h3 id="数据迁移"><a class="header-anchor" href="#数据迁移"></a>数据迁移</h3>
<p>redis提供了迁移数据的命令，<code>redis-cli --cluster import host:port --from &lt;arg&gt; --copy --replace</code>，命令内部采用批量scan和migrate的方式迁移数据。其缺点如下：</p>
<ol>
<li>迁移只能从单机节点向集群环境导入数据</li>
<li>不支持在线迁移数据，迁移数据时应用方必须停写，无法平滑迁移数据</li>
<li>迁移过程中途如果出现超时等错误，不支持断点续传只能重新全量导入</li>
<li>使用单线程进行数据迁移，大数据量迁移速度过慢</li>
</ol>
<blockquote>
<p>这里推荐使用唯品会开发的<code>redis-migrate-tool</code>，该工具可满足大多数Redis迁移需求，特点如下：</p>
<ul>
<li>支持单机、Twemproxy、Redis Cluster、RDB/AOF等多种类型的数据迁移</li>
<li>工具模拟成从节点基于复制流迁移数据，从而支持在线迁移数据，业务方不需要停写</li>
<li>采用多线程加速数据迁移过程且提供数据校验和查看迁移状态等功能</li>
</ul>
<p>更多细节见GitHub：<a href="https://github.com/vipshop/redis-migrate-tool%E3%80%82">https://github.com/vipshop/redis-migrate-tool。</a></p>
</blockquote>
<h2 id="本章重点回顾"><a class="header-anchor" href="#本章重点回顾"></a>本章重点回顾</h2>
<ol>
<li>Redis集群数据分区规则采用虚拟槽方式，所有的键映射到16384个槽中，每个节点负责一部分槽和相关数据，实现数据和请求的负载均衡</li>
<li>搭建集群划分三个步骤：准备节点，节点握手，分配槽。可以使用<code>redis-trib.rb create</code>或者<code>redis-cli --cluster</code>命令快速搭建集群</li>
<li>集群内部节点通信采用Gossip协议彼此发送消息，消息类型分为：ping消息、pong消息、meet消息、fail消息等。节点定期不断发送和接受 ping/pong消息来维护更新集群的状态。消息内容包括节点自身数据和部分其他节点的状态数据</li>
<li>集群伸缩通过在节点之间移动槽和相关数据实现。扩容时根据槽迁移计划把槽从源节点迁移到目标节点，源节点负责的槽相比之前变少从而达 到集群扩容的目的，收缩时如果下线的节点有负责的槽需要迁移到其他节 点，再通过cluster forget命令让集群内其他节点忘记被下线节点</li>
<li>使用Smart客户端操作集群达到通信效率最大化，客户端内部负责计算维护键→槽→节点的映射，用于快速定位键命令到目标节点。集群协议通 过Smart客户端全面高效的支持需要一个过程，用户在选择Smart客户端时建 议review下集群交互代码如：异常判定和重试逻辑，更新槽的并发控制等。 节点接收到键命令时会判断相关的槽是否由自身节点负责，如果不是则返回 重定向信息。重定向分为MOVED和ASK，ASK说明集群正在进行槽数据迁 移，客户端只在本次请求中做临时重定向，不会更新本地槽缓存。MOVED 重定向说明槽已经明确分派到另一个节点，客户端需要更新槽节点缓存</li>
<li>集群自动故障转移过程分为故障发现和故障恢复。节点下线分为主观下线和客观下线，当超过半数主节点认为故障节点为主观下线时标记它为 客观下线状态。从节点负责对客观下线的主节点触发故障恢复流程，保证集群的可用性</li>
<li>开发和运维集群过程中常见问题包括：超大规模集群带宽消耗， pub/sub广播问题，集群节点倾斜问题，手动故障转移，在线迁移数据等</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis设计与实现笔记_简单动态字符串</title>
    <url>/posts/1542299328.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>Reids没有使用C语言传统的字符串表示，而是定义了一种结构用于表示字符串，即简单动态字符串（Simple Dynamic String，SDS），并将SDS作为Redis默认字符串表示</p>

</blockquote>
<span id="more"></span>
<h1>简单动态字符串</h1>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>docker_镜像导入导出</title>
    <url>/posts/2652267918.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>当目标服务器无网络或希望从一台服务器拷贝docker镜像到目标服务器时。可以使用docker的命令完成镜像的导入导出。</p>

</blockquote>
<span id="more"></span>
<h1>docker_镜像导入导出</h1>
<h2 id="导出"><a class="header-anchor" href="#导出"></a>导出</h2>
<h3 id="查看镜像列表"><a class="header-anchor" href="#查看镜像列表"></a>查看镜像列表</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dev @ localhost in ~ [10:03:04] </span></span><br><span class="line">$ docker images                           </span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">mysql         5.7       09361feeb475   2 weeks ago    447MB</span><br><span class="line">hello-world   latest    d1165f221234   4 months ago   13.3kB</span><br></pre></td></tr></table></figure>
<h3 id="导出镜像到文件"><a class="header-anchor" href="#导出镜像到文件"></a>导出镜像到文件</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dev @ localhost in ~ [10:03:10]</span></span><br><span class="line">$ docker save -o ~/mysql_5.7.tar mysql:5.7</span><br></pre></td></tr></table></figure>
<ul>
<li><code>docker save -o &#123;FILE_NAME&#125; &#123;REPOSITORY:TAG&#125;</code></li>
</ul>
<h2 id="导入"><a class="header-anchor" href="#导入"></a>导入</h2>
<p>将导出的镜像文件上传至服务器，使用命令<code>docker load &lt; &#123;FILE_NAME&#125;</code>加载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看镜像</span></span><br><span class="line"><span class="comment"># dev @ localhost in ~ [10:08:14] </span></span><br><span class="line">$ docker images</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">hello-world   latest    d1165f221234   4 months ago   13.3kB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入镜像</span></span><br><span class="line"><span class="comment"># dev @ localhost in ~ [10:08:50] C:1</span></span><br><span class="line">$ docker load &lt; mysql_5.7.tar </span><br><span class="line">764055ebc9a7: Loading layer [==================================================&gt;]  72.53MB/72.53MB</span><br><span class="line">71a14cc55692: Loading layer [==================================================&gt;]  338.4kB/338.4kB</span><br><span class="line">50854886015e: Loading layer [==================================================&gt;]  9.557MB/9.557MB</span><br><span class="line">1952fb2b0eb4: Loading layer [==================================================&gt;]  4.202MB/4.202MB</span><br><span class="line">893f6aea2ce2: Loading layer [==================================================&gt;]  2.048kB/2.048kB</span><br><span class="line">b8d0aeaeeee8: Loading layer [==================================================&gt;]  53.77MB/53.77MB</span><br><span class="line">d7cde20f3f68: Loading layer [==================================================&gt;]  5.632kB/5.632kB</span><br><span class="line">12c8996d19a8: Loading layer [==================================================&gt;]  3.584kB/3.584kB</span><br><span class="line">8b092d2f4bcf: Loading layer [==================================================&gt;]  311.9MB/311.9MB</span><br><span class="line">4f20a66508d4: Loading layer [==================================================&gt;]  17.92kB/17.92kB</span><br><span class="line">4723a691b7d9: Loading layer [==================================================&gt;]  1.536kB/1.536kB</span><br><span class="line">Loaded image: mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看镜像</span></span><br><span class="line">$ docker images</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">mysql         5.7       09361feeb475   2 weeks ago    447MB</span><br><span class="line">hello-world   latest    d1165f221234   4 months ago   13.3kB</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>导入成功</li>
</ul>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>进程与线程基本概念</title>
    <url>/posts/1200304233.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>本章主要讲述进程与线程的起源、区别与作用。</p>

</blockquote>
<span id="more"></span>
<p><strong>大部分内容摘抄自其它文章。建议查看最后的引用部分，查看原文内容加深理解。</strong></p>
<hr>
<h1>进程与线程基本概念</h1>
<h2 id="进程与线程"><a class="header-anchor" href="#进程与线程"></a>进程与线程</h2>
<h3 id="进程的提出"><a class="header-anchor" href="#进程的提出"></a>进程的提出</h3>
<p>最初的计算机只能接受一些特定的指令，用户每输入一个指令，计算机就做出一个操作。当用户在思考或者输入时，计算机就在等待。这样效率非常低下，在很多时候，计算机都处在等待状态。</p>
<p><strong>批处理操作系统</strong></p>
<p>把一系列需要操作的指令写下来，形成一个清单，一次性交给计算机。</p>
<p>批处理操作系统在一定程度上提高了计算机的效率，但是由于<strong>批处理操作系统的指令运行方式仍然是串行的，内存中始终只有一个程序在运行</strong>，后面的程序需要等待前面的程序执行完成后才能开始执行，而前面的程序有时会由于I/O操作、网络等原因阻塞，所以<strong>批处理操作效率也不高</strong>。</p>
<p><strong>进程的提出</strong></p>
<p>内存中能不能存在多个程序呢？ 科学家们提出了进程的概念。</p>
<p>进程就是<strong>应用程序在内存中分配的空间，也就是正在运行的程序</strong>，各个进程之间互不干扰。进程保存着程序每一个时刻运行的状态</p>
<blockquote>
<p>程序：用某种编程语言(java、pyhton等)编写，能够完成一定任务或者功能的代码集合，是指令和数据的有序集合，是<strong>一段静态代码</strong>。</p>
</blockquote>
<p>CPU采用时间片轮转的方式运行进程： CPU为每个进程分配一个时间段，称作它的时间片。如果在时间片结束时进程还在运行，则暂停这个进程的运行，并且将CPU分配还给另一个进程(这个过程叫做上下文切换)。如果进程在时间片结束前阻塞或者结束，则CPU立即进行切换，不用等待时间片用完。</p>
<blockquote>
<p>当进程暂停时，它会保存当前进程的状态(进程表示、进程使用的资源等)，在下一次切换回来时根据之前保存的状态恢复，接着继续执行</p>
</blockquote>
<p>使用进程+CPU时间片轮转方式的操作系统，在宏观上看起来同一时间执行多个任务，换句话说，<strong>进程让操作系统的并发成为了可能</strong>。虽然并发从宏观上看有多个任务在执行，但在事实上，对于<strong>单核CPU</strong>来说，任意具体时刻都只有一个任务在占用CPU资源</p>
<p><strong>对操作系统的要求进一步提高</strong></p>
<p>虽然进程的出现，使得操作系统的性能大大提升，但是随着时间的推移，人们并不满足一个进程在一段时间内只能做一件事情，如果一个进程有多个子任务时，只能逐个执行这些子任务，很影响效率。</p>
<h3 id="线程的提出"><a class="header-anchor" href="#线程的提出"></a>线程的提出</h3>
<p>基于上述问题，人们提出线程的概念，<strong>让一个线程执行一个子任务，这样一个进程就包含了多个线程，每个线程负责一个单独的子任务。</strong></p>
<p>总之，进程和线程的提出极大的提高了操作系统的性能。<strong>进程让操作系统的并发性成为了可能，而线程让进程的内部并发成为了可能。</strong></p>
<h3 id="多进程的方式可以实现高并发，为什么我们要使用多线程？"><a class="header-anchor" href="#多进程的方式可以实现高并发，为什么我们要使用多线程？"></a>多进程的方式可以实现高并发，为什么我们要使用多线程？</h3>
<p>多进程方式确实可以实现并发，但使用多线程有以下几个好处：</p>
<ul>
<li>进程间的通信比较复杂，而线程间的通信比较简单，通常情况下，我们需要使用共享资源，这些资源在线程间的通信比较容易。</li>
<li>进程是重量级的，而线程是轻量级的，故多线程方式的系统开销更小。</li>
</ul>
<h3 id="进程和线程的区别"><a class="header-anchor" href="#进程和线程的区别"></a>进程和线程的区别</h3>
<p>进程是一个独立的运行环境，而线程是进程中执行的一个任务。他们两个的本质区别是<strong>是否单独占用内存地址空间及其他系统资源(比如I/O)</strong></p>
<ul>
<li>进程单独占有一定的内存地址空间，所以进程间存在内存隔离，数据是分开的，数据共享复杂但是同步简单，各个进程之间互不干扰；而线程共享所属进程占有的内存地址空间和资源，数据共享简单，但是同步复杂。</li>
<li>进程单独占有一定的内存地址空间，一个进程出现问题不会影响其他进程，不影响主程序的稳定性，可靠性高。一个线程崩溃可能影响整个程序的稳定性，可靠性较低。</li>
<li>进程的创建和销毁不仅需要保存寄存器和栈信息，还需要资源的分配回收及页调度，开销较大；线程只需要保存寄存器和栈信息，开销较小。</li>
</ul>
<p>另外一个重要区别就是，<strong>进程是操作系统进行资源分配的基本单位，而线程是操作系统进行调度的基本单位(即CPU分配时间的单位)</strong></p>
<h2 id="上下文切换"><a class="header-anchor" href="#上下文切换"></a>上下文切换</h2>
<h3 id="上下文切换概念"><a class="header-anchor" href="#上下文切换概念"></a>上下文切换概念</h3>
<p>上下文切换是指CPU从一个进程(或线程)切换到另一个进程(或线程)。上下文是指<strong>某一时刻CPU寄存器和程序计数器的内容。</strong></p>
<h3 id="上下文切换的性能问题"><a class="header-anchor" href="#上下文切换的性能问题"></a>上下文切换的性能问题</h3>
<p>并发任务需要进行线程创建以及上下文的切换,所以效率不如串行块</p>
<h3 id="如何减少上下文切换"><a class="header-anchor" href="#如何减少上下文切换"></a>如何减少上下文切换</h3>
<ul>
<li>无锁并发编程,CAS算法,减少并发,使用最小线程,协程</li>
<li>无锁并发编程:避免使用锁,比如数据分段执行(MapReduce),尽可能使用无状态对象,避免竞争情况等</li>
<li>CAS算法: <code>java.util.current</code>包中大量使用CAS算法,比如<code>Atomic</code>,<code>AQS</code>等等</li>
<li>减少并发:Java8 中新引入的<code>LongAdder</code>,<code>DoubleAdder</code>等新类,将CAS算法替换成value分担原则</li>
<li>使用最小线程:避免创建不必要的线程,当任务很少但线程很多时,会导致大量线程为等待状态</li>
<li>协程:在单线程里实现多任务的调度,并在单线程里维持多个任务间的切换</li>
<li><strong>补充</strong>: 需要注意的是,Java的线程是映射到操作系统的原生线程上,因此需要阻塞或唤醒一个线程都需要操作系统的协助,这就意味着要从用户态转换到核心态,因此状态转化是非常耗费处理器时间的</li>
</ul>
<h2 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h2>
<ol>
<li><a href="https://github.com/RedSpider1/concurrent">RedSpider社区成员原创与维护的Java多线程系列文章</a></li>
<li><a href="https://juejin.im/user/59716ee96fb9a06b9c744c67">kiraSally的个人博客</a></li>
<li><a href="https://blog.csdn.net/qq_39707130/article/details/93915667#JavaJMM_11">CSDN博主「和尚要吃肉」的『JAVA内存模型JMM</a></li>
<li><a href="https://book.douban.com/subject/26591326/">《Java并发编程的艺术》</a></li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
        <category>并发</category>
      </categories>
      <tags>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown-基本语法</title>
    <url>/posts/1069057006.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p>

</blockquote>
<span id="more"></span>
<h2 id="标题"><a class="header-anchor" href="#标题"></a>标题</h2>
<p>语法如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 我是一级标题</span><br><span class="line">## 我是二级标题</span><br><span class="line">### 我是三级标题</span><br><span class="line">#### 我是四级标题</span><br><span class="line">##### 我是五级标题</span><br><span class="line">###### 我是六级标题</span><br></pre></td></tr></table></figure>
<ul>
<li>显示效果如下图</li>
</ul>
<img src="/posts/1069057006/%E6%A0%87%E9%A2%98.png" class="">
<h2 id="段落和格式"><a class="header-anchor" href="#段落和格式"></a>段落和格式</h2>
<h3 id="段落"><a class="header-anchor" href="#段落"></a>段落</h3>
<p>段落的换行通过行尾加入两个以上空格加换行实现</p>
<h3 id="分割线"><a class="header-anchor" href="#分割线"></a>分割线</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">三个以上的*或者-,中间可以有空格</span><br><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure>
<ul>
<li>效果如下</li>
</ul>
<hr>
<hr>
<hr>
<hr>
<h3 id="字体"><a class="header-anchor" href="#字体"></a>字体</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*斜体文本*</span><br><span class="line">**粗体文本**</span><br><span class="line">***粗斜体文本***</span><br><span class="line">~~删除线文本~~</span><br></pre></td></tr></table></figure>
<ul>
<li>效果如下<br>
<em>斜体文本</em><br>
<strong>粗体文本</strong><br>
<em><strong>粗斜体文本</strong></em><br>
<s>删除线文本</s></li>
</ul>
<h2 id="引用"><a class="header-anchor" href="#引用"></a>引用</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; 引用的内容</span><br><span class="line">&gt;&gt; 引用的内容2</span><br></pre></td></tr></table></figure>
<ul>
<li>效果如下:</li>
</ul>
<blockquote>
<p>引用的内容</p>
<blockquote>
<p>引用的内容2</p>
</blockquote>
</blockquote>
<h2 id="列表"><a class="header-anchor" href="#列表"></a>列表</h2>
<h3 id="无序列表"><a class="header-anchor" href="#无序列表"></a>无序列表</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">无序列表可以使用减号(-)或者(+)进行标记，内容与标记间要有空格</span><br><span class="line">- 第一项</span><br><span class="line">- 第二项</span><br><span class="line">- 第三项</span><br></pre></td></tr></table></figure>
<ul>
<li>效果如下:</li>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<h3 id="有序列表"><a class="header-anchor" href="#有序列表"></a>有序列表</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">有序列表使用数字加点(.)组成，内容和标记之前要有空格</span><br><span class="line">1. 列表第一项</span><br><span class="line">2. 列表第二项</span><br><span class="line">3. 列表第三项</span><br></pre></td></tr></table></figure>
<ul>
<li>效果如下:</li>
</ul>
<ol>
<li>列表第一项</li>
<li>列表第二项</li>
<li>列表第三项</li>
</ol>
<h3 id="列表嵌套"><a class="header-anchor" href="#列表嵌套"></a>列表嵌套</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">有序列表和无序列表可以相互嵌套</span><br><span class="line">1. 第一项：</span><br><span class="line">    - 第一项嵌套的第一个元素</span><br><span class="line">    - 第一项嵌套的第二个元素</span><br><span class="line">2. 第二项：</span><br><span class="line">    - 第二项嵌套的第一个元素</span><br><span class="line">    - 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure>
<ul>
<li>效果如下:</li>
</ul>
<ol>
<li>第一项：
<ul>
<li>第一项嵌套的第一个元素</li>
<li>第一项嵌套的第二个元素</li>
</ul>
</li>
<li>第二项：
<ul>
<li>第二项嵌套的第一个元素</li>
<li>第二项嵌套的第二个元素</li>
</ul>
</li>
</ol>
<h2 id="表格"><a class="header-anchor" href="#表格"></a>表格</h2>
<h3 id="基本表格"><a class="header-anchor" href="#基本表格"></a>基本表格</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">|  列1   | 列2  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| Col 1 Row 1 | Col 1 Row 2 |</span><br><span class="line">| Col 2 Row 1 | Col 2 Row 2 |</span><br></pre></td></tr></table></figure>
<ul>
<li>效果如下:</li>
</ul>
<table>
<thead>
<tr>
<th>列1</th>
<th>列2</th>
</tr>
</thead>
<tbody>
<tr>
<td>Col 1 Row 1</td>
<td>Col 1 Row 2</td>
</tr>
<tr>
<td>Col 2 Row 1</td>
<td>Col 2 Row 2</td>
</tr>
</tbody>
</table>
<h3 id="对齐方式"><a class="header-anchor" href="#对齐方式"></a>对齐方式</h3>
<ul>
<li>使用<code>|</code>来分隔不同的列，使用<code>----</code>来分隔表头与数据</li>
<li>表格的对齐方式通过<code>-</code>分隔符进行设置
<ul>
<li>
<p><code>-:</code>，右对齐</p>
</li>
<li>
<p><code>:-</code>，左对齐</p>
</li>
<li>
<p><code>:-:</code>，居中对齐</p>
</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>Tables</th>
<th style="text-align:center">Are</th>
<th style="text-align:right">Cool</th>
</tr>
</thead>
<tbody>
<tr>
<td>col 1 is</td>
<td style="text-align:center">left-aligned</td>
<td style="text-align:right">$1600</td>
</tr>
<tr>
<td>col 2 is</td>
<td style="text-align:center">centered</td>
<td style="text-align:right">$12</td>
</tr>
<tr>
<td>col 3 is</td>
<td style="text-align:center">right-aligned</td>
<td style="text-align:right">$1</td>
</tr>
</tbody>
</table>
<ul>
<li>效果如下：</li>
</ul>
<table>
<thead>
<tr>
<th>Tables</th>
<th style="text-align:center">Are</th>
<th style="text-align:right">Cool</th>
</tr>
</thead>
<tbody>
<tr>
<td>col 1 is</td>
<td style="text-align:center">left-aligned</td>
<td style="text-align:right">$1600</td>
</tr>
<tr>
<td>col 2 is</td>
<td style="text-align:center">centered</td>
<td style="text-align:right">$12</td>
</tr>
<tr>
<td>col 3 is</td>
<td style="text-align:center">right-aligned</td>
<td style="text-align:right">$1</td>
</tr>
</tbody>
</table>
<h2 id="代码"><a class="header-anchor" href="#代码"></a>代码</h2>
<h3 id="代码片段"><a class="header-anchor" href="#代码片段"></a>代码片段</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`System.out.println()`函数用于控制台输出。</span><br></pre></td></tr></table></figure>
<ul>
<li>效果如下<br>
<code>System.out.println()</code>函数用于控制台输出。</li>
</ul>
<h3 id="代码块"><a class="header-anchor" href="#代码块"></a>代码块</h3>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">​<span class="code">```java</span></span><br><span class="line"><span class="code">public class Main&#123;</span></span><br><span class="line"><span class="code">    public static void main(String args[])&#123;</span></span><br><span class="line"><span class="code">        System.out.println(&quot;Hello , World&quot;);</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>效果如下:</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello , World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="链接及图片"><a class="header-anchor" href="#链接及图片"></a>链接及图片</h2>
<h3 id="链接"><a class="header-anchor" href="#链接"></a>链接</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[百度](https://www.baidu.com)</span><br></pre></td></tr></table></figure>
<ul>
<li>效果如下：<br>
<a href="https://www.baidu.com">百度</a></li>
</ul>
<h3 id="图片"><a class="header-anchor" href="#图片"></a>图片</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![alt属性文本](图片地址)</span><br></pre></td></tr></table></figure>
<ul>
<li>效果如下:</li>
</ul>
<img src="/posts/1069057006/%E6%A0%87%E9%A2%98.png" class="" title="标题">
]]></content>
      <categories>
        <category>工具</category>
        <category>日常</category>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown-数学公式</title>
    <url>/posts/2665394633.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>mathjax是一个开源的数学公式渲染器，通过特定语法可以输出不同的数学公式</p>

</blockquote>
<span id="more"></span>
<blockquote>
<p><strong>写在前面</strong></p>
<ol>
<li>
<p>不同的解析器可能实现上有细微差距，但是基本语法应该相同~~~</p>
</li>
<li>
<p>该文档使用typora完成编辑，Hexo显示不太准确，可以下载源文件从Typora打开。注意要打开如下设置</p>
</li>
</ol>
 <img src="/posts/2665394633/image-20210527172000754.png" class="" title="image-20210527172000754">
</blockquote>
<h2 id="基础语法"><a class="header-anchor" href="#基础语法"></a>基础语法</h2>
<h3 id="公式片段"><a class="header-anchor" href="#公式片段"></a>公式片段</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">公式为: $S·T=\frac&#123;1&#125; &#123;m&#125;\sum_&#123;i=0&#125;^mS_iT_i=0$</span><br></pre></td></tr></table></figure>
<ul>
<li>显示效果如下:<br>
公式为: $S·T=\frac{1} {m}\sum_{i=0}^mS_iT_i=0$</li>
</ul>
<h3 id="公式块"><a class="header-anchor" href="#公式块"></a>公式块</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">S·S=\frac&#123;1&#125; &#123;m&#125;\sum_&#123;i=0&#125;^mS_iS_i=\frac&#123;1&#125; &#123;m&#125;\sum_&#123;i=0&#125;^mS_i^2=\frac&#123;1&#125; &#123;m&#125;\sum_&#123;i=0&#125;^m(\pm1)^2=1</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>
<ul>
<li>显示效果如下:<br>
$$<br>
S·S=\frac{1} {m}\sum_{i=0}^mS_iS_i=\frac{1} {m}\sum_{i=0}<sup>mS_i</sup>2=\frac{1} {m}\sum_{i=0}<sup>m(\pm1)</sup>2=1<br>
$$</li>
</ul>
<h2 id="希腊字母"><a class="header-anchor" href="#希腊字母"></a>希腊字母</h2>
<table>
<thead>
<tr>
<th style="text-align:center">显示</th>
<th style="text-align:center">命令</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">α</td>
<td style="text-align:center">\alpha</td>
<td>β</td>
<td>\beta</td>
</tr>
<tr>
<td style="text-align:center">γ</td>
<td style="text-align:center">\gamma</td>
<td>δ</td>
<td>\delta</td>
</tr>
<tr>
<td style="text-align:center">ε</td>
<td style="text-align:center">\epsilon</td>
<td>ζ</td>
<td>\zeta</td>
</tr>
<tr>
<td style="text-align:center">η</td>
<td style="text-align:center">\eta</td>
<td>θ</td>
<td>\theta</td>
</tr>
<tr>
<td style="text-align:center">ι</td>
<td style="text-align:center">\iota</td>
<td>κ</td>
<td>\kappa</td>
</tr>
<tr>
<td style="text-align:center">λ</td>
<td style="text-align:center">\lambda</td>
<td>μ</td>
<td>\mu</td>
</tr>
<tr>
<td style="text-align:center">ν</td>
<td style="text-align:center">\nu</td>
<td>ξ</td>
<td>\xi</td>
</tr>
<tr>
<td style="text-align:center">π</td>
<td style="text-align:center">\pi</td>
<td>ρ</td>
<td>\rho</td>
</tr>
<tr>
<td style="text-align:center">σ</td>
<td style="text-align:center">\sigma</td>
<td>τ</td>
<td>\tau</td>
</tr>
<tr>
<td style="text-align:center">υ</td>
<td style="text-align:center">\upsilon</td>
<td>φ</td>
<td>\phi</td>
</tr>
<tr>
<td style="text-align:center">χ</td>
<td style="text-align:center">\chi</td>
<td>ψ</td>
<td>\psi</td>
</tr>
<tr>
<td style="text-align:center">ω</td>
<td style="text-align:center">\omega</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>如果需要大写希腊字母，将命令首字母大写即可<code>\Gamma</code>:<br>
$$<br>
\Gamma<br>
$$</p>
</li>
<li>
<p>如果需要斜体希腊字母，将命令钱加上<code>var</code>前缀<code>\varGamma</code></p>
</li>
</ul>
<p>$$<br>
\varGamma<br>
$$</p>
<h2 id="常用符号"><a class="header-anchor" href="#常用符号"></a>常用符号</h2>
<table>
<thead>
<tr>
<th style="text-align:center">显示</th>
<th style="text-align:center">命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">×</td>
<td style="text-align:center">\times</td>
<td>乘号</td>
</tr>
<tr>
<td style="text-align:center">≈</td>
<td style="text-align:center">\approx</td>
<td>约等于</td>
</tr>
<tr>
<td style="text-align:center">≤</td>
<td style="text-align:center">\leq</td>
<td>小于等于</td>
</tr>
<tr>
<td style="text-align:center">≥</td>
<td style="text-align:center">\geq</td>
<td>大于等于</td>
</tr>
<tr>
<td style="text-align:center">±</td>
<td style="text-align:center">\pm</td>
<td>正负号</td>
</tr>
<tr>
<td style="text-align:center">∞</td>
<td style="text-align:center">\infty</td>
<td>无穷大</td>
</tr>
<tr>
<td style="text-align:center">∪</td>
<td style="text-align:center">\cup</td>
<td>并集</td>
</tr>
<tr>
<td style="text-align:center">∩</td>
<td style="text-align:center">\cap</td>
<td>交集</td>
</tr>
<tr>
<td style="text-align:center">⊂</td>
<td style="text-align:center">\subset</td>
<td>子集</td>
</tr>
<tr>
<td style="text-align:center">⊆</td>
<td style="text-align:center">\subseteq</td>
<td>真子集</td>
</tr>
<tr>
<td style="text-align:center">⊃</td>
<td style="text-align:center">\supset</td>
<td>父集</td>
</tr>
<tr>
<td style="text-align:center">∈</td>
<td style="text-align:center">\in</td>
<td>属于</td>
</tr>
<tr>
<td style="text-align:center">∉</td>
<td style="text-align:center">\notin</td>
<td>不属于</td>
</tr>
<tr>
<td style="text-align:center">Φ</td>
<td style="text-align:center">\vatnoting</td>
<td>空集</td>
</tr>
<tr>
<td style="text-align:center">∀</td>
<td style="text-align:center">\forall</td>
<td>任意</td>
</tr>
<tr>
<td style="text-align:center">∃</td>
<td style="text-align:center">\exists</td>
<td>存在</td>
</tr>
<tr>
<td style="text-align:center">∵</td>
<td style="text-align:center">\because</td>
<td>因为</td>
</tr>
<tr>
<td style="text-align:center">∴</td>
<td style="text-align:center">\therefore</td>
<td>所以</td>
</tr>
</tbody>
</table>
<h2 id="字母修饰"><a class="header-anchor" href="#字母修饰"></a>字母修饰</h2>
<h3 id="上下标"><a class="header-anchor" href="#上下标"></a>上下标</h3>
<ul>
<li>上标: <code>^</code></li>
<li>下标: <code>_</code></li>
</ul>
<p>举例 <code>C_n^2</code> : $C_n^2$</p>
<h3 id="括号"><a class="header-anchor" href="#括号"></a>括号</h3>
<ul>
<li>小括号: <code>()</code> : $()$</li>
<li>中括号: <code>[]</code> : $[]$</li>
<li>尖括号:<code>\langle  \rangle</code>: $\langle \rangle$</li>
<li>自适应括号<code>\left( \right)</code>,举例<code>a*\left(b-\left(\frac &#123;c&#125; &#123;d&#125;\right)\right)</code>： $a*\left(b-\left(\frac {c} {d}\right)\right)$</li>
</ul>
<h3 id="分组"><a class="header-anchor" href="#分组"></a>分组</h3>
<ul>
<li>使用<code>&#123;&#125;</code>将内容括起来组成一个分组，如<code>10^10</code> : $10^10$ ; <code>10^&#123;10&#125;</code> : $10^{10}$</li>
</ul>
<h2 id="计算"><a class="header-anchor" href="#计算"></a>计算</h2>
<h3 id="分式与根式"><a class="header-anchor" href="#分式与根式"></a>分式与根式</h3>
<ul>
<li>分式(fractions) : <code>\frac&#123;公式1&#125; &#123;公式2&#125;</code> : $\frac{公式1} {公式2}$</li>
<li>根式 : <code>\sqrt[3]&#123;x^2y&#125;</code> : $\sqrt[3]{x^2y}$</li>
</ul>
<h3 id="求和、极限和积分"><a class="header-anchor" href="#求和、极限和积分"></a>求和、极限和积分</h3>
<ul>
<li>
<p>求和(<code>\sum</code>)</p>
<p><code>sum_&#123;i=0&#125;^n&#123;a_i&#125;</code> : $sum_{i=0}^n{a_i}$</p>
</li>
<li>
<p>极限(<code>\lim</code>)</p>
<p><code>\lim_&#123;x \to 0&#125;</code> : $\lim_{x \to 0}$</p>
</li>
<li>
<p>积分(<code>\int</code>)</p>
<p><code>\int_0^\infty&#123;fxdx&#125;</code> : $\int_0^\infty{fxdx}$</p>
</li>
</ul>
<h3 id="特殊函数"><a class="header-anchor" href="#特殊函数"></a>特殊函数</h3>
<ul>
<li><code>\sinx</code>,<code>\lnx</code>,<code>\max(A,B,C)</code> : $\sin x$,$\ln x$,$\max(A,B,C)$</li>
</ul>
<h2 id="矩阵"><a class="header-anchor" href="#矩阵"></a>矩阵</h2>
<h3 id="基本语法"><a class="header-anchor" href="#基本语法"></a>基本语法</h3>
<ul>
<li>起始标志<code>\begin&#123;matrix&#125;</code>,结束标记<code>\end&#123;matrix&#125;</code></li>
<li>每一行末尾<code>\\</code>,行间元素之间<code>&amp;</code>(PS: hexo博客输入<code>\\</code>会被转义为<code>\</code>,所以实际输入时要输入<code>\\\\</code>)</li>
</ul>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;matrix&#125;</span><br><span class="line">1&amp;0&amp;0 \\</span><br><span class="line">0&amp;1&amp;0 \\</span><br><span class="line">0&amp;0&amp;1 \\</span><br><span class="line">\end&#123;matrix&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>
<p>$$<br>
\begin{matrix}<br>
1 &amp; 0 &amp; 0 \\<br>
0 &amp; 1 &amp; 0 \\<br>
0 &amp; 0 &amp; 1 \\<br>
\end{matrix}<br>
$$</p>
<h3 id="矩阵边框"><a class="header-anchor" href="#矩阵边框"></a>矩阵边框</h3>
<ul>
<li>在起始、结束标记处用下列词替换 <code>matrix</code></li>
<li><code>pmatrix</code> ：小括号边框</li>
<li><code>bmatrix</code> ：中括号边框</li>
<li><code>Bmatrix</code> ：大括号边框</li>
<li><code>vmatrix</code> ：单竖线边框</li>
<li><code>Vmatrix</code> ：双竖线边框</li>
</ul>
<h3 id="省略"><a class="header-anchor" href="#省略"></a>省略</h3>
<ul>
<li>横省略号：<code>\cdots</code></li>
<li>竖省略号：<code>\vdots</code></li>
<li>斜省略号：<code>\ddots</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;bmatrix&#125;</span><br><span class="line">&#123;a_&#123;11&#125;&#125;&amp;&#123;a_&#123;12&#125;&#125;&amp;&#123;\cdots&#125;&amp;&#123;a_&#123;1n&#125;&#125; \\</span><br><span class="line">&#123;a_&#123;21&#125;&#125;&amp;&#123;a_&#123;22&#125;&#125;&amp;&#123;\cdots&#125;&amp;&#123;a_&#123;2n&#125;&#125; \\</span><br><span class="line">&#123;\vdots&#125;&amp;&#123;\vdots&#125;&amp;&#123;\ddots&#125;&amp;&#123;\vdots&#125; \\</span><br><span class="line">&#123;a_&#123;m1&#125;&#125;&amp;&#123;a_&#123;m2&#125;&#125;&amp;&#123;\cdots&#125;&amp;&#123;a_&#123;mn&#125;&#125; \\</span><br><span class="line">\end&#123;bmatrix&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>
<p>$$<br>
\begin{bmatrix}<br>
{a_{11}}&amp;{a_{12}}&amp;{\cdots}&amp;{a_{1n}} \\<br>
{a_{21}}&amp;{a_{22}}&amp;{\cdots}&amp;{a_{2n}} \\<br>
{\vdots}&amp;{\vdots}&amp;{\ddots}&amp;{\vdots} \\<br>
{a_{m1}}&amp;{a_{m2}}&amp;{\cdots}&amp;{a_{mn}} \\<br>
\end{bmatrix}<br>
$$</p>
<h3 id="方程组"><a class="header-anchor" href="#方程组"></a>方程组</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;cases&#125;</span><br><span class="line">a_1x+b_1y+c_1z=d_1 \\</span><br><span class="line">a_2x+b_2y+c_2z=d_2 \\</span><br><span class="line">a_3x+b_3y+c_3z=d_3 \\</span><br><span class="line">\end&#123;cases&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>
<p>$$<br>
\begin{cases}<br>
a_1x+b_1y+c_1z=d_1 \\<br>
a_2x+b_2y+c_2z=d_2 \\<br>
a_3x+b_3y+c_3z=d_3 \\<br>
\end{cases}<br>
$$</p>
]]></content>
      <categories>
        <category>工具</category>
        <category>日常</category>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown-流程图</title>
    <url>/posts/3540196146.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>Markdown可以使用指定语法绘制流程图、时序图、甘特图等</p>

</blockquote>
<span id="more"></span>
<blockquote>
<p>hexo的next主题Mermaid代码如下,语法与基础语法稍有不同,此篇内容不再讲解:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% mermaid type %&#125;</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>visit <a href="https://github.com/mermaid-js/mermaid">mermaid</a> for more information about <code>type</code>.</li>
<li><code>mermaid</code>开关在<code>next</code>主题配置文件中，由<code>false</code>改为<code>true</code>即可。</li>
</ul>
<h2 id="流程图"><a class="header-anchor" href="#流程图"></a>流程图</h2>
<h3 id="基本语法"><a class="header-anchor" href="#基本语法"></a>基本语法</h3>
<ul>
<li><code>graph</code> 指定流程图方向：<code>graph LR</code> 横向，<code>graph TD</code> 纵向</li>
<li>元素的形状定义:
<ul>
<li><code>id[描述]</code> 以直角矩形绘制</li>
<li><code>id(描述)</code> 以圆角矩形绘制</li>
<li><code>id&#123;描述&#125;</code> 以菱形绘制</li>
<li><code>id&gt;描述]</code> 以不对称矩形绘制</li>
<li><code>id((描述))</code> 以圆形绘制</li>
</ul>
</li>
<li>线条定义
<ul>
<li><code>A--&gt;B</code> 带箭头指向</li>
<li><code>A---B</code> 不带箭头连接</li>
<li><code>A-.-B</code> 虚线连接</li>
<li><code>A-.-&gt;B</code> 虚线指向</li>
<li><code>A==&gt;B</code> 加粗箭头指向</li>
<li><code>A--描述---B</code> 不带箭头指向并在线段中间添加描述</li>
<li><code>A--描述--&gt;B</code> 带描述的箭头指向</li>
<li><code>A-.描述.-&gt;B</code> 带描述的虚线连指向</li>
<li><code>A==描述==&gt;B</code> 带描述的加粗箭头指向</li>
</ul>
</li>
<li>子流程图定义  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">subgraph title</span><br><span class="line">    graph direction</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="示例"><a class="header-anchor" href="#示例"></a>示例</h3>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">​<span class="code">```mermaid</span></span><br><span class="line"><span class="code">graph TD</span></span><br><span class="line"><span class="code">A[Hard] --&gt;|Text| B(Round)</span></span><br><span class="line"><span class="code">B --&gt; C&#123;Decision&#125;</span></span><br><span class="line"><span class="code">C --&gt;|One| D[Result 1]</span></span><br><span class="line"><span class="code">C --&gt;|Two| E[Result 2]</span></span><br><span class="line"><span class="code">​```</span></span><br></pre></td></tr></table></figure>
<ul>
<li>效果如下:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[Hard] --&gt;|Text| B(Round)</span><br><span class="line">B --&gt; C&#123;Decision&#125;</span><br><span class="line">C --&gt;|One| D[Result 1]</span><br><span class="line">C --&gt;|Two| E[Result 2]</span><br></pre></td></tr></table></figure>
<h2 id="时序图"><a class="header-anchor" href="#时序图"></a>时序图</h2>
<h3 id="基本语法-2"><a class="header-anchor" href="#基本语法-2"></a>基本语法</h3>
<ol>
<li><code>Title:标题</code> ：指定时序图的标题</li>
<li><code>Note direction of 对象:描述</code> : 在对象某一侧加入描述，<code>direction</code>可以是<code>right/over/left</code>,对象可以是多个，对象使用<code>,</code>分隔。</li>
<li><code>participant 对象</code> ： 创建一个对象</li>
<li><code>loop...end</code> : 创建一个循环体</li>
<li><code>对象A -&gt; 对象B:描述</code>：绘制A与B之间的对话
<ul>
<li><code>-&gt;</code> ： 实线</li>
<li><code>--&gt;</code> : 虚线</li>
<li><code>-&gt;&gt;</code> : 实线带箭头</li>
<li><code>--&gt;&gt;</code> : 虚线带箭头</li>
</ul>
</li>
</ol>
<h3 id="示例-2"><a class="header-anchor" href="#示例-2"></a>示例</h3>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">​<span class="code">```mermaid</span></span><br><span class="line"><span class="code">sequenceDiagram</span></span><br><span class="line"><span class="code">Title: Example for sequenceDiagram</span></span><br><span class="line"><span class="code">participant a as Alice</span></span><br><span class="line"><span class="code">participant b as John</span></span><br><span class="line"><span class="code">a-&gt;&gt;b: Hello b, how are you?</span></span><br><span class="line"><span class="code">loop Healthcheck</span></span><br><span class="line"><span class="code">    b-&gt;&gt;b: Fight against hypochondria</span></span><br><span class="line"><span class="code">end</span></span><br><span class="line"><span class="code">Note right of b: Rational thoughts!</span></span><br><span class="line"><span class="code">b--&gt;&gt;a: Great!</span></span><br><span class="line"><span class="code">b-&gt;&gt;Bob: How about you?</span></span><br><span class="line"><span class="code">Bob--&gt;&gt;b: Jolly good!</span></span><br><span class="line"><span class="code">​```</span></span><br></pre></td></tr></table></figure>
<ul>
<li>效果如下:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">Title: Example for sequenceDiagram</span><br><span class="line">participant a as Alice</span><br><span class="line">participant b as John</span><br><span class="line">a-&gt;&gt;b: Hello b, how are you?</span><br><span class="line">loop Healthcheck</span><br><span class="line">    b-&gt;&gt;b: Fight against hypochondria</span><br><span class="line">end</span><br><span class="line">Note right of b: Rational thoughts!</span><br><span class="line">b--&gt;&gt;a: Great!</span><br><span class="line">b-&gt;&gt;Bob: How about you?</span><br><span class="line">Bob--&gt;&gt;b: Jolly good!</span><br></pre></td></tr></table></figure>
<h2 id="甘特图"><a class="header-anchor" href="#甘特图"></a>甘特图</h2>
<h3 id="基本语法-3"><a class="header-anchor" href="#基本语法-3"></a>基本语法</h3>
<ul>
<li>使用 mermaid 解析语言，在开头使用关键字 gantt 指明</li>
<li>deteFormat 格式 指明日期的显示格式</li>
<li>title 标题 设置图标的标题</li>
<li>section 描述 定义纵向上的一个环节</li>
<li>定义步骤：每个步骤有两种状态 done（已完成）/ active（执行中）
<ul>
<li>描述: 状态,id,开始日期,结束日期/持续时间</li>
<li>描述: 状态[,id],after id2,持续时间</li>
<li>crit ：可用于标记该步骤需要被修正，将高亮显示</li>
<li>如果不指定具体的开始时间或在某个步骤之后，将默认依次顺序排列</li>
</ul>
</li>
</ul>
<h3 id="示例-3"><a class="header-anchor" href="#示例-3"></a>示例</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">​```mermaid</span><br><span class="line">gantt</span><br><span class="line">dateFormat  YYYY-MM-DD</span><br><span class="line"></span><br><span class="line">        title 软件开发甘特图</span><br><span class="line"></span><br><span class="line">        section 设计</span><br><span class="line">        需求:done,des1, 2019-01-06,2019-01-08</span><br><span class="line">        原型:active,des2, 2019-01-09, 3d</span><br><span class="line">        UI设计:des3, after des2, 5d</span><br><span class="line">        未来任务:des4, after des3, 5d</span><br><span class="line"></span><br><span class="line">        section 开发</span><br><span class="line">        学习准备理解需求:crit, done, 2019-01-06,24h</span><br><span class="line">        设计框架:crit, done, after des2, 2d</span><br><span class="line">        开发:crit, active, 3d</span><br><span class="line">        未来任务:crit, 5d</span><br><span class="line">        休息时间:2d</span><br><span class="line"></span><br><span class="line">        section 测试</span><br><span class="line">        功能测试:active, a1, after des3, 3d</span><br><span class="line">        压力测试:after a1, 20h</span><br><span class="line">        测试报告: 48h</span><br><span class="line">​```</span><br></pre></td></tr></table></figure>
<ul>
<li>效果如下:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gantt</span><br><span class="line">dateFormat  YYYY-MM-DD</span><br><span class="line"></span><br><span class="line">        title 软件开发甘特图</span><br><span class="line"></span><br><span class="line">        section 设计</span><br><span class="line">        需求:done,des1, 2019-01-06,2019-01-08</span><br><span class="line">        原型:active,des2, 2019-01-09, 3d</span><br><span class="line">        UI设计:des3, after des2, 5d</span><br><span class="line">        未来任务:des4, after des3, 5d</span><br><span class="line"></span><br><span class="line">        section 开发</span><br><span class="line">        学习准备理解需求:crit, done, 2019-01-06,24h</span><br><span class="line">        设计框架:crit, done, after des2, 2d</span><br><span class="line">        开发:crit, active, 3d</span><br><span class="line">        未来任务:crit, 5d</span><br><span class="line">        休息时间:2d</span><br><span class="line"></span><br><span class="line">        section 测试</span><br><span class="line">        功能测试:active, a1, after des3, 3d</span><br><span class="line">        压力测试:after a1, 20h</span><br><span class="line">        测试报告: 48h</span><br></pre></td></tr></table></figure>
<h2 id="其他"><a class="header-anchor" href="#其他"></a>其他</h2>
<ul>
<li><code>Hexo</code>的<code>next</code>主题集成了<a href="https://github.com/mermaid-js/mermaid">Mermaid</a>，支持更多的图表类语法。</li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
        <category>日常</category>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka集群搭建</title>
    <url>/posts/4141878322.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>Kafka搭建集群</p>

</blockquote>
<span id="more"></span>
<h1>Kafka集群搭建</h1>
<h2 id="单机版Kafka"><a class="header-anchor" href="#单机版Kafka"></a>单机版Kafka</h2>
<h3 id="安装jdk"><a class="header-anchor" href="#安装jdk"></a>安装jdk</h3>
<h3 id="主机名和Ip映射"><a class="header-anchor" href="#主机名和Ip映射"></a>主机名和Ip映射</h3>
<h4 id="查看主机名"><a class="header-anchor" href="#查看主机名"></a>查看主机名</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看主机名</span></span><br><span class="line">$ cat /etc/sysconfig/network  </span><br><span class="line"></span><br><span class="line"><span class="comment"># Created by anaconda</span></span><br><span class="line">NETWORKING=yes</span><br><span class="line">HOSTNAME=CentOS <span class="comment"># 主机名，如果不存在可以自行vi编写</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="查看IP"><a class="header-anchor" href="#查看IP"></a>查看IP</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dev @ 10 in /opt/soft/zookeeper-3.6.3/conf [13:32:35] </span></span><br><span class="line">$ ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 08:00:27:05:f4:e6 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.0.2.15/24 brd 10.0.2.255 scope global noprefixroute dynamic eth0</span><br><span class="line">       valid_lft 84789sec preferred_lft 84789sec</span><br><span class="line">    inet6 fe80::a00:27ff:fe05:f4e6/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="comment"># 由于虚拟机设置了两个网卡，与主机通讯的网卡为eth1</span></span><br><span class="line">3: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 08:00:27:45:ec:7b brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.33.61/24 brd 192.168.33.255 scope global noprefixroute eth1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::a00:27ff:fe45:ec7b/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default </span><br><span class="line">    link/ether 02:42:7a:66:2a:61 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">       </span><br></pre></td></tr></table></figure>
<h4 id="修改主机名和IP映射"><a class="header-anchor" href="#修改主机名和IP映射"></a>修改主机名和IP映射</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置主机与IP映射</span></span><br><span class="line">sudo vi /etc/host</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加如下一行数据</span></span><br><span class="line"></span><br><span class="line">192.168.33.61 CentOS</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="安装Zookeeper"><a class="header-anchor" href="#安装Zookeeper"></a>安装Zookeeper</h3>
<h3 id="安装Kafka"><a class="header-anchor" href="#安装Kafka"></a>安装Kafka</h3>
<ul>
<li>下载安装包</li>
</ul>
<p>进入 <a href="http://kafka.apache.org/downloads">Apache Kafka</a>下载Kafka安装包</p>
<ul>
<li>解压至指定目录</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxf kafka_2.12-2.8.0.tgz -C /opt/soft</span><br></pre></td></tr></table></figure>
<ul>
<li>修改配置文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入软件目录</span></span><br><span class="line"><span class="built_in">cd</span> /opt/soft/kafka_2.12-2.8.0/</span><br><span class="line"><span class="comment"># 创建数据存储目录</span></span><br><span class="line">mkdir logs </span><br><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line">vi config/server.properties</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件中--&gt; 需要关注的有以下几点</span></span><br><span class="line">broker.id=0 </span><br><span class="line">listeners=PLAINTEXT://CentOS:9092 <span class="comment"># 打开注释，并添加主机名</span></span><br><span class="line">log.dirs=/opt/soft/kafka_2.12-2.8.0/logs <span class="comment"># kafka存储数据目录</span></span><br><span class="line">num.partitions=1 <span class="comment"># topic的分区数</span></span><br><span class="line">zookeeper.connect=CentOS:2181 <span class="comment"># 连接的Zookeeper配置</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>启动Kafka</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/kafka-server-start.sh -daemon config/server.properties</span><br></pre></td></tr></table></figure>
<ul>
<li>验证状态</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dev @ 10 in /opt/soft/kafka_2.12-2.8.0 [14:02:00] </span></span><br><span class="line">$ jps</span><br><span class="line">2723 Kafka</span><br><span class="line">1972 QuorumPeerMain</span><br><span class="line">2751 Jps</span><br><span class="line"></span><br><span class="line"><span class="comment"># dev @ 10 in /opt/soft/kafka_2.12-2.8.0 [14:02:03] </span></span><br><span class="line">$ <span class="built_in">cd</span> logs </span><br><span class="line"></span><br><span class="line"><span class="comment"># dev @ 10 in /opt/soft/kafka_2.12-2.8.0/logs [14:02:12] </span></span><br><span class="line">$ ls</span><br><span class="line">controller.log        kafka-request.log             kafkaServer.out  server.log</span><br><span class="line">kafka-authorizer.log  kafkaServer-gc.log.0.current  log-cleaner.log  state-change.log</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>关闭Kafka</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/kafka-server-stop.sh</span><br></pre></td></tr></table></figure>
<h3 id="Kafka操作API"><a class="header-anchor" href="#Kafka操作API"></a>Kafka操作API</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看topic命令的帮助文档</span></span><br><span class="line">./bin/kafka-topics.sh --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 Topic</span></span><br><span class="line">./bin/kafka-topics.sh --bootstrap-server CentOS:9092 --create --topic topic01 --partitions 3 --replication-factor 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 订阅 Topic</span></span><br><span class="line">./bin/kafka-console-consumer.sh --bootstrap-server CentOS:9092 --topic topic01 --group group1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送消息</span></span><br><span class="line">./bin/kafka-console-producer.sh --broker-list CentOS:9092 --topic topic01</span><br></pre></td></tr></table></figure>
<ul>
<li>订阅及发送消息效果如图</li>
</ul>
<img src="/posts/4141878322/image-20210727221750310.png" class="" title="image-20210727221750310">
<ul>
<li>同组消息均分以及组间广播可以启动多个消费者进行测试</li>
</ul>
<h2 id="集群版Kafka"><a class="header-anchor" href="#集群版Kafka"></a>集群版Kafka</h2>
<p>准备了三个虚拟机服务器，在单机版Kafka的基础上进行修改</p>
<table>
<thead>
<tr>
<th>IP</th>
<th>主机名</th>
</tr>
</thead>
<tbody>
<tr>
<td>192.168.33.61</td>
<td>KAFKA1</td>
</tr>
<tr>
<td>192.168.33.62</td>
<td>KAFKA2</td>
</tr>
<tr>
<td>192.168.33.63</td>
<td>KAFKA3</td>
</tr>
</tbody>
</table>
<h3 id="主机名和IP映射"><a class="header-anchor" href="#主机名和IP映射"></a>主机名和IP映射</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/hosts</span><br><span class="line"></span><br><span class="line">192.168.33.61 KAFKA1</span><br><span class="line">192.168.33.62 KAFKA2</span><br><span class="line">192.168.33.63 KAFKA3</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="时钟同步"><a class="header-anchor" href="#时钟同步"></a>时钟同步</h3>
<ul>
<li>安装ntp服务</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install -y ntp</span><br></pre></td></tr></table></figure>
<ul>
<li>时钟同步</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ntpdate ntp1.aliyun.com</span><br><span class="line"></span><br><span class="line">sudo clock -w</span><br></pre></td></tr></table></figure>
<h3 id="Zookeeper启动"><a class="header-anchor" href="#Zookeeper启动"></a>Zookeeper启动</h3>
<ul>
<li>修改配置文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/soft/zookeeper-3.6.3</span><br><span class="line">vi conf/zoo.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加如下内容</span></span><br><span class="line">server.1=KAFKA1:2888:3888</span><br><span class="line">server.2=KAFKA2:2888:3888</span><br><span class="line">server.3=KAFKA3:2888:3888</span><br></pre></td></tr></table></figure>
<ul>
<li>配置zookeeper的节点id</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># KAFKA1机器上配置的server.&#123;id&#125; 为1，同理2,3...</span></span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /opt/soft/zookeeper-3.6.3/data/myid</span><br></pre></td></tr></table></figure>
<ul>
<li>启动 zookeeper</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./bin/zkServer.sh start zoo.cfg</span><br></pre></td></tr></table></figure>
<h3 id="Kafka启动"><a class="header-anchor" href="#Kafka启动"></a>Kafka启动</h3>
<ul>
<li>修改配置文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/soft/kafka_2.12-2.8.0</span><br><span class="line">vi config/server.properties</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改broker.id为不同的值 0,1,2...</span></span><br><span class="line">broker.id=0</span><br><span class="line"><span class="comment"># Kafka监听信息,主机名对应修改</span></span><br><span class="line">listeners=PLAINTEXT://KAFKA1:9092</span><br><span class="line"><span class="comment"># 修改zookeeper集群连接信息</span></span><br><span class="line">zookeeper.connect=KAFKA1:2181,KAKFA2:2181,KAFKA3:2181</span><br></pre></td></tr></table></figure>
<ul>
<li>清空单机版kafka的数据信息</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/soft/kafka_2.12-2.8.0/logs</span><br><span class="line">rm * -rf</span><br></pre></td></tr></table></figure>
<ul>
<li>启动Kafka</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/kafka-server-start.sh -daemon config/server.properties</span><br></pre></td></tr></table></figure>
<h3 id="测试"><a class="header-anchor" href="#测试"></a>测试</h3>
<ul>
<li>创建topic</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/kafka-topics.sh --bootstrap-server KAFKA1:9092,KAFKA2:9092,KAFKA3:9092 --create --topic topic02 --partitions 3 --replication-factor 2</span><br></pre></td></tr></table></figure>
<ul>
<li>查看topic</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/kafka-topics.sh --bootstrap-server KAFKA1:9092,KAFKA2:9092,KAFKA3:9092 --list</span><br></pre></td></tr></table></figure>
<ul>
<li>查看topic详情</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./bin/kafka-topics.sh --bootstrap-server KAFKA1:9092,KAFKA2:9092,KAFKA3:9092 --describe --topic topic02</span><br><span class="line">Topic: topic02	TopicId: 5r2Rk-H0Q0qBfemPWKy8eA	PartitionCount: 3	ReplicationFactor: 2	Configs: segment.bytes=1073741824</span><br><span class="line">	Topic: topic02	Partition: 0	Leader: 0	Replicas: 0,2	Isr: 0,2</span><br><span class="line">	Topic: topic02	Partition: 1	Leader: 2	Replicas: 2,1	Isr: 1,2</span><br><span class="line">	Topic: topic02	Partition: 2	Leader: 1	Replicas: 1,0	Isr: 1,0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>修改topic</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分区数只能由小改到大，不能减少</span></span><br><span class="line">./bin/kafka-topics.sh --bootstrap-server KAFKA1:9092,KAFKA2:9092,KAFKA3:9092 --alter --topic topic02 --partitions 4</span><br></pre></td></tr></table></figure>
<ul>
<li>删除topic</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/kafka-topics.sh --bootstrap-server KAFKA1:9092,KAFKA2:9092,KAFKA3:9092 --delete --topic topic01</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>生产与订阅自行测试即可~</p>
</li>
<li>
<p>消费组</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bin/kafka-consumer-groups.sh --bootstrap-server KAFKA1:9092,KAFKA2:9092,KAFKA3:9092 --list</span><br><span class="line">./bin/kafka-consumer-groups.sh --bootstrap-server KAFKA1:9092,KAFKA2:9092,KAFKA3:9092 --describe --group &#123;groupName&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL主备</title>
    <url>/posts/2814237590.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>MySQL的主从一般用于读写分离，主要是为了提高数据库的读写性能，提高并发能力，本章介绍如何通过Docker搭建MySQL主从结构</p>

</blockquote>
<span id="more"></span>
<h1>MySQL主备</h1>
<h2 id="环境准备"><a class="header-anchor" href="#环境准备"></a>环境准备</h2>
<p>Docker运行环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@10 ➜ ~  docker version</span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           20.10.7</span><br><span class="line"> API version:       1.41</span><br><span class="line"> Go version:        go1.13.15</span><br><span class="line"> Git commit:        f0df350</span><br><span class="line"> Built:             Wed Jun  2 11:58:10 2021</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"> Experimental:      <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          20.10.7</span><br><span class="line">  API version:      1.41 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.13.15</span><br><span class="line">  Git commit:       b0f5bc3</span><br><span class="line">  Built:            Wed Jun  2 11:56:35 2021</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.4.6</span><br><span class="line">  GitCommit:        d71fcd7d8303cbf684402823e425e9dd2e99285d</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.0.0-rc95</span><br><span class="line">  GitCommit:        b9ee9c6314599f1b4a7f497e1f1f856fe433d3b7</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.19.0</span><br><span class="line">  GitCommit:        de40ad0</span><br></pre></td></tr></table></figure>
<h2 id="主从集群搭建"><a class="header-anchor" href="#主从集群搭建"></a>主从集群搭建</h2>
<p>不了解如何使用Docker运行MySQL的可以参考<a href="./728095789">Docker安装MySQL</a>来完成MySQL的安装。</p>
<h3 id="服务器"><a class="header-anchor" href="#服务器"></a>服务器</h3>
<table>
<thead>
<tr>
<th>角色</th>
<th>服务器IP</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>master</td>
<td>192.168.33.51</td>
<td>mysql_ms_master</td>
</tr>
<tr>
<td>slave01</td>
<td>192.168.33.52</td>
<td>mysql_ms_slave1</td>
</tr>
<tr>
<td>slave02</td>
<td>192.168.33.53</td>
<td>mysql_ms_slave2</td>
</tr>
</tbody>
</table>
<ul>
<li>使用虚拟机多服务器环境，如图所示</li>
</ul>
<img src="/posts/2814237590/image-20210708183516045.png" class="" title="image-20210708183516045">
<h3 id="主库"><a class="header-anchor" href="#主库"></a>主库</h3>
<ul>
<li>配置文件内新增如下配置：</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="meta">server-id</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">log-bin</span>=<span class="string">master-bin</span></span><br><span class="line"><span class="meta">log-bin-index</span>=<span class="string">master-bin.index</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用Docker运行容器</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 3307:3306 --name mysql_ms_master \</span><br><span class="line">--privileged=<span class="literal">true</span> \</span><br><span class="line">-v /home/dev/data/mysql/ms/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /home/dev/data/mysql/ms/logs:/logs \</span><br><span class="line">-v /home/dev/data/mysql/ms/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=master123 -d mysql:5.7</span><br></pre></td></tr></table></figure>
<ul>
<li>启动主数据库后，增加用户用于从库进行复制</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 进入容器内部</span><br><span class="line">docker exec -it mysql_ms_master /bin/bash</span><br><span class="line"></span><br><span class="line"># 使用mysql命令行工具</span><br><span class="line">mysql -uroot -pmaster123</span><br><span class="line"></span><br><span class="line"># 创建用户并分配权限</span><br><span class="line">mysql&gt; CREATE USER &#x27;slave&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;slave&#x27;; #创建用户</span><br><span class="line">mysql&gt; GRANT REPLICATION SLAVE ON *.* TO &#x27;slave&#x27;@&#x27;%&#x27;; #分配权限</span><br><span class="line">mysql&gt; flush privileges;   #刷新权限</span><br></pre></td></tr></table></figure>
<ul>
<li>查看主库复制状态</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; show master status;</span><br><span class="line">+-------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File              | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+-------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| master-bin.000003 |      749 |              |                  |                   |</span><br><span class="line">+-------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure>
<ul>
<li>这里记录File以及Position，后续建立主从时需要这两个值</li>
</ul>
<h3 id="从库"><a class="header-anchor" href="#从库"></a>从库</h3>
<ul>
<li>配置文件内新增以下配置（<strong>注：slave1和slave2需要配置为不同的server-id</strong>）</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="meta">server-id</span>=<span class="string">2</span></span><br><span class="line"><span class="meta">relay-log-index</span>=<span class="string">slave-relay-bin.index</span></span><br><span class="line"><span class="meta">relay-log</span>=<span class="string">slave-relay-bin</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用Docker运行容器</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 3307:3306 --name mysql_ms_slave1  \</span><br><span class="line">--privileged=<span class="literal">true</span> \</span><br><span class="line">-v /home/dev/data/mysql/ms/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /home/dev/data/mysql/ms/logs:/logs \</span><br><span class="line">-v /home/dev/data/mysql/ms/data:/var/lib/mysql  \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=slave123 \</span><br><span class="line">-d mysql:5.7</span><br><span class="line"></span><br><span class="line">docker run -p 3307:3306 --name mysql_ms_slave2  \</span><br><span class="line">--privileged=<span class="literal">true</span> \</span><br><span class="line">-v /home/dev/data/mysql/ms/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /home/dev/data/mysql/ms/logs:/logs \</span><br><span class="line">-v /home/dev/data/mysql/ms/data:/var/lib/mysql  \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=slave123 \</span><br><span class="line">-d mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># --privileged=true ：指定当前容器具有宿主机的root权限</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>连接主库并开启复制</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入容器内部</span></span><br><span class="line">docker <span class="built_in">exec</span> -it mysql_ms_slave1 /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用mysql命令行工具</span></span><br><span class="line">mysql -uroot -pslave123</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置主库信息</span></span><br><span class="line">mysql&gt; change master to master_host=<span class="string">&#x27;192.168.33.51&#x27;</span>, master_port=3307, master_user=<span class="string">&#x27;slave&#x27;</span>, master_password=<span class="string">&#x27;slave&#x27;</span>, master_log_file=<span class="string">&#x27;master-bin.000003&#x27;</span>, master_log_pos=749, master_connect_retry=30;</span><br><span class="line">Query OK, 0 rows affected, 2 warnings (0.02 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启复制</span></span><br><span class="line">mysql&gt; start slave;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看从库状态</span></span><br><span class="line">mysql&gt; show slave status\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting <span class="keyword">for</span> master to send event</span><br><span class="line">                  Master_Host: 192.168.33.10</span><br><span class="line">                  Master_User: slave</span><br><span class="line">                  Master_Port: 3307</span><br><span class="line">                Connect_Retry: 30</span><br><span class="line">              Master_Log_File: master-bin.000003</span><br><span class="line">          Read_Master_Log_Pos: 749</span><br><span class="line">               Relay_Log_File: slave-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 321</span><br><span class="line">        Relay_Master_Log_File: master-bin.000003</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB: </span><br><span class="line">          Replicate_Ignore_DB: </span><br><span class="line">           Replicate_Do_Table: </span><br><span class="line">       Replicate_Ignore_Table: </span><br><span class="line">      Replicate_Wild_Do_Table: </span><br><span class="line">  Replicate_Wild_Ignore_Table: </span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error: </span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 749</span><br><span class="line">              Relay_Log_Space: 528</span><br><span class="line">              Until_Condition: None</span><br><span class="line">               Until_Log_File: </span><br><span class="line">                Until_Log_Pos: 0</span><br><span class="line">           Master_SSL_Allowed: No</span><br><span class="line">           Master_SSL_CA_File: </span><br><span class="line">           Master_SSL_CA_Path: </span><br><span class="line">              Master_SSL_Cert: </span><br><span class="line">            Master_SSL_Cipher: </span><br><span class="line">               Master_SSL_Key: </span><br><span class="line">        Seconds_Behind_Master: 0</span><br><span class="line">Master_SSL_Verify_Server_Cert: No</span><br><span class="line">                Last_IO_Errno: 0</span><br><span class="line">                Last_IO_Error: </span><br><span class="line">               Last_SQL_Errno: 0</span><br><span class="line">               Last_SQL_Error: </span><br><span class="line">  Replicate_Ignore_Server_Ids: </span><br><span class="line">             Master_Server_Id: 1</span><br><span class="line">                  Master_UUID: ea044309-df3d-11eb-8a4b-0242ac110004</span><br><span class="line">             Master_Info_File: /var/lib/mysql/master.info</span><br><span class="line">                    SQL_Delay: 0</span><br><span class="line">          SQL_Remaining_Delay: NULL</span><br><span class="line">      Slave_SQL_Running_State: Slave has <span class="built_in">read</span> all relay <span class="built_in">log</span>; waiting <span class="keyword">for</span> more updates</span><br><span class="line">           Master_Retry_Count: 86400</span><br><span class="line">                  Master_Bind: </span><br><span class="line">      Last_IO_Error_Timestamp: </span><br><span class="line">     Last_SQL_Error_Timestamp: </span><br><span class="line">               Master_SSL_Crl: </span><br><span class="line">           Master_SSL_Crlpath: </span><br><span class="line">           Retrieved_Gtid_Set: </span><br><span class="line">            Executed_Gtid_Set: </span><br><span class="line">                Auto_Position: 0</span><br><span class="line">         Replicate_Rewrite_DB: </span><br><span class="line">                 Channel_Name: </span><br><span class="line">           Master_TLS_Version: </span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR: </span><br><span class="line">No query specified</span><br><span class="line"></span><br><span class="line"><span class="comment"># 看到以下两个状态为Yes表示复制正常进行</span></span><br><span class="line">    <span class="comment"># Slave_IO_Running: Yes</span></span><br><span class="line">    <span class="comment"># Slave_SQL_Running: Yes</span></span><br></pre></td></tr></table></figure>
<ul>
<li>同理设置mysql_slave02的复制</li>
</ul>
<h2 id="测试主从服务"><a class="header-anchor" href="#测试主从服务"></a>测试主从服务</h2>
<p>使用Navicat分别连接三个服务器，在主服务器上创建测试数据库、新增表t_user并增加一行数据。查看从服务器，主从功能正常。</p>
<img src="/posts/2814237590/image-20210708004310863.png" class="" title="image-20210708004310863">
<h2 id="小结"><a class="header-anchor" href="#小结"></a>小结</h2>
<p>至此，MySQL的主从结构已经搭建完成，后续完成读写分离应用方的创建。</p>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx基础</title>
    <url>/posts/2814237589.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>Nginx (“engine x”) 是一个高性能的 <strong>HTTP</strong> 和 <strong>反向代理</strong> 服务器，也是一个 IMAP/POP3/SMTP 代理服务器。</p>

</blockquote>
<span id="more"></span>
<h1>Nginx基础</h1>
<h2 id="Nginx是什么"><a class="header-anchor" href="#Nginx是什么"></a>Nginx是什么</h2>
<p>Nginx (“engine x”) 是一个高性能的 <strong>HTTP</strong> 和 <strong>反向代理</strong> 服务器，也是一个 IMAP/POP3/SMTP 代理服务器。</p>
<p>Nginx的功能：</p>
<ul>
<li>Nginx提供基本的HTTP服务，可以作为HTTP代理服务器和反向代理服务器，支持通过缓存加速访问，可以完成简单的负载均衡和容错，支持包过滤功能，支持SSL等</li>
<li>Nginx提供高级HTTP服务，可以进行自定义配置，支持虚拟主机，支持URL重定向，支持网络监控，支持流媒体传输等</li>
<li>Nginx可以作为邮件代理服务器，它支持IMAP/POP3代理服务功能，支持内部SMTP代理服务功能。</li>
<li>更多可参考官方网站：<a href="https://nginx.org/en/">https://nginx.org/en/</a></li>
</ul>
<h2 id="安装"><a class="header-anchor" href="#安装"></a>安装</h2>
<blockquote>
<p>各系统安装参考<a href="https://nginx.org/en/linux_packages.html">官方文档</a>进行安装。本文以CentOS为例</p>
</blockquote>
<ul>
<li>安装所需工具</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install yum-utils</span><br></pre></td></tr></table></figure>
<ul>
<li>设置yum软件源信息</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建源文件</span></span><br><span class="line">sudo touch /etc/yum.repos.d/nginx.repo</span><br><span class="line"><span class="comment"># 编辑文件</span></span><br><span class="line">sudo vi /etc/yum.repos.d/nginx.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 粘贴以下内容并保存</span></span><br><span class="line">[nginx-stable]</span><br><span class="line">name=nginx stable repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[nginx-mainline]</span><br><span class="line">name=nginx mainline repo</span><br><span class="line">baseurl=http://nginx.org/packages/mainline/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果想要安装主线版本的Nginx，使用如下命令</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager --<span class="built_in">enable</span> nginx-mainline</span><br></pre></td></tr></table></figure>
<ul>
<li>查看Nginx版本</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum list nginx --showduplicates | sort -r </span><br></pre></td></tr></table></figure>
<ul>
<li>安装Nginx</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sudo yum install nginx 默认安装最新版本</span></span><br><span class="line">sudo yum install nginx-1.18.0-2.el7.ngx <span class="comment"># 安装指定版本Nginx</span></span><br></pre></td></tr></table></figure>
<h2 id="基础命令"><a class="header-anchor" href="#基础命令"></a>基础命令</h2>
<blockquote>
<p>官方命令介绍页面：<a href="http://nginx.org/en/docs/switches.html">官网链接</a></p>
</blockquote>
<ul>
<li><code>-? | -h</code>，打印命令行帮助文档</li>
<li><code>-c file</code>，使用指定配置文件启动路径，默认值为<code>/etc/nginx/nginx.conf</code></li>
<li><code>-e file</code>，使用替代错误日志<code>*file*</code>来存储日志而不是默认文件 (1.19.5)。特殊值<code>stderr</code>选择标准错误文件</li>
<li><code>-g directives</code>，配置全局指令，如</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx -g <span class="string">&quot;pid /var/run/nginx.pid; worker_processes `sysctl -n hw.ncpu`;&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>-p prefix</code>， 设置 nginx 路径前缀，即保存服务器文件的目录（默认值为<code>/etc/nginx/</code>）</p>
</li>
<li>
<p><code>-q</code>，测试配置文件期间禁止打印非Error信息</p>
</li>
<li>
<p><code>-s single</code>，发送<code>single</code>信号到到Nginx主进程，<code>single</code>选项如下</p>
<ul>
<li><code>stop</code>，快速关闭程序</li>
<li><code>quit</code>，平滑关闭程序</li>
<li><code>reload</code>，重载配置文件，新启动一个主进程，平滑的关闭旧的工作进程</li>
<li><code>reopen</code>，重新打开日志文件</li>
</ul>
</li>
<li>
<p><code>-t</code>，测试配置文件，Nginx会检查配置文件的语法是否正确，然后尝试打开配置中引入的文件</p>
</li>
<li>
<p><code>-T</code>，与 相同<code>-t</code>，但另外将配置文件转储到标准输出 (1.9.2)</p>
</li>
<li>
<p><code>-v</code>，打印 nginx 版本</p>
</li>
<li>
<p><code>-V</code>，打印 nginx 版本、编译器版本和配置参数</p>
</li>
</ul>
<h2 id="基础配置"><a class="header-anchor" href="#基础配置"></a>基础配置</h2>
<blockquote>
<p>首先查看Nginx默认配置文件，如下</p>
</blockquote>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用户</span></span><br><span class="line"><span class="attribute">user</span>  nginx; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 工作进程数</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误日志路径及日志级别</span></span><br><span class="line"><span class="attribute">error_log</span>  /var/log/nginx/error.log <span class="literal">warn</span>; </span><br><span class="line"><span class="comment"># pid文件存储路径</span></span><br><span class="line"><span class="attribute">pid</span>        /var/run/nginx.pid; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="comment"># 最大连接数</span></span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="comment"># 引入Mime类型定义</span></span><br><span class="line">    <span class="attribute">include</span>       /etc/nginx/mime.types; </span><br><span class="line">    <span class="comment"># 默认类型</span></span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 日志格式</span></span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line">	<span class="comment"># 访问日志 日志级别</span></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/access.log  main; </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 是否启用sendfile</span></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 客户端保持链接最大时间</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line">	</span><br><span class="line">    <span class="comment"># 是否开启压缩功能</span></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置静态资源</span></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将服务器错误页面重定向到静态文件50x.html</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Nginx配置模块</p>
<ol>
<li><strong>全局块</strong>：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。</li>
<li><strong>events块</strong>：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。</li>
<li><strong>http块</strong>：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。</li>
<li><strong>server块</strong>：配置虚拟主机的相关参数，一个http中可以有多个server。</li>
<li><strong>location块</strong>：配置请求的路由，以及各种页面的处理情况。</li>
</ol>
<h2 id="基础功能"><a class="header-anchor" href="#基础功能"></a>基础功能</h2>
<blockquote>
<p>对常见功能做一个总结</p>
</blockquote>
<h3 id="动静分离"><a class="header-anchor" href="#动静分离"></a>动静分离</h3>
<p>将Nginx作为一个静态资源服务器来处理。演示部分只截取<code>http</code>块主要配置，其他配置按照场景自行配置。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 配置上游服务器</span></span><br><span class="line">    <span class="attribute">upstream</span> mall &#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.33.10:8000</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.33.11:8000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="comment"># 配置监听</span></span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">listen</span>  [::]:<span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  mall.com;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置静态资源</span></span><br><span class="line">        <span class="attribute">location</span> /static/ &#123;</span><br><span class="line">            <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 动态资源转发</span></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host $host; <span class="comment"># 转发时携带Host请求头</span></span><br><span class="line">            <span class="attribute">proxy_pass</span> http://mall;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>访问<code>mall.com/static</code>路径下的资源时，会请求<code>/usr/share/nginx/html</code>下的对应路径的静态资源</li>
<li>访问其他路径时，会转发到上游服务<code>192.168.33.10\192.168.33.11</code>的<code>8000</code>端口进行动态资源的请求</li>
<li>使用上述配置也完成了一个基于名称(<a href="http://mall.com">mall.com</a>)的虚拟主机的创建，也可以指定IP进行创建基于IP的虚拟主机</li>
</ul>
<h3 id="反向代理"><a class="header-anchor" href="#反向代理"></a>反向代理</h3>
<h4 id="反向代理的作用"><a class="header-anchor" href="#反向代理的作用"></a>反向代理的作用</h4>
<ul>
<li>保障应用服务器的安全，加了一层代理</li>
<li>实现负载均衡</li>
<li>跨域</li>
</ul>
<h4 id="配置"><a class="header-anchor" href="#配置"></a>配置</h4>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 配置上游服务器</span></span><br><span class="line">    <span class="attribute">upstream</span> mall &#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.33.10:8000</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.33.11:8000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="comment"># 配置监听</span></span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">listen</span>  [::]:<span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  mall.com;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 反向代理</span></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host $host; <span class="comment"># 转发时携带Host请求头</span></span><br><span class="line">            <span class="attribute">proxy_pass</span> http://mall;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="负载均衡"><a class="header-anchor" href="#负载均衡"></a>负载均衡</h3>
<h4 id="轮训"><a class="header-anchor" href="#轮训"></a>轮训</h4>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> mysvr &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.33.10:8091</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.33.11:8091</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="热备"><a class="header-anchor" href="#热备"></a>热备</h4>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> mysvr &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.33.10:8091</span>;  <span class="comment"># 主节点发生异常时，请求切换到备份节点</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.33.11:8091</span> bak;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="权重"><a class="header-anchor" href="#权重"></a>权重</h4>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> mysvr &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.33.10:8091</span> weight=<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.33.11:8091</span> weight=<span class="number">3</span>; <span class="comment"># 默认权重为1，轮询即权重都为1情况</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="最少连接-可加权"><a class="header-anchor" href="#最少连接-可加权"></a>最少连接(可加权)</h4>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> mysvr &#123;</span><br><span class="line">    least_conn;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.33.10:8091</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.33.11:8091</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="IP哈希"><a class="header-anchor" href="#IP哈希"></a>IP哈希</h4>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> mysvr &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.33.10:8091</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.33.11:8091</span>;</span><br><span class="line">    ip_hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="普通hash"><a class="header-anchor" href="#普通hash"></a>普通hash</h4>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> mysvr &#123;</span><br><span class="line">    <span class="attribute">hash</span> $request_uri;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.33.10:8091</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.33.11:8091</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="负载均衡的其他参数"><a class="header-anchor" href="#负载均衡的其他参数"></a>负载均衡的其他参数</h4>
<ul>
<li>
<p>down，表示当前的server暂时不参与负载均衡。</p>
</li>
<li>
<p>backup，预留的备份机器。当其他所有的非backup机器出现故障或者忙的时候，才会请求backup机器，因此这台机器的压力最轻。</p>
</li>
<li>
<p>max_fails，允许请求失败的次数，默认为1。当超过最大次数时，返回proxy_next_upstream 模块定义的错误。</p>
</li>
<li>
<p>fail_timeout，在经历了max_fails次失败后，暂停服务的时间。max_fails可以和fail_timeout一起使用。</p>
</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> mysvr &#123; </span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.107:8091</span> weight=<span class="number">2</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.0.102:8091</span> weight=<span class="number">1</span> max_fails=<span class="number">2</span> fail_timeout=<span class="number">1</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>一篇内容很难将Nginx里的内容全都覆盖到，最主要的是我现在也不会，后续按需分析Nginx其他部分如缓存、压缩、Rewrite等功能 ~~~</p>
</blockquote>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis集群搭建(Redis3.0版)</title>
    <url>/posts/778231993.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>Redis Cluster是Redis的分布式解决方案，在3.0版本正式推出，有效地解决了Redis分布式方面的需求。在Redis5.0中redis-trib.rb的功能被集成到了redis-cli中。在此之前，需要使用redis-cli客户端或者redis-trib.rb进行redis集群的搭建.</p>
<p><strong>注：使用redis-trib.rb方式需要有Ruby运行环境</strong></p>

</blockquote>
<span id="more"></span>
<h1>Redis集群搭建(Redis3.0版)</h1>
<h2 id="准备节点"><a class="header-anchor" href="#准备节点"></a>准备节点</h2>
<p>新建reids配置文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /home/dev/data/redis</span><br><span class="line"><span class="built_in">cd</span> /home/dev/data/redis</span><br><span class="line">mkdir conf data</span><br><span class="line">touch redis.conf</span><br></pre></td></tr></table></figure>
<ul>
<li>redis.conf文件为官网提供配置文件，用于参考。</li>
</ul>
<p>在<code>conf</code>目录下新建配置文件，名称采用<code>redis-&#123;port&#125;.conf</code>格式。配置如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#节点端口 </span></span><br><span class="line"><span class="attr">port</span> <span class="string">6379 </span></span><br><span class="line"><span class="comment"># 开启集群模式 </span></span><br><span class="line"><span class="meta">cluster-enabled</span> <span class="string">yes </span></span><br><span class="line"><span class="comment"># 节点超时时间，单位毫秒 </span></span><br><span class="line"><span class="meta">cluster-node-timeout</span> <span class="string">15000 </span></span><br><span class="line"><span class="comment"># 集群内部配置文件 </span></span><br><span class="line"><span class="meta">cluster-config-file</span> <span class="string">&quot;nodes-6379.conf&quot;</span></span><br><span class="line"><span class="comment"># 指定本地数据库文件名，默认值为dump.rdb</span></span><br><span class="line"><span class="attr">dbfilename</span> <span class="string">dump-6379.rdb</span></span><br><span class="line"><span class="comment"># dump 文件保存目录</span></span><br><span class="line"><span class="attr">dir</span> <span class="string">/home/dev/data/redis/data</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>配置后的文件目录如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├── redis</span><br><span class="line">    ├── conf</span><br><span class="line">    │   ├── redis-6379.conf</span><br><span class="line">    │   ├── redis-6380.conf</span><br><span class="line">    │   ├── redis-6381.conf</span><br><span class="line">    │   ├── redis-6382.conf</span><br><span class="line">    │   ├── redis-6383.conf</span><br><span class="line">    │   └── redis-6384.conf</span><br><span class="line">    ├── data</span><br><span class="line">    └── redis.conf</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="启动"><a class="header-anchor" href="#启动"></a>启动</h2>
<p>进入到<code>conf</code>目录依次执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server redis-6379.conf &amp;</span><br><span class="line">redis-server redis-6380.conf &amp;</span><br><span class="line">redis-server redis-6381.conf &amp;</span><br><span class="line">redis-server redis-6382.conf &amp;</span><br><span class="line">redis-server redis-6383.conf &amp;</span><br><span class="line">redis-server redis-6384.conf &amp;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>此处可能遇到报错<code> Server can't set maximum open files to 10032 because of OS error: Operation not permitted.</code>。使用<code>ulimit -n</code>查看系统限制文件句柄数。处理方法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /etc/security/limits.conf 修改后重启</span></span><br><span class="line">* soft nofile 65535</span><br><span class="line">* hard nofile 65535</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>连接到集群内节点查看集群状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[dev@localhost data]$ redis-cli</span><br><span class="line">127.0.0.1:6379&gt; cluster info</span><br><span class="line">cluster_state:fail</span><br><span class="line">cluster_slots_assigned:0</span><br><span class="line">cluster_slots_ok:0</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:1</span><br><span class="line">cluster_size:0</span><br><span class="line">cluster_current_epoch:0</span><br><span class="line">cluster_my_epoch:0</span><br><span class="line">cluster_stats_messages_sent:0</span><br><span class="line">cluster_stats_messages_received:0</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="搭建集群"><a class="header-anchor" href="#搭建集群"></a>搭建集群</h2>
<h3 id="节点握手"><a class="header-anchor" href="#节点握手"></a>节点握手</h3>
<p>使用<code>cluster meet &#123;host&#125; &#123;port&#125;</code>加入6380、6381后的集群状态。</p>
<blockquote>
<p>建议新开一个会话用于操作，由于之前启动使用&amp;方式，使用当前会话会因为输出日志影响阅读效果。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; cluster meet 127.0.0.1 6381</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; 2077:M 29 May 2021 07:19:54.654 <span class="comment"># IP address for this node updated to 127.0.0.1</span></span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line">127.0.0.1:6379&gt; cluster info</span><br><span class="line">cluster_state:fail</span><br><span class="line">cluster_slots_assigned:0</span><br><span class="line">cluster_slots_ok:0</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:3</span><br><span class="line">cluster_size:0</span><br><span class="line">cluster_current_epoch:2</span><br><span class="line">cluster_my_epoch:2</span><br><span class="line">cluster_stats_messages_ping_sent:30</span><br><span class="line">cluster_stats_messages_pong_sent:32</span><br><span class="line">cluster_stats_messages_meet_sent:2</span><br><span class="line">cluster_stats_messages_sent:64</span><br><span class="line">cluster_stats_messages_ping_received:32</span><br><span class="line">cluster_stats_messages_pong_received:32</span><br><span class="line">cluster_stats_messages_received:64</span><br><span class="line">127.0.0.1:6379&gt; cluster nodes</span><br><span class="line">118cc85c73c3f9bee9653d2cbca7881dbbd7957f 127.0.0.1:6380@16380 master - 0 1622272870594 1 connected</span><br><span class="line">7366db1f582ad74dadda9691368959285f9e4255 127.0.0.1:6379@16379 myself,master - 0 1622272868000 2 connected</span><br><span class="line">bce5759afdbbee47ad417b683ea43a5f5bbfade7 127.0.0.1:6381@16381 master - 0 1622272871601 0 connected</span><br></pre></td></tr></table></figure>
<h3 id="分配槽"><a class="header-anchor" href="#分配槽"></a>分配槽</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli -h 127.0.0.1 -p 6379 cluster addslots &#123;0..5461&#125;</span><br><span class="line">redis-cli -h 127.0.0.1 -p 6380 cluster addslots &#123;5462..10922&#125;</span><br><span class="line">redis-cli -h 127.0.0.1 -p 6381 cluster addslots &#123;10923..16383&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>分配槽后进入到使用客户端查看集群状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[dev@localhost data]$ redis-cli</span><br><span class="line">127.0.0.1:6379&gt; cluster info</span><br><span class="line">cluster_state:ok</span><br><span class="line">cluster_slots_assigned:16384</span><br><span class="line">cluster_slots_ok:16384</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:6</span><br><span class="line">cluster_size:3</span><br><span class="line">cluster_current_epoch:5</span><br><span class="line">cluster_my_epoch:2</span><br><span class="line">cluster_stats_messages_ping_sent:1457</span><br><span class="line">cluster_stats_messages_pong_sent:1458</span><br><span class="line">cluster_stats_messages_meet_sent:5</span><br><span class="line">cluster_stats_messages_sent:2920</span><br><span class="line">cluster_stats_messages_ping_received:1458</span><br><span class="line">cluster_stats_messages_pong_received:1462</span><br><span class="line">cluster_stats_messages_received:2920</span><br><span class="line">127.0.0.1:6379&gt; cluster nodes</span><br><span class="line">2b52cbf5867de9a88b97510d7cc584f7aa37bc88 127.0.0.1:6384@16384 master - 0 1622274276210 5 connected</span><br><span class="line">bce5759afdbbee47ad417b683ea43a5f5bbfade7 127.0.0.1:6381@16381 master - 0 1622274275204 3 connected 10923-16383</span><br><span class="line">fd341da7a76df6dcab2b1e75e58eb8a74799703c 127.0.0.1:6382@16382 master - 0 1622274273192 0 connected</span><br><span class="line">118cc85c73c3f9bee9653d2cbca7881dbbd7957f 127.0.0.1:6380@16380 master - 0 1622274274198 1 connected 5462-10922</span><br><span class="line">7366db1f582ad74dadda9691368959285f9e4255 127.0.0.1:6379@16379 myself,master - 0 1622274275000 2 connected 0-5461</span><br><span class="line">a7d978b2609a41e108cbc12f115ee66bb1dfa14e 127.0.0.1:6383@16383 master - 0 1622274277216 4 connected</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>设置从节点。<code>cluster replicate &#123;nodeId&#125;</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[dev@localhost data]$ redis-cli -h 127.0.0.1 -p 6382</span><br><span class="line">127.0.0.1:6382&gt; cluster replicate 7366db1f582ad74dadda9691368959285f9e4255</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>6383和6384分别设置为6380和6381的从节点</p>
</li>
<li>
<p>此时集群节点状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6384&gt; cluster nodes</span><br><span class="line">bce5759afdbbee47ad417b683ea43a5f5bbfade7 127.0.0.1:6381@16381 master - 0 1622274665381 3 connected 10923-16383</span><br><span class="line">fd341da7a76df6dcab2b1e75e58eb8a74799703c 127.0.0.1:6382@16382 slave 7366db1f582ad74dadda9691368959285f9e4255 0 1622274664000 2 connected</span><br><span class="line">7366db1f582ad74dadda9691368959285f9e4255 127.0.0.1:6379@16379 master - 0 1622274666390 2 connected 0-5461</span><br><span class="line">a7d978b2609a41e108cbc12f115ee66bb1dfa14e 127.0.0.1:6383@16383 slave 118cc85c73c3f9bee9653d2cbca7881dbbd7957f 0 1622274667395 1 connected</span><br><span class="line">2b52cbf5867de9a88b97510d7cc584f7aa37bc88 127.0.0.1:6384@16384 myself,slave bce5759afdbbee47ad417b683ea43a5f5bbfade7 0 1622274665000 3 connected</span><br><span class="line">118cc85c73c3f9bee9653d2cbca7881dbbd7957f 127.0.0.1:6380@16380 master - 0 1622274665000 1 connected 5462-10922</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="使用redis-trib-rb方式"><a class="header-anchor" href="#使用redis-trib-rb方式"></a>使用redis-trib.rb方式</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-trib.rb create --replicas 1 127.0.0.1:6481 127.0.0.1:6482 127.0.0.1:6483 127.0.0.1:6484 127.0.0.1:6485 127.0.0.1:6486</span><br></pre></td></tr></table></figure>
<ul>
<li>使用redis-trib.rb只需要一个命令即可完成上述握手及分配槽的操作。</li>
</ul>
<h2 id="扩容集群"><a class="header-anchor" href="#扩容集群"></a>扩容集群</h2>
<h3 id="准备新节点"><a class="header-anchor" href="#准备新节点"></a>准备新节点</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server redis-6385.conf &amp;</span><br><span class="line">redis-server redis-6386.conf &amp;</span><br></pre></td></tr></table></figure>
<h3 id="加入集群"><a class="header-anchor" href="#加入集群"></a>加入集群</h3>
<p>使用任意客户端将新节点加入集群:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; cluster meet 127.0.0.1 6385</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; cluster meet 127.0.0.1 6386</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看集群状态</span></span><br><span class="line">127.0.0.1:6379&gt; cluster nodes</span><br><span class="line">eff74c1f59ae4b4fdd95fddedf7b01f0653eb4e6 127.0.0.1:6385@16385 master - 0 1622441835000 0 connected</span><br><span class="line">2b52cbf5867de9a88b97510d7cc584f7aa37bc88 127.0.0.1:6384@16384 slave bce5759afdbbee47ad417b683ea43a5f5bbfade7 0 1622441835000 3 connected</span><br><span class="line">02d683a46c67b7822e5d4a122aae91d3a2a505d4 127.0.0.1:6386@16386 master - 0 1622441837504 6 connected</span><br><span class="line">bce5759afdbbee47ad417b683ea43a5f5bbfade7 127.0.0.1:6381@16381 master - 0 1622441832000 3 connected 10923-16383</span><br><span class="line">fd341da7a76df6dcab2b1e75e58eb8a74799703c 127.0.0.1:6382@16382 slave 7366db1f582ad74dadda9691368959285f9e4255 0 1622441833473 2 connected</span><br><span class="line">118cc85c73c3f9bee9653d2cbca7881dbbd7957f 127.0.0.1:6380@16380 master - 0 1622441836496 1 connected 5462-10922</span><br><span class="line">7366db1f582ad74dadda9691368959285f9e4255 127.0.0.1:6379@16379 myself,master - 0 1622441836000 2 connected 0-5461</span><br><span class="line">a7d978b2609a41e108cbc12f115ee66bb1dfa14e 127.0.0.1:6383@16383 slave 118cc85c73c3f9bee9653d2cbca7881dbbd7957f 0 1622441835490 1 connected</span><br></pre></td></tr></table></figure>
<h3 id="分配槽-2"><a class="header-anchor" href="#分配槽-2"></a>分配槽</h3>
<h4 id="流程说明"><a class="header-anchor" href="#流程说明"></a>流程说明</h4>
<ol>
<li>对目标节点发送<code>cluster setslot&#123;slot&#125; importing &#123;sourceNodeId&#125;</code>，让目标节点准备导入槽的数据</li>
<li>对源节点发送<code>cluster setslot &#123;slot&#125; migrating &#123;targetNodeId&#125;</code>，让源节点准备好导出的数据</li>
<li>源节点循环执行<code>cluster get keys inslot &#123;slot&#125; &#123;count&#125;</code>命令，获取count个属于{slot}槽的键</li>
<li>在源节点上执行<code>migrate &#123;targetIp&#125; &#123;targetPort&#125; &quot;&quot; 0 &#123;timeout&#125; keys &#123;keys...&#125;</code>把获取的键通过pipeline流水线发送到目标节点</li>
<li>重复3-4步骤，直到槽上的所有键值迁移到目标节点</li>
<li>向集群内的所有主节点发送<code>cluster setslot &#123;slot&#125; node &#123;targetNodeId&#125;</code>命令通知槽分配给目标节点</li>
</ol>
<blockquote>
<p>这里步骤过于复杂，不进行直接演示，也不建议使用此种方式进行处理</p>
</blockquote>
<h3 id="添加从节点"><a class="header-anchor" href="#添加从节点"></a>添加从节点</h3>
<p>与之前搭建时方式一致，使用客户端连接到127.0.0.1:6386客户端，执行<code>cluster replicate &lt;master-node-id&gt;</code>命令即可</p>
<h3 id="使用Redis-trib-rb方式"><a class="header-anchor" href="#使用Redis-trib-rb方式"></a>使用Redis-trib.rb方式</h3>
<ul>
<li>
<p>准备新节点同上述步骤一致</p>
</li>
<li>
<p>加入集群</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-trib.rb add-node new_host:new_port existing_host:existing_port</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>分配槽，redis-trib提供了槽重分片功能</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-trib.rb reshard host:port --from &lt;arg&gt; --to &lt;arg&gt; --slots &lt;arg&gt; --yes --timeout &lt;arg&gt; --pipeline &lt;arg&gt;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>添加从节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-trib.rb add-node new_host:new_port existing_host:existing_port --slave --master-id &lt;arg&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="集群收缩"><a class="header-anchor" href="#集群收缩"></a>集群收缩</h2>
<blockquote>
<p>原生方式还是别用了，我照着书抄都觉得麻烦。</p>
</blockquote>
<ol>
<li>使用<code>redis-trie.rb del-node &lt;host&gt;:&lt;port&gt; &lt;node-id&gt;</code>下线从节点。</li>
<li>使用<code>redis-trib.rb reshard </code>将主节点的槽分配到其他主节点上</li>
<li>使用<code>redis-trie.rb del-node &lt;host&gt;:&lt;port&gt; &lt;node-id&gt;</code>命令下线主节点</li>
</ol>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Seata完成2PC分布式事务</title>
    <url>/posts/3721150893.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>Seata 2PC 分布式事务</p>

</blockquote>
<span id="more"></span>
<h1>Seata完成2PC分布式事务</h1>
<h2 id="环境搭建"><a class="header-anchor" href="#环境搭建"></a>环境搭建</h2>
<h3 id="创建MySQL"><a class="header-anchor" href="#创建MySQL"></a>创建MySQL</h3>
<p>分别使用虚拟机 192.168.33.51、192.168.33.52、192.168.33.53（多虚拟机环境参考：<a href="./2556627931">搭建基础服务器</a>，MySQL安装参考：<a href="./728095789">Docker安装MySQL</a>）创建MySQL示例。对应Docker命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 3308:3306 --name mysql_dtx \</span><br><span class="line">-v /home/dev/data/mysql/dtx/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /home/dev/data/mysql/dtx/logs:/logs \</span><br><span class="line">-v /home/dev/data/mysql/dtx/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</span><br></pre></td></tr></table></figure>
<h3 id="创建测试数据库"><a class="header-anchor" href="#创建测试数据库"></a>创建测试数据库</h3>
<h2 id="创建应用"><a class="header-anchor" href="#创建应用"></a>创建应用</h2>
<h2 id="验证"><a class="header-anchor" href="#验证"></a>验证</h2>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>分布式事务</tag>
        <tag>2PC</tag>
      </tags>
  </entry>
  <entry>
    <title>ShardingSphere读写分离</title>
    <url>/posts/450540427.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>SpringBoot+ShardingSphere+MySQL读写分离</p>

</blockquote>
<span id="more"></span>
<h1>ShardingSphere读写分离</h1>
<h2 id="创建应用"><a class="header-anchor" href="#创建应用"></a>创建应用</h2>
<h3 id="依赖"><a class="header-anchor" href="#依赖"></a>依赖</h3>
<blockquote>
<p>引入druid数据源，sharding-jdbc启动器，lombok（使用@Slf4j进行日志打印）</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-jdbc-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0-RC1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="配置"><a class="header-anchor" href="#配置"></a>配置</h3>
<blockquote>
<p><a href="https://shardingsphere.apache.org/document/legacy/3.x/document/cn/manual/sharding-jdbc/usage/read-write-splitting/">ShardingSphere</a>提供了四种配置方式:1）Java配置，2）Yaml配置，3）Spring Boot配置，4）Spring配置</p>
<p>此处使用SpringBoot配置</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8091</span></span><br><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">shardingsphere-demo</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span> <span class="comment"># 允许覆盖Bean</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment">#   shardingsphere 配置</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql.show:</span> <span class="literal">true</span> <span class="comment"># 展示SQL</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">      <span class="attr">names:</span> <span class="string">master,slave1,slave2</span></span><br><span class="line">      <span class="attr">master:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.33.51:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">master123</span></span><br><span class="line">      <span class="attr">slave1:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.33.52:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">slave123</span></span><br><span class="line">      <span class="attr">slave2:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.33.53:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">slave123</span></span><br><span class="line">    <span class="attr">sharding:</span></span><br><span class="line">      <span class="attr">default-data-source-name:</span> <span class="string">master</span> <span class="comment"># 默认数据源</span></span><br><span class="line">    <span class="attr">masterslave:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">ms</span> <span class="comment"># 配置主从名称</span></span><br><span class="line">      <span class="attr">master-data-source-name:</span> <span class="string">master</span> <span class="comment"># 主库</span></span><br><span class="line">      <span class="attr">slave-data-source-names:</span> <span class="string">slave1,slave2</span> <span class="comment"># 从库</span></span><br><span class="line">      <span class="attr">load-balance-algorithm-type:</span> <span class="string">round_robin</span> <span class="comment"># 从节点负载均衡策略，轮询</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="comment">#   Mybatis 配置</span></span><br><span class="line"><span class="comment">##############################################################################</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/*.xml</span></span><br></pre></td></tr></table></figure>
<h2 id="编码"><a class="header-anchor" href="#编码"></a>编码</h2>
<h3 id="Service"><a class="header-anchor" href="#Service"></a>Service</h3>
<p>Service层组合Dao层完成数据的增删改查，新增以下三个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service(&quot;sysUserService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUserServiceImpl</span> <span class="keyword">implements</span> <span class="title">SysUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SysUserDao sysUserDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SysUser <span class="title">queryById</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sysUserDao.queryById(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;SysUser&gt; <span class="title">selectAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sysUserDao.selectAll(<span class="keyword">new</span> SysUser());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SysUser sysUser = <span class="keyword">new</span> SysUser();</span><br><span class="line">        sysUser.setUserId(ThreadLocalRandom.current().nextLong());</span><br><span class="line">        sysUser.setLoginName(UUID.randomUUID().toString().substring(<span class="number">8</span>).replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&amp;&quot;</span>));</span><br><span class="line">        sysUser.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        sysUser.setUpdateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">return</span> sysUserDao.insert(sysUser);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SysUser sysUser = <span class="keyword">new</span> SysUser();</span><br><span class="line">        sysUser.setUserId(<span class="number">1L</span>);</span><br><span class="line">        <span class="keyword">long</span> nextLong = ThreadLocalRandom.current().nextLong();</span><br><span class="line">        log.info(<span class="string">&quot;修改后deptId: &#123;&#125;&quot;</span>, nextLong);</span><br><span class="line">        sysUser.setDeptId(nextLong);</span><br><span class="line">        sysUser.setUpdateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        <span class="keyword">return</span> sysUserDao.update(sysUser);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sysUserDao.delete(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;SysUser&gt; <span class="title">selectAfterInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        save();</span><br><span class="line">        <span class="keyword">return</span> selectAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;SysUser&gt; <span class="title">selectAfterUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        update();</span><br><span class="line">        <span class="keyword">return</span> selectAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;SysUser&gt; <span class="title">selectAfterDelete</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">        delete(userId);</span><br><span class="line">        <span class="keyword">return</span> selectAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Controller"><a class="header-anchor" href="#Controller"></a>Controller</h3>
<p>Service层提供基础的增删改查，通过Controller组合，最终Controller方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;sysUser&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUserController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SysUserService sysUserService;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// ... 省略基础CURD</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增后查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;selectAfterInsert&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;SysUser&gt; <span class="title">selectAfterInsert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sysUserService.selectAfterInsert();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改后查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;selectAfterUpdate&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;SysUser&gt; <span class="title">selectAfterUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sysUserService.selectAfterUpdate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除后查询</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userId 主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;selectAfterDelete/&#123;userId&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;SysUser&gt; <span class="title">selectAfterDelete</span><span class="params">(<span class="meta">@PathVariable(&quot;userId&quot;)</span> Long userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sysUserService.selectAfterDelete(userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="验证"><a class="header-anchor" href="#验证"></a>验证</h2>
<h3 id="查询接口"><a class="header-anchor" href="#查询接口"></a>查询接口</h3>
<ul>
<li>请求地址</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">GET http://localhost:8091/sysUser/selectOne?id=1</span><br></pre></td></tr></table></figure>
<ul>
<li>后端代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过主键查询单条数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 主键</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 单条数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;selectOne&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SysUser <span class="title">selectOne</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.sysUserService.queryById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>控制台日志</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一次调用</span></span><br><span class="line">ShardingSphere-SQL                       : Rule Type: master-slave</span><br><span class="line">ShardingSphere-SQL                       : SQL: <span class="variable">$&#123;select语句&#125;</span> ::: DataSources: slave1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二次调用</span></span><br><span class="line">ShardingSphere-SQL                       : Rule Type: master-slave</span><br><span class="line">ShardingSphere-SQL                       : SQL: <span class="variable">$&#123;select语句&#125;</span> ::: DataSources: slave2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为了方便省略日志中的时间和线程信息与具体的SQL语句</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>查询时查询从库，并根据配置规则进行轮询访问</p>
</blockquote>
<h3 id="新增接口"><a class="header-anchor" href="#新增接口"></a>新增接口</h3>
<ul>
<li>请求地址</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">POST http://localhost:8091/sysUser/save</span><br></pre></td></tr></table></figure>
<ul>
<li>控制台日志</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ShardingSphere-SQL                       : Rule Type: master-slave</span><br><span class="line">ShardingSphere-SQL                       : SQL: <span class="variable">$&#123;select语句&#125;</span> ::: DataSources: master</span><br></pre></td></tr></table></figure>
<blockquote>
<p>删除、更新与新增接口一致，通过主库进行操作。</p>
</blockquote>
<h3 id="更新后查询"><a class="header-anchor" href="#更新后查询"></a>更新后查询</h3>
<ul>
<li>请求地址</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">POST http://localhost:8091/sysUser/selectAfterUpdate</span><br></pre></td></tr></table></figure>
<ul>
<li>服务端代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;selectAfterUpdate&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;SysUser&gt; <span class="title">selectAfterUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SysUser sysUser = <span class="keyword">new</span> SysUser();</span><br><span class="line">    sysUser.setUserId(<span class="number">1L</span>);</span><br><span class="line">    <span class="keyword">long</span> nextLong = ThreadLocalRandom.current().nextLong();</span><br><span class="line">    log.info(<span class="string">&quot;修改后deptId: &#123;&#125;&quot;</span>, nextLong);</span><br><span class="line">    sysUser.setDeptId(nextLong);</span><br><span class="line">    sysUser.setUpdateTime(<span class="keyword">new</span> Date());</span><br><span class="line">    sysUserService.update(sysUser);</span><br><span class="line">    <span class="keyword">return</span> sysUserService.selectAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>控制台日志</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首次查询</span></span><br><span class="line">cn.leithda.controller.SysUserController  : 修改后deptId: -1175581395186330489</span><br><span class="line">ShardingSphere-SQL                       : Rule Type: master-slave</span><br><span class="line">ShardingSphere-SQL                       : SQL: <span class="variable">$&#123;update语句&#125;</span> ::: DataSources: master</span><br><span class="line">ShardingSphere-SQL                       : Rule Type: master-slave</span><br><span class="line">ShardingSphere-SQL                       : SQL: <span class="variable">$&#123;select语句&#125;</span> ::: DataSources: slave1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二次查询</span></span><br><span class="line">cn.leithda.controller.SysUserController  : 修改后deptId: 2426654288544131059</span><br><span class="line">ShardingSphere-SQL                       : Rule Type: master-slave</span><br><span class="line">ShardingSphere-SQL                       : SQL: <span class="variable">$&#123;update语句&#125;</span> ::: DataSources: master</span><br><span class="line">ShardingSphere-SQL                       : Rule Type: master-slave</span><br><span class="line">ShardingSphere-SQL                       : SQL: <span class="variable">$&#123;select语句&#125;</span> ::: DataSources: slave2</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p>更新操作在主库执行，查询操作在从库执行，当主从数据同步延迟大于查询间隔时就会出现数据不一致现象。如下图，第一次查询结果为更新前的部门id，而非修改后的<code>-1175581395186330489</code></p>

<p>新增以及删除后执行查询逻辑同更新一致，根据<a href="https://shardingsphere.apache.org/document/legacy/3.x/document/cn/features/read-write-split/core-features/">官网</a>第三条的说法：<strong>同一线程且同一数据库连接内</strong>，如有写入操作，以后的读操作均从主库读取，用于保证数据一致性。</p>
</blockquote>
<h2 id="解决先写后读问题"><a class="header-anchor" href="#解决先写后读问题"></a>解决先写后读问题</h2>
<h3 id="增加事务注解"><a class="header-anchor" href="#增加事务注解"></a>增加事务注解</h3>
<p>增加事务注解<code>@Transactional</code>，保证数据库操作在同一事务(同一连接)内。</p>
<ul>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;SysUser&gt; <span class="title">selectAfterUpdate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    update();</span><br><span class="line">    <span class="keyword">return</span> selectAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>日志</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">c.l.service.impl.SysUserServiceImpl      : 修改后deptId: 6484464052586093700</span><br><span class="line">ShardingSphere-SQL                       : Rule Type: master-slave</span><br><span class="line">ShardingSphere-SQL                       : SQL: <span class="variable">$&#123;update语句&#125;</span> ::: DataSources: master</span><br><span class="line">ShardingSphere-SQL                       : Rule Type: master-slave</span><br><span class="line">ShardingSphere-SQL                       : SQL: <span class="variable">$&#123;select语句&#125;</span> ::: DataSources: master</span><br></pre></td></tr></table></figure>
<h3 id="强制选主"><a class="header-anchor" href="#强制选主"></a>强制选主</h3>
<p>使用HitManager，强制走主库</p>
<ul>
<li>代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;SysUser&gt; <span class="title">selectAfterDelete</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">    HintManager.getInstance().setMasterRouteOnly();</span><br><span class="line">    delete(userId);</span><br><span class="line">    <span class="keyword">return</span> selectAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>日志</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ShardingSphere-SQL                       : Rule Type: master-slave</span><br><span class="line">ShardingSphere-SQL                       : SQL: delete from sys_user <span class="built_in">where</span> user_id = ? ::: DataSources: master</span><br><span class="line">ShardingSphere-SQL                       : Rule Type: master-slave</span><br><span class="line">ShardingSphere-SQL                       : SQL: <span class="variable">$&#123;select语句&#125;</span> ::: DataSources: master</span><br></pre></td></tr></table></figure>
<blockquote>
<p>代码地址：<a href="https://gitee.com/leithda/labs/tree/master/TechnicalPoints/ReadWriteSplitting/shardingsphere-demo">https://gitee.com/leithda/labs/tree/master/TechnicalPoints/ReadWriteSplitting/shardingsphere-demo</a></p>
</blockquote>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Docker搭建ELK</title>
    <url>/posts/1290338254.html</url>
    <content><![CDATA[<span id="more"></span>
<h1>Docker搭建ELK</h1>
<h2 id=""><a class="header-anchor" href="#"></a></h2>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
  </entry>
  <entry>
    <title>搭建基础服务器</title>
    <url>/posts/2556627931.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>由于后续要搞各种分布式的实验，迫切希望快速搭建服务器集群的方法，故整理了这篇文章，主要介绍如何搭建一个基础版的虚拟机并通过导入导出快速完成服务器集群的建设。</p>

</blockquote>
<span id="more"></span>
<h1>搭建基础服务器</h1>
<h2 id="初始化虚拟机"><a class="header-anchor" href="#初始化虚拟机"></a>初始化虚拟机</h2>
<ol>
<li>
<p>下载安装 <a href="https://www.virtualbox.org/">VirtualBox</a> ，注意要开启CPU虚拟化功能</p>
</li>
<li>
<p>下载安装 <a href="https://www.vagrantup.com/">Vagrant by HashiCorp (vagrantup.com)</a></p>
</li>
<li>
<p>打开Window Cmd窗口，进入到指定目录，运行 <code>vagrant init centos/7</code>，即可在 VirtualBox 中初始化一个centos7系统</p>
</li>
<li>
<p>下载vagrant的<a href="https://cloud.centos.org/centos/7/vagrant/x86_64/images/CentOS-7-x86_64-Vagrant-2004_01.VirtualBox.box">镜像</a></p>
</li>
<li>
<p>进入下载的目录，使用<code>vagrant box add centos/7 CentOS-7-x86_64-Vagrant-2004_01.VirtualBox.box</code></p>
</li>
<li>
<p>使用<code>vagrant up</code>启动虚拟机，会在当前目录下生成<code>Vagrantfile</code>文件，虚拟机<code>root</code>用户的密码为<strong>vagrant</strong></p>
</li>
<li>
<p>修改指定目录下文件<code>Vagrantfile</code>，找到如下位置，将虚拟机IP更改为<code>192.168.56.10</code>,然后使用<code>vagrant ssh</code>连入虚拟机重新启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># config.vm.network &quot;private_network&quot;, ip: &quot;192.168.33.10&quot;</span><br><span class="line">config.vm.network &quot;private_network&quot;,ip: &quot;192.168.56.10&quot;</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
</li>
<li>
<p>虚拟机默认只允许ssh登录，为了操作方便，可以配置允许账号密码登录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 进入虚拟机</span><br><span class="line">vagrant ssh</span><br><span class="line"># 编辑ssh配置文件</span><br><span class="line">vi /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>
<ul>
<li>修改<code>PasswordAuthentication</code>为<code>yes</code></li>
<li>重启服务 <code>service sshd restart</code></li>
</ul>
</li>
<li>
<p>之后就可以使用Xshell等ssh工具直接连接虚拟机</p>
</li>
</ol>
<h2 id="新建账户"><a class="header-anchor" href="#新建账户"></a>新建账户</h2>
<h3 id="添加用户"><a class="header-anchor" href="#添加用户"></a>添加用户</h3>
<ol>
<li>添加用户</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo useradd dev</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>设置密码</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo passwd dev</span><br></pre></td></tr></table></figure>
<h3 id="获取Sudo权限"><a class="header-anchor" href="#获取Sudo权限"></a>获取Sudo权限</h3>
<ol>
<li>
<p>查看sudo配置文件权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ls -l /etc/sudoers</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>添加<code>w</code>权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chmod u+w /etc/sudoers</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>编辑<code>sudoers</code>文件，添加用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/sudoers</span><br></pre></td></tr></table></figure>
<p>找到文件中的如下内容，复制一行并将root修改为要修改的账户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Allow root to run any commands anywhere</span><br><span class="line">root    ALL=(ALL)       ALL</span><br><span class="line">dev     ALL=(ALL)       ALL <span class="comment"># 新增</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>将写权限收回</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chmod u-w /etc/sudoers</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="更改文件组和用户"><a class="header-anchor" href="#更改文件组和用户"></a>更改文件组和用户</h3>
<ul>
<li>更改用户</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chown <span class="variable">$&#123;group&#125;</span> PATH</span><br><span class="line">chown -R <span class="variable">$&#123;group&#125;</span> PATH <span class="comment"># 递归修改所有文件</span></span><br></pre></td></tr></table></figure>
<ul>
<li>修改组</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chgrp &#123;GROUP&#125; PATH</span><br><span class="line">chgrp -R <span class="variable">$&#123;group&#125;</span> PATH <span class="comment"># 递归修改所有文件</span></span><br></pre></td></tr></table></figure>
<h2 id="常见软件"><a class="header-anchor" href="#常见软件"></a>常见软件</h2>
<ul>
<li>
<p>wget</p>
<ul>
<li>http客户端工具</li>
<li><code>sudo yum install wget -y</code></li>
</ul>
</li>
<li>
<p>tree</p>
<ul>
<li>用于打印目录结构</li>
<li><code>sudo yum install tree -y</code></li>
</ul>
</li>
<li>
<p>vim</p>
<ul>
<li>菜鸟程序员使用高档的编辑器，根据高亮判断是否报错~</li>
<li><code>sudo yum install vim -y</code></li>
</ul>
</li>
<li>
<p>lrzsz</p>
<ul>
<li>客户端文件传输工具</li>
<li><code>sudo yum install lrzsz -y</code></li>
</ul>
</li>
</ul>
<h2 id="修改镜像源"><a class="header-anchor" href="#修改镜像源"></a>修改镜像源</h2>
<ul>
<li>检查是否安装<code>wget</code>(直接输入<code>wget</code>测试)，如果没有进行安装<code>sudo yum install -y wget</code></li>
<li>进入目录<code>/etc/yum.repos.d</code>，备份原软件源文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mv CentOS-Base.repo CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure>
<ul>
<li>下载软件源文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure>
<ul>
<li>清除缓存 <code>sudo yum makecache</code></li>
<li>加载缓存<code>sudo yum repolist</code></li>
</ul>
<h2 id="oh-my-zsh"><a class="header-anchor" href="#oh-my-zsh"></a>oh-my-zsh</h2>
<p>官网：<a href="https://ohmyz.sh/">https://ohmyz.sh/</a></p>
<p>国内安装方法参考：<a href="https://blog.csdn.net/qwe641259875/article/details/107201760/">https://blog.csdn.net/qwe641259875/article/details/107201760/</a></p>
<ul>
<li>安装git</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install git -y</span><br></pre></td></tr></table></figure>
<ul>
<li>安装 zsh</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install zsh -y</span><br></pre></td></tr></table></figure>
<ul>
<li>安装 oh-my-zsh</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 获取安装文件</span></span><br><span class="line">wget https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 添加可执行权限</span></span><br><span class="line">chmod +x install.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 修改为国内git地址</span></span><br><span class="line">vi install.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 修改脚本对应内容为对应的地址</span></span><br><span class="line">REPO=<span class="variable">$&#123;REPO:-mirrors/oh-my-zsh&#125;</span></span><br><span class="line">REMOTE=<span class="variable">$&#123;REMOTE:-https://gitee.com/<span class="variable">$&#123;REPO&#125;</span>.git&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行安装</span></span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure>
<ul>
<li>安装插件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>
<ul>
<li>配置zshrc</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主题配置</span></span><br><span class="line">ZSH_THEME=<span class="string">&quot;ys&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加插件配置</span></span><br><span class="line">plugins=(git zsh-syntax-highlighting zsh-autosuggestions)</span><br><span class="line"></span><br><span class="line"><span class="comment"># :wq保存</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使配置生效</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>
<h2 id="docker"><a class="header-anchor" href="#docker"></a>docker</h2>
<h3 id="安装"><a class="header-anchor" href="#安装"></a>安装</h3>
<ol>
<li>
<p>安装 <code>yum-utils</code>工具包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>添加docker的yum源(阿里源)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>卸载旧版本(如果存在则删除)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum -y remove docker docker-common docker-selinux docker-engine</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查看所有版本，并选择指定版本安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum list docker-ce --showduplicates | sort -r</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>安装docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install docker-ce # 默认安装最新版本</span><br></pre></td></tr></table></figure>
<ul>
<li><code>$ yum install docker-ce-&lt;VERSION_STRING&gt; </code>(指定安装版本)。例：<code> yum install docker-ce-18.03.1.ce</code></li>
</ul>
</li>
<li>
<p>验证安装成功</p>
</li>
<li>
<p>启动并加入开机启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker       # (重启命令  $  systemctl restart docker ) </span><br><span class="line">sudo systemctl enable docker   # 开机自启动</span><br><span class="line">sudo docker version  # 查看docker版本号</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>验证安装成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>将当前用户(此时可以使用blog登录)加入到<code>docker</code>用户组</p>
<ul>
<li>
<p>新增<code>docker</code>用户组，已存在可忽略</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo groupadd docker</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>将用户加入<code>docker</code>用户组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo usermod -aG docker $&#123;USER&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>重启<code>docker</code>服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>重新登录用户</p>
</li>
</ul>
</li>
</ol>
<h3 id="配置镜像加速"><a class="header-anchor" href="#配置镜像加速"></a>配置镜像加速</h3>
<ul>
<li>
<p>使用阿里云镜像加速地址： <a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors%EF%BC%8C%E8%8E%B7%E5%8F%96%E5%8A%A0%E9%80%9F%E5%9C%B0%E5%9D%80%E5%B9%B6%E6%8C%89%E7%85%A7%E8%AF%B4%E6%98%8E%E9%85%8D%E7%BD%AE%E5%88%B0%E7%9B%B8%E5%BA%94%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E4%B8%AD%E3%80%82">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors，获取加速地址并按照说明配置到相应配置文件中。</a></p>
</li>
<li>
<p>使用其他镜像源</p>
<ul>
<li>
<p>创建或修改配置文件，镜像地址：</p>
<ul>
<li>
<p><strong>Docker中国区官方镜像</strong>：<a href="https://registry.docker-cn.com">https://registry.docker-cn.com</a></p>
</li>
<li>
<p><strong>网易</strong>：<a href="http://hub-mirror.c.163.com">http://hub-mirror.c.163.com</a></p>
</li>
<li>
<p><strong>ustc</strong>：<a href="https://docker.mirrors.ustc.edu.cn">https://docker.mirrors.ustc.edu.cn</a></p>
</li>
<li>
<p><strong>中国科技大学</strong>：<a href="https://docker.mirrors.ustc.edu.cn">https://docker.mirrors.ustc.edu.cn</a></p>
</li>
</ul>
</li>
<li>
<p>重新启动服务：<code>sudo systemctl daemon-reload &amp;&amp; sudo systemctl restart docker</code></p>
</li>
<li>
<p>具体配置如下：</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;https://registry.docker-cn.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="导出"><a class="header-anchor" href="#导出"></a>导出</h2>
<ul>
<li>
<p>关闭虚拟机：终端内<code>sudo shutdown now</code>或者使用<code>Virtual Box</code></p>
</li>
<li>
<p>导出：VirtualBox中选择虚拟机右键选中选择导出</p>
</li>
</ul>
<img src="/posts/2556627931/image-20210708165301021.png" class="" title="image-20210708165301021">
<ul>
<li>Mac地址选择清除所有网卡的MAC地址，避免多个虚拟机MAC地址重复，感兴趣的可以试试将mac地址设置成一样是否有问题~</li>
</ul>
<h2 id="导入"><a class="header-anchor" href="#导入"></a>导入</h2>
<h3 id="导入-2"><a class="header-anchor" href="#导入-2"></a>导入</h3>
<p>使用VirtualBox导入之前导出的备份文件。</p>
<h3 id="查看网络设置"><a class="header-anchor" href="#查看网络设置"></a>查看网络设置</h3>
<p>导入后使用VirtualBox打开虚拟机，使用<code>ip addr</code>查看网络设置.</p>
<img src="/posts/2556627931/image-20210708161656934.png" class="" title="image-20210708161656934">
<ul>
<li>如图，ip由网卡3(eth1)指定。</li>
</ul>
<h3 id="修改IP"><a class="header-anchor" href="#修改IP"></a>修改IP</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入配置文件路径</span></span><br><span class="line"><span class="built_in">cd</span> /etc/sysconfig/network-scripts</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改网络配置</span></span><br><span class="line">sudo vi ifcfg-eth1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改ip地址,修改IPADDR项</span></span><br><span class="line">IPADDR=192.168.33.51</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">reboot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看网络配置</span></span><br><span class="line">ip addr</span><br></pre></td></tr></table></figure>
<h3 id="使用Xshell连接"><a class="header-anchor" href="#使用Xshell连接"></a>使用Xshell连接</h3>
<p>分别启动两个服务器(在VirtualBox上右键使用无界面启动)，使用Xshell连接51服务器。使用ping检测虚拟机是否可以连通。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dev @ localhost in ~ [8:25:40] </span></span><br><span class="line">$ ping 192.168.33.50</span><br><span class="line">PING 192.168.33.50 (192.168.33.50) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.33.50: icmp_seq=1 ttl=64 time=1.37 ms</span><br><span class="line">64 bytes from 192.168.33.50: icmp_seq=2 ttl=64 time=0.663 ms</span><br><span class="line">64 bytes from 192.168.33.50: icmp_seq=3 ttl=64 time=0.642 ms</span><br><span class="line">64 bytes from 192.168.33.50: icmp_seq=4 ttl=64 time=0.639 ms</span><br><span class="line">64 bytes from 192.168.33.50: icmp_seq=5 ttl=64 time=0.726 ms</span><br><span class="line">64 bytes from 192.168.33.50: icmp_seq=6 ttl=64 time=11.8 ms</span><br><span class="line">64 bytes from 192.168.33.50: icmp_seq=7 ttl=64 time=0.641 ms</span><br><span class="line">^C</span><br><span class="line">--- 192.168.33.50 ping statistics ---</span><br><span class="line">7 packets transmitted, 7 received, 0% packet loss, time 6011ms</span><br><span class="line">rtt min/avg/max/mdev = 0.639/2.355/11.804/3.865 ms</span><br></pre></td></tr></table></figure>
<p>备份好导出的文件，后续可以直接通过导入完成虚拟机的创建。</p>
<p>基本成功，skr~~~</p>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>中介者模式</title>
    <url>/posts/83831917.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>中介者模式（Mediator Pattern）是用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护</p>

</blockquote>
<span id="more"></span>
<h2 id="Class-Diagram"><a class="header-anchor" href="#Class-Diagram"></a>Class Diagram</h2>
<img src="/posts/83831917/mediator.png" class="">
<h2 id="Implementation"><a class="header-anchor" href="#Implementation"></a>Implementation</h2>
<h3 id="封装消息类型"><a class="header-anchor" href="#封装消息类型"></a>封装消息类型</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息来源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String from;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String content;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息接收方</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String to;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String type;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Message</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Message <span class="title">setFrom</span><span class="params">(String from)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.from = from;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Message <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Message <span class="title">setTo</span><span class="params">(String to)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.to = to;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFrom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> from;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> to;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="中介者抽象类"><a class="header-anchor" href="#中介者抽象类"></a>中介者抽象类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">processMessage</span><span class="params">(Message message)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addFileServer</span><span class="params">(FileServer fileServer)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="用户类"><a class="header-anchor" href="#用户类"></a>用户类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; messageList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中介者类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Mediator mediator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Mediator mediator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mediator = mediator;</span><br><span class="line">        <span class="keyword">this</span>.mediator.addUser(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to 消息接收方</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pushMessage</span><span class="params">(String content, String to)</span> </span>&#123;</span><br><span class="line">        content = content + <span class="string">&quot;\t\t&quot;</span> + LocalDateTime.now().format(DateTimeFormatter.ofPattern(<span class="string">&quot;YYYY-MM-dd hh:mm:ss&quot;</span>));</span><br><span class="line">        <span class="keyword">this</span>.messageList.add(<span class="string">&quot;me :&quot;</span> + content);</span><br><span class="line">        Message message = <span class="keyword">new</span> Message(<span class="string">&quot;msg&quot;</span>).setContent(content).setFrom(getName()).setTo(to);</span><br><span class="line">        <span class="keyword">this</span>.mediator.processMessage(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 文件名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadFile</span><span class="params">(String content)</span></span>&#123;</span><br><span class="line">        Message message = <span class="keyword">new</span> Message(<span class="string">&quot;file&quot;</span>).setFrom(getName()).setContent(<span class="string">&quot;U&quot;</span>+content);</span><br><span class="line">        <span class="keyword">this</span>.mediator.processMessage(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下载文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 文件名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloadFile</span><span class="params">(String content)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.messageList.add(<span class="string">&quot;申请下载《&quot;</span>+content+<span class="string">&quot;》，请求文件服务器中...&quot;</span>);</span><br><span class="line">        Message message = <span class="keyword">new</span> Message(<span class="string">&quot;file&quot;</span>).setFrom(getName()).setContent(<span class="string">&quot;D&quot;</span>+content);</span><br><span class="line">        <span class="keyword">this</span>.mediator.processMessage(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">putMessage</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.messageList.add(content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示消息列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showMessages</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;\n======== &quot;</span> + getName() + <span class="string">&quot;&#x27;s messageBox begin ========&quot;</span>);</span><br><span class="line">        messageList.forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">&quot;======== &quot;</span> + getName() + <span class="string">&quot;&#x27;s messageBox  end  ========\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="文件服务器类"><a class="header-anchor" href="#文件服务器类"></a>文件服务器类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileServer</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; fileList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Mediator mediator;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileServer</span><span class="params">(Mediator mediator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mediator = mediator;</span><br><span class="line">        <span class="keyword">this</span>.mediator.addFileServer(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isFound;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upload</span><span class="params">(String fileName, String userName)</span> </span>&#123;</span><br><span class="line">        String returnContent;</span><br><span class="line">        <span class="keyword">if</span> (!fileList.contains(fileName)) &#123;</span><br><span class="line">            fileList.add(fileName);</span><br><span class="line">            returnContent = <span class="string">&quot;文件上传成功&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            returnContent = <span class="string">&quot;文件已经存在&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Message message = <span class="keyword">new</span> Message(<span class="string">&quot;msg&quot;</span>).setFrom(<span class="string">&quot;FileServer&quot;</span>).setContent(returnContent).setTo(userName);</span><br><span class="line">        mediator.processMessage(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(String fileName, String userName)</span> </span>&#123;</span><br><span class="line">        String returnContent;</span><br><span class="line">        isFound = <span class="keyword">false</span>;</span><br><span class="line">        fileList.forEach((String file) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (file.equalsIgnoreCase(fileName)) &#123;</span><br><span class="line">                isFound = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span> (isFound) &#123;</span><br><span class="line">            returnContent = <span class="string">&quot;[&quot;</span> + fileName + <span class="string">&quot;]传输中...&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            returnContent = <span class="string">&quot;下载失败，[&quot;</span> + fileName + <span class="string">&quot;]不存在&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Message message = <span class="keyword">new</span> Message(<span class="string">&quot;msg&quot;</span>).setFrom(<span class="string">&quot;FileServer&quot;</span>).setContent(returnContent).setTo(userName);</span><br><span class="line">        mediator.processMessage(message);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showFileList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        fileList.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="中介者实现类"><a class="header-anchor" href="#中介者实现类"></a>中介者实现类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteMediator</span> <span class="keyword">extends</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;FileServer&gt; fileServerList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteMediator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        String messageType = message.getType();</span><br><span class="line">        String content = message.getContent();</span><br><span class="line">        String from = message.getFrom();</span><br><span class="line">        String to = message.getTo();</span><br><span class="line">        <span class="keyword">switch</span> (messageType) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;file&quot;</span>:</span><br><span class="line">                fileServerList.forEach((FileServer server) -&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (content.startsWith(<span class="string">&quot;U&quot;</span>)) &#123;</span><br><span class="line">                        String fileName = content.substring(<span class="number">1</span>);</span><br><span class="line">                        server.upload(fileName, from);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (content.startsWith(<span class="string">&quot;D&quot;</span>)) &#123;</span><br><span class="line">                        String fileName = content.substring(<span class="number">1</span>);</span><br><span class="line">                        server.download(fileName, from);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">this</span>.processMessage(<span class="keyword">new</span> Message(<span class="string">&quot;msg&quot;</span>).setContent(<span class="string">&quot;请求内容错误&quot;</span>).setTo(from).setFrom(<span class="string">&quot;系统&quot;</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;msg&quot;</span>:</span><br><span class="line">                <span class="keyword">if</span> (to == <span class="keyword">null</span> || to.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                    userList.forEach((User u) -&gt; &#123;</span><br><span class="line">                        <span class="keyword">if</span>(!u.getName().equals(from)) &#123;</span><br><span class="line">                            String msg = from + <span class="string">&quot;: &quot;</span> + content;</span><br><span class="line">                            u.putMessage(msg);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    userList.forEach((User u)-&gt;&#123;</span><br><span class="line">                        <span class="keyword">if</span>(u.getName().equals(to))&#123;</span><br><span class="line">                            u.putMessage(from + <span class="string">&quot;: &quot;</span>+content);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userList.add(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFileServer</span><span class="params">(FileServer fileServer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fileServerList.add(fileServer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试类"><a class="header-anchor" href="#测试类"></a>测试类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MediatorTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Mediator mediator = <span class="keyword">new</span> ConcreteMediator();</span><br><span class="line"></span><br><span class="line">        FileServer fileServer = <span class="keyword">new</span> FileServer(mediator);</span><br><span class="line"></span><br><span class="line">        User u1 = <span class="keyword">new</span> User(mediator);</span><br><span class="line">        User u2 = <span class="keyword">new</span> User(mediator);</span><br><span class="line">        User u3 = <span class="keyword">new</span> User(mediator);</span><br><span class="line">        u1.setName(<span class="string">&quot;leithda&quot;</span>);</span><br><span class="line">        u2.setName(<span class="string">&quot;mellofly&quot;</span>);</span><br><span class="line">        u3.setName(<span class="string">&quot;吃瓜群众&quot;</span>);</span><br><span class="line"></span><br><span class="line">        u3.uploadFile(<span class="string">&quot;三国演义&quot;</span>);</span><br><span class="line">        u2.uploadFile(<span class="string">&quot;设计模式&quot;</span>);</span><br><span class="line"></span><br><span class="line">        u1.pushMessage(<span class="string">&quot;Hello, mellofly, Where are you?&quot;</span>,<span class="string">&quot;mellofly&quot;</span>);</span><br><span class="line">        u2.pushMessage(<span class="string">&quot;Hi，Le，我在上海，我上传了一个文件叫《设计模式》&quot;</span>,<span class="string">&quot;leithda&quot;</span>);</span><br><span class="line"></span><br><span class="line">        u1.pushMessage(<span class="string">&quot;大家，mellofly上传了《设计模式》，大家快去看啊&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        u1.downloadFile(<span class="string">&quot;设计模式&quot;</span>);</span><br><span class="line">        u2.downloadFile(<span class="string">&quot;三国演绎&quot;</span>);</span><br><span class="line">        u2.downloadFile(<span class="string">&quot;三国演义&quot;</span>);</span><br><span class="line">        u3.downloadFile(<span class="string">&quot;设计模式&quot;</span>);</span><br><span class="line"></span><br><span class="line">        u1.showMessages();</span><br><span class="line">        u2.showMessages();</span><br><span class="line">        u3.showMessages();</span><br><span class="line"></span><br><span class="line">        fileServer.showFileList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>为了好玩把例子写的太麻烦了 |T. T|</strong></li>
</ul>
<h2 id="Example"><a class="header-anchor" href="#Example"></a>Example</h2>
<ul>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Executor.html#execute-java.lang.Runnable-">java.util.concurrent.Executor#execute()</a></li>
<li>All scheduleXXX() methods of <a href="http://docs.oracle.com/javase/8/docs/api/java/util/Timer.html">java.util.Timer</a></li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Method.html#invoke-java.lang.Object-java.lang.Object...-">java.lang.reflect.Method#invoke()</a></li>
</ul>
<h2 id="Refence"><a class="header-anchor" href="#Refence"></a>Refence</h2>
<ul>
<li><a href="https://book.douban.com/subject/2334288/">&lt;大话设计模式&gt;</a></li>
<li><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">设计模式 | 菜鸟教程</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E7%9B%AE%E5%BD%95.md">Github | CyC2018</a></li>
</ul>
]]></content>
      <categories>
        <category>理论</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>享元模式</title>
    <url>/posts/2031750427.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>享元模式(Flyweight Pattern)主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。</p>

</blockquote>
<span id="more"></span>
<h2 id="Diagram"><a class="header-anchor" href="#Diagram"></a>Diagram</h2>
<img src="/posts/2031750427/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F.png" class="">
<h2 id="Implementation"><a class="header-anchor" href="#Implementation"></a>Implementation</h2>
<h3 id="享元接口"><a class="header-anchor" href="#享元接口"></a>享元接口</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Flyweight</span>  </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doOperation</span><span class="params">(String extrinsicState)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="享元实例"><a class="header-anchor" href="#享元实例"></a>享元实例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFlyweight</span> <span class="keyword">implements</span> <span class="title">Flyweight</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String intrinsicState;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteFlyweight</span><span class="params">(String intrinsicState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.intrinsicState = intrinsicState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doOperation</span><span class="params">(String extrinsicState)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Object address: &quot;</span> + System.identityHashCode(<span class="keyword">this</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;IntrinsicState: &quot;</span> + intrinsicState);</span><br><span class="line">        System.out.println(<span class="string">&quot;ExtrinsicState: &quot;</span> + extrinsicState);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="享元工厂类"><a class="header-anchor" href="#享元工厂类"></a>享元工厂类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyweightFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String,Flyweight&gt; flyweightHashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function">Flyweight <span class="title">getFlyweight</span><span class="params">(String intrinsicState)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!flyweightHashMap.containsKey(intrinsicState))&#123;</span><br><span class="line">            Flyweight flyweight = <span class="keyword">new</span> ConcreteFlyweight(intrinsicState);</span><br><span class="line">            flyweightHashMap.put(intrinsicState,flyweight);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flyweightHashMap.get(intrinsicState);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="测试类"><a class="header-anchor" href="#测试类"></a>测试类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyweightTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FlyweightFactory factory = <span class="keyword">new</span> FlyweightFactory();</span><br><span class="line">        Flyweight flyweight1 = factory.getFlyweight(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">        Flyweight flyweight2 = factory.getFlyweight(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">        flyweight1.doOperation(<span class="string">&quot;x&quot;</span>);</span><br><span class="line">        flyweight2.doOperation(<span class="string">&quot;y&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Example"><a class="header-anchor" href="#Example"></a>Example</h2>
<blockquote>
<p>Java 利用缓存来加速大量小对象的访问时间。</p>
</blockquote>
<ul>
<li>java.lang.Integer#valueOf(int)</li>
<li>java.lang.Boolean#valueOf(boolean)</li>
<li>java.lang.Byte#valueOf(byte)</li>
<li>java.lang.Character#valueOf(char)</li>
</ul>
<h2 id="Reflence"><a class="header-anchor" href="#Reflence"></a>Reflence</h2>
<ul>
<li><a href="https://book.douban.com/subject/2334288/">&lt;大话设计模式&gt;</a></li>
<li><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">设计模式 | 菜鸟教程</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E7%9B%AE%E5%BD%95.md">Github | CyC2018</a></li>
</ul>
]]></content>
      <categories>
        <category>理论</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>代理模式</title>
    <url>/posts/3822496321.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>代理模式(proxy)，为其他对象提供一种代理以控制对这个对象的访问。</p>

</blockquote>
<span id="more"></span>
<h2 id="Class-Diagram"><a class="header-anchor" href="#Class-Diagram"></a>Class Diagram</h2>
<img src="/posts/3822496321/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.png" class="">
<h2 id="Implementation"><a class="header-anchor" href="#Implementation"></a>Implementation</h2>
<h3 id="代理接口"><a class="header-anchor" href="#代理接口"></a>代理接口</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showImage</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="被代理类"><a class="header-anchor" href="#被代理类"></a>被代理类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HighResolutionImage</span> <span class="keyword">implements</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> URL imageURL;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> startTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> height;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> width;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HighResolutionImage</span><span class="params">(URL imageURL)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.imageURL = imageURL;</span><br><span class="line">        <span class="keyword">this</span>.startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">this</span>.width = <span class="number">600</span>;</span><br><span class="line">        <span class="keyword">this</span>.height = <span class="number">600</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLoad</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 模拟图片加载，延迟 3s 加载完成</span></span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">return</span> endTime - startTime &gt; <span class="number">3000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showImage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Real Image: &quot;</span> + imageURL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="代理类"><a class="header-anchor" href="#代理类"></a>代理类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageProxy</span> <span class="keyword">implements</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HighResolutionImage highResolutionImage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageProxy</span><span class="params">(HighResolutionImage highResolutionImage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.highResolutionImage = highResolutionImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showImage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!highResolutionImage.isLoad()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Temp Image: &quot;</span> + highResolutionImage.getWidth() + <span class="string">&quot; &quot;</span> + highResolutionImage.getHeight());</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        highResolutionImage.showImage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试类"><a class="header-anchor" href="#测试类"></a>测试类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        String image = <span class="string">&quot;http://image.jpg&quot;</span>;</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(image);</span><br><span class="line">        HighResolutionImage highResolutionImage = <span class="keyword">new</span> HighResolutionImage(url);</span><br><span class="line">        ImageProxy imageProxy = <span class="keyword">new</span> ImageProxy(highResolutionImage);</span><br><span class="line">        imageProxy.showImage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Example"><a class="header-anchor" href="#Example"></a>Example</h2>
<ul>
<li>java.lang.reflect.Proxy</li>
<li>RMI</li>
</ul>
<h2 id="Reflence"><a class="header-anchor" href="#Reflence"></a>Reflence</h2>
<ul>
<li><a href="https://book.douban.com/subject/2334288/">&lt;大话设计模式&gt;</a></li>
<li><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">设计模式 | 菜鸟教程</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E7%9B%AE%E5%BD%95.md">Github | CyC2018</a></li>
</ul>
]]></content>
      <categories>
        <category>理论</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>原型模式</title>
    <url>/posts/153761970.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>使用原型实例指定要创建对象的类型，通过复制这个原型来创建新对象。</p>

</blockquote>
<span id="more"></span>
<h2 id="Class-Diagram"><a class="header-anchor" href="#Class-Diagram"></a>Class Diagram</h2>
<img src="/posts/153761970/prototype.png" class="">
<h2 id="Implementation"><a class="header-anchor" href="#Implementation"></a>Implementation</h2>
<h3 id="原型接口"><a class="header-anchor" href="#原型接口"></a>原型接口</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Prototype</span> </span>&#123;</span><br><span class="line">    <span class="function">Prototype <span class="title">clone</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="原型实例"><a class="header-anchor" href="#原型实例"></a>原型实例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcretePrototype1</span> <span class="keyword">implements</span> <span class="title">Prototype</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Prototype <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ConcretePrototype1 prototype = <span class="keyword">new</span> ConcretePrototype1();</span><br><span class="line">        prototype.setName(<span class="keyword">this</span>.name);</span><br><span class="line">        <span class="keyword">return</span> prototype;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Now , This Prototype is ConcretePrototype1 , name = &quot;</span>+<span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcretePrototype2</span> <span class="keyword">implements</span> <span class="title">Prototype</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Prototype <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ConcretePrototype2 prototype = <span class="keyword">new</span> ConcretePrototype2();</span><br><span class="line">        prototype.setName(<span class="keyword">this</span>.name);</span><br><span class="line">        <span class="keyword">return</span> prototype;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Now , This Prototype is ConcretePrototype2 , name = &quot;</span>+<span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="原型管理器-原型过多时使用"><a class="header-anchor" href="#原型管理器-原型过多时使用"></a>原型管理器(原型过多时使用)</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrototypeManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Hashtable&lt;String,Prototype&gt; map = <span class="keyword">new</span> Hashtable&lt;String, Prototype&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadPrototype</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ConcretePrototype1 prototype1 = <span class="keyword">new</span> ConcretePrototype1();</span><br><span class="line">        prototype1.setName(<span class="string">&quot;prototype1&quot;</span>);</span><br><span class="line">        map.put(prototype1.getName(),prototype1);</span><br><span class="line"></span><br><span class="line">        ConcretePrototype2 prototype2 = <span class="keyword">new</span> ConcretePrototype2();</span><br><span class="line">        prototype2.setName(<span class="string">&quot;prototype2&quot;</span>);</span><br><span class="line">        map.put(prototype2.getName(),prototype2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Prototype <span class="title">getPrototype</span><span class="params">(String prototypeId)</span></span>&#123;</span><br><span class="line">        Prototype prototype = map.get(prototypeId);</span><br><span class="line">        <span class="keyword">return</span> prototype.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试类"><a class="header-anchor" href="#测试类"></a>测试类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrototypeTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        PrototypeManager.loadPrototype();</span><br><span class="line"></span><br><span class="line">        Prototype p1 = PrototypeManager.getPrototype(<span class="string">&quot;prototype1&quot;</span>);</span><br><span class="line">        System.out.println(p1);</span><br><span class="line">        Prototype p2 = PrototypeManager.getPrototype(<span class="string">&quot;prototype2&quot;</span>);</span><br><span class="line">        System.out.println(p2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Usage"><a class="header-anchor" href="#Usage"></a>Usage</h2>
<ul>
<li>对象之间相同或者相似，只有少部分属性不同</li>
<li>创建对象较为麻烦，复制对象较为简单时</li>
</ul>
<h2 id="Example"><a class="header-anchor" href="#Example"></a>Example</h2>
<ul>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#clone%28%29">java.lang.Object#clone()</a></li>
</ul>
<h2 id="Refence"><a class="header-anchor" href="#Refence"></a>Refence</h2>
<ul>
<li><a href="https://book.douban.com/subject/2334288/">&lt;大话设计模式&gt;</a></li>
<li><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">设计模式 | 菜鸟教程</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E7%9B%AE%E5%BD%95.md">Github | CyC2018</a></li>
</ul>
]]></content>
      <categories>
        <category>理论</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>命令模式</title>
    <url>/posts/256138576.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。</p>

</blockquote>
<span id="more"></span>
<h2 id="Class-Diagram"><a class="header-anchor" href="#Class-Diagram"></a>Class Diagram</h2>
<ul>
<li>Command：命令接口</li>
<li>Receiver：命令接收者，也就是命令真正的执行者</li>
<li>Invoker：组织命令</li>
</ul>
<img src="/posts/256138576/Command-Diagram.png" class="">
<h2 id="Implementation"><a class="header-anchor" href="#Implementation"></a>Implementation</h2>
<h3 id="命令接口"><a class="header-anchor" href="#命令接口"></a>命令接口</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="命令接收者-灯泡"><a class="header-anchor" href="#命令接收者-灯泡"></a>命令接收者(灯泡)</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Light</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Light is on!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Light is off!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="实际命令"><a class="header-anchor" href="#实际命令"></a>实际命令</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightOnCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    Light light;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LightOnCommand</span><span class="params">(Light light)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.light = light;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        light.on();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightOffCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    Light light;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LightOffCommand</span><span class="params">(Light light)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.light = light;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        light.off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="命令组织者-遥控器"><a class="header-anchor" href="#命令组织者-遥控器"></a>命令组织者(遥控器)</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Invoker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Command[] onCommands;</span><br><span class="line">    <span class="keyword">private</span> Command[] offCommands;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> slotNum = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Invoker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.onCommands = <span class="keyword">new</span> Command[slotNum];</span><br><span class="line">        <span class="keyword">this</span>.offCommands = <span class="keyword">new</span> Command[slotNum];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnCommand</span><span class="params">(Command command, <span class="keyword">int</span> slot)</span> </span>&#123;</span><br><span class="line">        onCommands[slot] = command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOffCommand</span><span class="params">(Command command, <span class="keyword">int</span> slot)</span> </span>&#123;</span><br><span class="line">        offCommands[slot] = command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onButtonWasPushed</span><span class="params">(<span class="keyword">int</span> slot)</span> </span>&#123;</span><br><span class="line">        onCommands[slot].execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">offButtonWasPushed</span><span class="params">(<span class="keyword">int</span> slot)</span> </span>&#123;</span><br><span class="line">        offCommands[slot].execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试"><a class="header-anchor" href="#测试"></a>测试</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Invoker invoker = <span class="keyword">new</span> Invoker();</span><br><span class="line">        Light light = <span class="keyword">new</span> Light();</span><br><span class="line">        Command lightOnCommand = <span class="keyword">new</span> LightOnCommand(light);</span><br><span class="line">        Command lightOffCommand = <span class="keyword">new</span> LightOffCommand(light);</span><br><span class="line">        invoker.setOnCommand(lightOnCommand, <span class="number">0</span>);</span><br><span class="line">        invoker.setOffCommand(lightOffCommand, <span class="number">0</span>);</span><br><span class="line">        invoker.onButtonWasPushed(<span class="number">0</span>);</span><br><span class="line">        invoker.offButtonWasPushed(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Example"><a class="header-anchor" href="#Example"></a>Example</h2>
<ul>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Runnable.html">java.lang.Runnable</a></li>
<li><a href="https://github.com/Netflix/Hystrix/wiki">Netflix Hystrix</a></li>
</ul>
]]></content>
      <categories>
        <category>理论</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>备忘录模式</title>
    <url>/posts/400445220.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>备忘录模式（Memento Pattern）保存一个对象的某个状态，以便在适当的时候恢复对象</p>

</blockquote>
<span id="more"></span>
<h2 id="Class-Diagram"><a class="header-anchor" href="#Class-Diagram"></a>Class Diagram</h2>
<ul>
<li><code>Memento</code> 包含了要被恢复的对象的状态</li>
<li><code>Originator</code> 创建并在 Memento 对象中存储状态</li>
<li><code>Caretaker</code> 对象负责从 Memento 中恢复对象的状态</li>
</ul>
<img src="/posts/400445220/Memento.png" class="">
<h2 id="Implementation"><a class="header-anchor" href="#Implementation"></a>Implementation</h2>
<h3 id="备忘录"><a class="header-anchor" href="#备忘录"></a>备忘录</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Memento</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Memento</span><span class="params">(String state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(String state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="备忘录记录"><a class="header-anchor" href="#备忘录记录"></a>备忘录记录</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CareTaker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Memento&gt; mementoList = <span class="keyword">new</span> ArrayList&lt;Memento&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Memento memento)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mementoList.add(memento);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mementoList.get(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="备忘录记录者"><a class="header-anchor" href="#备忘录记录者"></a>备忘录记录者</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Originator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(String state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">createMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Memento(state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(Memento memento)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = memento.getState();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;State : &quot;</span> + state);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试类"><a class="header-anchor" href="#测试类"></a>测试类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MementoTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        CareTaker careTaker = <span class="keyword">new</span> CareTaker();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化并建立备忘录</span></span><br><span class="line">        Originator o = <span class="keyword">new</span> Originator();</span><br><span class="line">        o.setState(<span class="string">&quot;init&quot;</span>);</span><br><span class="line">        o.show();</span><br><span class="line">        careTaker.add(o.createMemento());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 状态错误</span></span><br><span class="line">        o.setState(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        o.show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从备忘录中恢复</span></span><br><span class="line">        o.setMemento(careTaker.get(<span class="number">0</span>));</span><br><span class="line">        o.show();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Example"><a class="header-anchor" href="#Example"></a>Example</h2>
<ul>
<li>java.io.Serializable</li>
</ul>
<h2 id="Reflence"><a class="header-anchor" href="#Reflence"></a>Reflence</h2>
<ul>
<li><a href="https://book.douban.com/subject/2334288/">&lt;大话设计模式&gt;</a></li>
<li><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">设计模式 | 菜鸟教程</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E7%9B%AE%E5%BD%95.md">Github | CyC2018</a></li>
</ul>
]]></content>
      <categories>
        <category>理论</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>外观模式</title>
    <url>/posts/4158556840.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>外观模式（Facade Pattern）隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。这种类型的设计模式属于结构型模式，它向现有的系统添加一个接口，来隐藏系统的复杂性</p>

</blockquote>
<span id="more"></span>
<h2 id="使用场景"><a class="header-anchor" href="#使用场景"></a>使用场景</h2>
<ol>
<li>为复杂的模块或子系统提供外界访问的模块。</li>
<li>子系统相对独立。</li>
<li>预防低水平人员带来的风险。</li>
</ol>
<h2 id="优点"><a class="header-anchor" href="#优点"></a>优点</h2>
<ol>
<li>
<p>松散耦合，外观模式松散了客户端与子系统的耦合关系，让子系统内部的模块能更容易扩展和维护。</p>
</li>
<li>
<p>简单易用，外观模式让子系统更加易用，客户端不再需要了解子系统内部的实现，也不需要跟众多子系统内部的模块进行交互，只需要跟门面类交互就可以了。</p>
</li>
<li>
<p>更好的划分访问层次-通过合理使用 Facade，可以帮助我们更好地划分访问的层次。有些方法是对系统外的，有些方法是系统内部使用的。把需要暴露给外部的功能集中到门面中，这样既方便客户端使用，也很好地隐藏了内部的细节。</p>
</li>
</ol>
<h2 id="缺点"><a class="header-anchor" href="#缺点"></a>缺点</h2>
<p>不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。</p>
<h2 id="应用实例"><a class="header-anchor" href="#应用实例"></a>应用实例</h2>
<ol>
<li>tomcat中，通过RequestFacade类，实现了HttpRequest(或HttpResponse)对象的安全访问，防止在servlet中向上转型获取到Requset(或Response)对象</li>
</ol>
<h2 id="实现"><a class="header-anchor" href="#实现"></a>实现</h2>
<h3 id="子系统类"><a class="header-anchor" href="#子系统类"></a>子系统类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CPU</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;cpu startup!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;cpu shutdown!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Disk</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;disk startup!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;disk shutdown!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Memory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;memory startup!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;memory shutdown!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="外观类"><a class="header-anchor" href="#外观类"></a>外观类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CPU cpu;</span><br><span class="line">    <span class="keyword">private</span> Memory memory;</span><br><span class="line">    <span class="keyword">private</span> Disk disk;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Computer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cpu = <span class="keyword">new</span> CPU();</span><br><span class="line">        memory = <span class="keyword">new</span> Memory();</span><br><span class="line">        disk = <span class="keyword">new</span> Disk();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startup</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;start the computer!&quot;</span>);</span><br><span class="line">        cpu.startup();</span><br><span class="line">        memory.startup();</span><br><span class="line">        disk.startup();</span><br><span class="line">        System.out.println(<span class="string">&quot;start computer finished!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;begin to close the computer!&quot;</span>);</span><br><span class="line">        cpu.shutdown();</span><br><span class="line">        memory.shutdown();</span><br><span class="line">        disk.shutdown();</span><br><span class="line">        System.out.println(<span class="string">&quot;computer closed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="测试"><a class="header-anchor" href="#测试"></a>测试</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FacadeTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBootstrap</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Computer computer = <span class="keyword">new</span> Computer();</span><br><span class="line">        computer.startup();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testShutdown</span><span class="params">()</span> <span class="keyword">throws</span>  Exception</span>&#123;</span><br><span class="line">        Computer computer = <span class="keyword">new</span> Computer();</span><br><span class="line">        computer.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>理论</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>工厂模式</title>
    <url>/posts/1417187187.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>定义一个创建对象的接口，让其子类决定实例化哪个工厂类，工厂模式使其创建过程延迟到子类进行</p>

</blockquote>
<span id="more"></span>
<h1>工厂模式</h1>
<h2 id="使用场景"><a class="header-anchor" href="#使用场景"></a>使用场景</h2>
<ol>
<li>数据库访问，当用户不知道系统采用哪种数据库时，以及数据库可能发生变化时</li>
<li>需要根据不同条件创建不同的对象时</li>
</ol>
<h2 id="优点"><a class="header-anchor" href="#优点"></a>优点</h2>
<ol>
<li>一个调用者想创建一个对象，只要知道其名称就可以了。</li>
<li>扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。</li>
<li>屏蔽产品的具体实现，调用者只关心产品的接口。</li>
</ol>
<h2 id="缺点"><a class="header-anchor" href="#缺点"></a>缺点</h2>
<ol>
<li>每次增加实现都需要增加具体实现类，耦合性和复杂性会升高。</li>
<li>简单对象可以通过new实现，无须使用工厂模式，引入工厂会增加复杂度</li>
</ol>
<h2 id="实现"><a class="header-anchor" href="#实现"></a>实现</h2>
<h3 id="对象接口"><a class="header-anchor" href="#对象接口"></a>对象接口</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Office</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">bootstrap</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="实现类"><a class="header-anchor" href="#实现类"></a>实现类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Word</span> <span class="keyword">implements</span> <span class="title">Office</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bootstrap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Word 启动 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Word 启动失败!!\n\n&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//==========================================================</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Excel</span> <span class="keyword">implements</span> <span class="title">Office</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bootstrap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Excel 启动 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;加载系统配置...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;加载用户变量...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Excel 启动失败!!\n\n&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Excel 启动完成 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//===========================================================</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PowerPoint</span> <span class="keyword">implements</span> <span class="title">Office</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bootstrap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;PowerPoint 启动 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;图形化界面初始化...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">300</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;渲染进行中...&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">700</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;PowerPoint 启动失败!!\n\n&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;PowerPoint 启动成功 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="增加枚举类型"><a class="header-anchor" href="#增加枚举类型"></a>增加枚举类型</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.leithda.factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * User: leithda</span></span><br><span class="line"><span class="comment"> * Date: 2021/5/27</span></span><br><span class="line"><span class="comment"> * Time: 14:45</span></span><br><span class="line"><span class="comment"> * Description: Office类型枚举</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">OfficeType</span> </span>&#123;</span><br><span class="line">    WORD,</span><br><span class="line">    EXCEL,</span><br><span class="line">    PPT</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="增加工厂类"><a class="header-anchor" href="#增加工厂类"></a>增加工厂类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.leithda.factory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * User: leithda</span></span><br><span class="line"><span class="comment"> * Date: 2021/5/27</span></span><br><span class="line"><span class="comment"> * Time: 14:46</span></span><br><span class="line"><span class="comment"> * Description: Office工厂类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OfficeFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 Office 组件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 组件类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 组件实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Office <span class="title">getOffice</span><span class="params">(OfficeType type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> WORD:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Word();</span><br><span class="line">            <span class="keyword">case</span> EXCEL:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Excel();</span><br><span class="line">            <span class="keyword">case</span> PPT:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> PowerPoint();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;未知参数，无法创建对应实例&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试"><a class="header-anchor" href="#测试"></a>测试</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.leithda.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * User: leithda</span></span><br><span class="line"><span class="comment"> * Date: 2021/5/27</span></span><br><span class="line"><span class="comment"> * Time: 14:46</span></span><br><span class="line"><span class="comment"> * Description: 工厂模式测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OfficeFactoryTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Office word = OfficeFactory.getOffice(OfficeType.WORD);</span><br><span class="line">        Office excel = OfficeFactory.getOffice(OfficeType.EXCEL);</span><br><span class="line">        Office powerPoint = OfficeFactory.getOffice(OfficeType.PPT);</span><br><span class="line">        word.bootstrap();</span><br><span class="line">        excel.bootstrap();</span><br><span class="line">        powerPoint.bootstrap();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Word 启动 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span></span><br><span class="line"><span class="comment">Excel 启动 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span></span><br><span class="line"><span class="comment">加载系统配置...</span></span><br><span class="line"><span class="comment">加载用户变量...</span></span><br><span class="line"><span class="comment">Excel 启动完成 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span></span><br><span class="line"><span class="comment">PowerPoint 启动 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span></span><br><span class="line"><span class="comment">图形化界面初始化...</span></span><br><span class="line"><span class="comment">渲染进行中...</span></span><br><span class="line"><span class="comment">PowerPoint 启动成功 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="Usage"><a class="header-anchor" href="#Usage"></a>Usage</h2>
<ul>
<li>灵活控制生产过程</li>
<li>权限、修饰、日志…</li>
</ul>
]]></content>
      <categories>
        <category>理论</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>建造者模式</title>
    <url>/posts/3898751754.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>建造者模式(Builder Pattern)，将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>

</blockquote>
<span id="more"></span>
<h2 id="Class-Diagram"><a class="header-anchor" href="#Class-Diagram"></a>Class Diagram</h2>
<img src="/posts/3898751754/builderPattern.png" class="">
<h2 id="Implementation"><a class="header-anchor" href="#Implementation"></a>Implementation</h2>
<h3 id="具体产品"><a class="header-anchor" href="#具体产品"></a>具体产品</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; components = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String component)</span></span>&#123;</span><br><span class="line">        components.add(component);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;个人电脑，组成如下:\n--------------&quot;</span>);</span><br><span class="line">        components.forEach((System.out::println));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="建造者抽象类"><a class="header-anchor" href="#建造者抽象类"></a>建造者抽象类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildCPU</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildGPU</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildPower</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Computer <span class="title">build</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="具体建造者"><a class="header-anchor" href="#具体建造者"></a>具体建造者</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StandardComputer</span> <span class="keyword">extends</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Computer computer = <span class="keyword">new</span> Computer();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildCPU</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.add(<span class="string">&quot;处理器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildGPU</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.add(<span class="string">&quot;显卡&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.add(<span class="string">&quot;电源&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyComputer</span> <span class="keyword">extends</span> <span class="title">Builder</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Computer computer = <span class="keyword">new</span> Computer();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildCPU</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.add(<span class="string">&quot;AMD 2600x&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildGPU</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.add(<span class="string">&quot;GTX 2060&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildPower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        computer.add(<span class="string">&quot;爱国者 1250w&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Computer <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> computer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="指挥者"><a class="header-anchor" href="#指挥者"></a>指挥者</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">construct</span><span class="params">(Builder builder)</span></span>&#123;</span><br><span class="line">        builder.buildCPU();</span><br><span class="line">        builder.buildGPU();</span><br><span class="line">        builder.buildPower();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试"><a class="header-anchor" href="#测试"></a>测试</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BuilderTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Director director = <span class="keyword">new</span> Director();</span><br><span class="line"></span><br><span class="line">        Builder standardBuilder = <span class="keyword">new</span> StandardComputer();</span><br><span class="line">        Builder myBuilder = <span class="keyword">new</span> MyComputer();</span><br><span class="line"></span><br><span class="line">        director.construct(standardBuilder);</span><br><span class="line">        Computer standardComputer = standardBuilder.build();</span><br><span class="line">        standardComputer.display();</span><br><span class="line"></span><br><span class="line">        director.construct(myBuilder);</span><br><span class="line">        Computer myComputer = myBuilder.build();</span><br><span class="line">        myComputer.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Example"><a class="header-anchor" href="#Example"></a>Example</h2>
<ul>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html">java.lang.StringBuilder</a></li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/StringBuffer.html#append-boolean-">java.lang.StringBuffer</a></li>
</ul>
<h2 id="Refence"><a class="header-anchor" href="#Refence"></a>Refence</h2>
<ul>
<li><a href="https://book.douban.com/subject/2334288/">&lt;大话设计模式&gt;</a></li>
<li><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">设计模式 | 菜鸟教程</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E7%9B%AE%E5%BD%95.md">Github | CyC2018</a></li>
</ul>
]]></content>
      <categories>
        <category>理论</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>抽象工厂模式</title>
    <url>/posts/2506759259.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>抽象工厂模式（Abstract Factory Pattern）是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>

</blockquote>
<span id="more"></span>
<h2 id="Class-Diagram"><a class="header-anchor" href="#Class-Diagram"></a>Class Diagram</h2>
<img src="/posts/2506759259/abstractFactory.png" class="">
<h2 id="Implementation"><a class="header-anchor" href="#Implementation"></a>Implementation</h2>
<h3 id="接口及其实现类"><a class="header-anchor" href="#接口及其实现类"></a>接口及其实现类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside Rectangle::draw() method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside Square::draw() method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Green</span> <span class="keyword">implements</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside Green::fill() method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Red</span> <span class="keyword">implements</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside Red::fill() method.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="抽象工厂"><a class="header-anchor" href="#抽象工厂"></a>抽象工厂</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Color <span class="title">getColor</span><span class="params">(String color)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Shape <span class="title">getShape</span><span class="params">(String shape)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="实例工厂类"><a class="header-anchor" href="#实例工厂类"></a>实例工厂类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">(String shapeType)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Color <span class="title">getColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(color == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(color.equalsIgnoreCase(<span class="string">&quot;RED&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Red();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(color.equalsIgnoreCase(<span class="string">&quot;GREEN&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Green();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Color <span class="title">getColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">(String shapeType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(shapeType == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">&quot;RECTANGLE&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Rectangle();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">&quot;SQUARE&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Square();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="工厂创建类"><a class="header-anchor" href="#工厂创建类"></a>工厂创建类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryProducer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractFactory <span class="title">getFactory</span><span class="params">(String choice)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(choice.equalsIgnoreCase(<span class="string">&quot;SHAPE&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ShapeFactory();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(choice.equalsIgnoreCase(<span class="string">&quot;COLOR&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ColorFactory();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试"><a class="header-anchor" href="#测试"></a>测试</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactoryTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获取形状工厂</span></span><br><span class="line">        AbstractFactory shapeFactory = FactoryProducer.getFactory(<span class="string">&quot;SHAPE&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取形状为 Rectangle 的对象</span></span><br><span class="line">        Shape shape2 = shapeFactory.getShape(<span class="string">&quot;RECTANGLE&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用 Rectangle 的 draw 方法</span></span><br><span class="line">        shape2.draw();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取形状为 Square 的对象</span></span><br><span class="line">        Shape shape3 = shapeFactory.getShape(<span class="string">&quot;SQUARE&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用 Square 的 draw 方法</span></span><br><span class="line">        shape3.draw();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取颜色工厂</span></span><br><span class="line">        AbstractFactory colorFactory = FactoryProducer.getFactory(<span class="string">&quot;COLOR&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取颜色为 Red 的对象</span></span><br><span class="line">        Color color1 = colorFactory.getColor(<span class="string">&quot;RED&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用 Red 的 fill 方法</span></span><br><span class="line">        color1.fill();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取颜色为 Green 的对象</span></span><br><span class="line">        Color color2 = colorFactory.getColor(<span class="string">&quot;Green&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用 Green 的 fill 方法</span></span><br><span class="line">        color2.fill();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Example"><a class="header-anchor" href="#Example"></a>Example</h2>
<ul>
<li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/xpath/XPathFactory.html#newInstance--">javax.xml.xpath.XPathFactory</a></li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/javax/xml/parsers/DocumentBuilderFactory.html">javax.xml.parsers.DocumentBuilderFactory</a></li>
</ul>
]]></content>
      <categories>
        <category>理论</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>桥接模式</title>
    <url>/posts/3468020877.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>桥接模式(Bridge),将抽象部分与它的实线部分分离，使他们都可以独立地变化。</p>
<p>对于两个独立变化的维度，使用桥接模式可以避免通过继承导致的类爆炸</p>

</blockquote>
<span id="more"></span>
<h2 id="Class-Diagram"><a class="header-anchor" href="#Class-Diagram"></a>Class Diagram</h2>
<img src="/posts/3468020877/%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.png" class="">
<h2 id="Implementation"><a class="header-anchor" href="#Implementation"></a>Implementation</h2>
<p>RemoteControl 表示遥控器，指代 Abstraction。</p>
<p>TV 表示电视，指代 Implementor。</p>
<p>桥接模式将遥控器和电视分离开来，从而可以独立改变遥控器或者电视的实现。</p>
<h3 id="TV抽象类"><a class="header-anchor" href="#TV抽象类"></a>TV抽象类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TV</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">tuneChannel</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="TV-实现类"><a class="header-anchor" href="#TV-实现类"></a>TV 实现类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RCA</span> <span class="keyword">extends</span> <span class="title">TV</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;RCA.on()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;RCA.off()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tuneChannel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;RCA.tuneChannel()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sony</span> <span class="keyword">extends</span> <span class="title">TV</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sony on &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sony off &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tuneChannel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sony.tuneChannel &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="遥控器抽象类"><a class="header-anchor" href="#遥控器抽象类"></a>遥控器抽象类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteControl</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> TV tv;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RemoteControl</span><span class="params">(TV tv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">tuneChannel</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="具体遥控器"><a class="header-anchor" href="#具体遥控器"></a>具体遥控器</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ButtonRemoteControl</span> <span class="keyword">extends</span> <span class="title">RemoteControl</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ButtonRemoteControl</span><span class="params">(TV tv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(tv);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;按键遥控器.on()&quot;</span>);</span><br><span class="line">        tv.on();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;按键遥控器.off()&quot;</span>);</span><br><span class="line">        tv.off();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tuneChannel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;按键遥控器.tuneChannel()&quot;</span>);</span><br><span class="line">        tv.tuneChannel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VoiceRemoteControl</span> <span class="keyword">extends</span> <span class="title">RemoteControl</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VoiceRemoteControl</span><span class="params">(TV tv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(tv);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;语音遥控器.on()&quot;</span>);</span><br><span class="line">        tv.on();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;语音遥控器.off()&quot;</span>);</span><br><span class="line">        tv.off();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tuneChannel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;语音遥控器.tuneChannel()&quot;</span>);</span><br><span class="line">        tv.tuneChannel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试类"><a class="header-anchor" href="#测试类"></a>测试类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BridgeTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        ButtonRemoteControl buttonRemoteControl = <span class="keyword">new</span> ButtonRemoteControl(<span class="keyword">new</span> RCA());</span><br><span class="line">        buttonRemoteControl.on();</span><br><span class="line">        buttonRemoteControl.off();</span><br><span class="line">        buttonRemoteControl.tuneChannel();</span><br><span class="line"></span><br><span class="line">        VoiceRemoteControl voiceRemoteControl = <span class="keyword">new</span> VoiceRemoteControl(<span class="keyword">new</span> Sony());</span><br><span class="line">        voiceRemoteControl.on();</span><br><span class="line">        voiceRemoteControl.off();</span><br><span class="line">        voiceRemoteControl.tuneChannel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Exmaple"><a class="header-anchor" href="#Exmaple"></a>Exmaple</h2>
<ul>
<li>AWT (It provides an abstraction layer which maps onto the native OS the windowing support.)</li>
<li>JDBC</li>
</ul>
<h2 id="Reflence"><a class="header-anchor" href="#Reflence"></a>Reflence</h2>
<ul>
<li><a href="https://book.douban.com/subject/2334288/">&lt;大话设计模式&gt;</a></li>
<li><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">设计模式 | 菜鸟教程</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E7%9B%AE%E5%BD%95.md">Github | CyC2018</a></li>
</ul>
]]></content>
      <categories>
        <category>理论</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>模板模式</title>
    <url>/posts/2374608698.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>在模板模式（Template Pattern）中，一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行</p>

</blockquote>
<span id="more"></span>
<h2 id="Class-Diagram"><a class="header-anchor" href="#Class-Diagram"></a>Class Diagram</h2>
<img src="/posts/2374608698/%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F.png" class="">
<h2 id="Implemenation"><a class="header-anchor" href="#Implemenation"></a>Implemenation</h2>
<h3 id="模板类"><a class="header-anchor" href="#模板类"></a>模板类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">startPlay</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">endPlay</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模板</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化游戏</span></span><br><span class="line">        initialize();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开始游戏</span></span><br><span class="line">        startPlay();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//结束游戏</span></span><br><span class="line">        endPlay();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="模板实现类"><a class="header-anchor" href="#模板实现类"></a>模板实现类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Football</span> <span class="keyword">extends</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">endPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Football Game Finished!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Football Game Initialized! Start playing.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">startPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Football Game Started. Enjoy the game!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ====================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cricket</span> <span class="keyword">extends</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">endPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cricket Game Finished!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cricket Game Initialized! Start playing.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">startPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cricket Game Started. Enjoy the game!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试类"><a class="header-anchor" href="#测试类"></a>测试类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TemplateTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Game game = <span class="keyword">new</span> Cricket();</span><br><span class="line">        game.play();</span><br><span class="line">        System.out.println();</span><br><span class="line">        game = <span class="keyword">new</span> Football();</span><br><span class="line">        game.play();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Example"><a class="header-anchor" href="#Example"></a>Example</h2>
<ul>
<li>java.util.Collections#sort()</li>
<li>java.io.InputStream#skip()</li>
<li>java.io.InputStream#read()</li>
<li>java.util.AbstractList#indexOf()</li>
</ul>
<h2 id="Refence"><a class="header-anchor" href="#Refence"></a>Refence</h2>
<ul>
<li><a href="https://book.douban.com/subject/2334288/">&lt;大话设计模式&gt;</a></li>
<li><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">设计模式 | 菜鸟教程</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E7%9B%AE%E5%BD%95.md">Github | CyC2018</a></li>
</ul>
]]></content>
      <categories>
        <category>理论</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>状态模式</title>
    <url>/posts/307019047.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>状态模式(State):当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了一个类</p>

</blockquote>
<span id="more"></span>
<h2 id="Class-Diagram"><a class="header-anchor" href="#Class-Diagram"></a>Class Diagram</h2>
<img src="/posts/307019047/%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F.png" class="">
<h2 id="Implementation"><a class="header-anchor" href="#Implementation"></a>Implementation</h2>
<h3 id="状态接口"><a class="header-anchor" href="#状态接口"></a>状态接口</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String desc;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Context context)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="具体状态"><a class="header-anchor" href="#具体状态"></a>具体状态</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateA</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        desc = <span class="string">&quot;休息中&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前状态&quot;</span> + desc);</span><br><span class="line">        System.out.println(<span class="string">&quot;状态处理，切换工作状态&quot;</span>);</span><br><span class="line">        context.setState(<span class="keyword">new</span> ConcreteStateB());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;状态:&quot;</span> + desc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateB</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        desc = <span class="string">&quot;工作中&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前状态&quot;</span> + desc);</span><br><span class="line">        System.out.println(<span class="string">&quot;状态处理，切换工作状态&quot;</span>);</span><br><span class="line">        context.setState(<span class="keyword">new</span> ConcreteStateA());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;状态:&quot;</span> + desc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用状态的实例"><a class="header-anchor" href="#使用状态的实例"></a>使用状态的实例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> State state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> State <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(State state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>&#123;</span><br><span class="line">        state.handle(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">displayState</span><span class="params">()</span></span>&#123;</span><br><span class="line">        state.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试类"><a class="header-anchor" href="#测试类"></a>测试类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StateTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Context context = <span class="keyword">new</span> Context(<span class="keyword">new</span> ConcreteStateA());</span><br><span class="line">        context.displayState();</span><br><span class="line">        context.request();</span><br><span class="line">        context.displayState();</span><br><span class="line">        context.request();</span><br><span class="line">        context.displayState();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Example"><a class="header-anchor" href="#Example"></a>Example</h2>
<h2 id="Reflence"><a class="header-anchor" href="#Reflence"></a>Reflence</h2>
<ul>
<li><a href="https://book.douban.com/subject/2334288/">&lt;大话设计模式&gt;</a></li>
<li><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">设计模式 | 菜鸟教程</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E7%9B%AE%E5%BD%95.md">Github | CyC2018</a></li>
</ul>
]]></content>
      <categories>
        <category>理论</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>空对象模式</title>
    <url>/posts/3159547075.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>在空对象模式（Null Object Pattern）中，一个空对象取代 NULL 对象实例的检查。Null 对象不是检查空值，<br>
而是反应一个不做任何动作的关系。这样的 Null 对象也可以在数据不可用的时候提供默认的行为。</p>

</blockquote>
<span id="more"></span>
<h2 id="Class-Diagram"><a class="header-anchor" href="#Class-Diagram"></a>Class Diagram</h2>
<img src="/posts/3159547075/%E7%A9%BA%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%BC%8F.png" class="">
<h2 id="Implementation"><a class="header-anchor" href="#Implementation"></a>Implementation</h2>
<h3 id="抽象对象"><a class="header-anchor" href="#抽象对象"></a>抽象对象</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractObject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">isNil</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="对象"><a class="header-anchor" href="#对象"></a>对象</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealObject</span> <span class="keyword">extends</span> <span class="title">AbstractObject</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;do something &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NullObject</span> <span class="keyword">extends</span> <span class="title">AbstractObject</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="对象工厂"><a class="header-anchor" href="#对象工厂"></a>对象工厂</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractObject <span class="title">getObject</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(type != <span class="keyword">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> RealObject();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NullObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试"><a class="header-anchor" href="#测试"></a>测试</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NullObjectTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        AbstractObject real = ObjectFactory.getObject(<span class="string">&quot;real&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!real.isNil()) &#123;</span><br><span class="line">            real.request();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        AbstractObject nul = ObjectFactory.getObject(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!nul.isNil()) &#123;</span><br><span class="line">            nul.request();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Reflence"><a class="header-anchor" href="#Reflence"></a>Reflence</h2>
<ul>
<li><a href="https://book.douban.com/subject/2334288/">&lt;大话设计模式&gt;</a></li>
<li><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">设计模式 | 菜鸟教程</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E7%9B%AE%E5%BD%95.md">Github | CyC2018</a></li>
</ul>
]]></content>
      <categories>
        <category>理论</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>策略模式</title>
    <url>/posts/3932426784.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>定义一系列算法，封装每个算法，并使它们可以互换。<br>
策略模式(Strategy Pattern)可以让算法独立于使用它的客户端。</p>

</blockquote>
<span id="more"></span>
<h2 id="Class-Diagram"><a class="header-anchor" href="#Class-Diagram"></a>Class Diagram</h2>
<ul>
<li>Strategy 接口定义了一个算法族，它们都实现了 behavior() 方法</li>
<li>ontext 是使用到该算法族的类，其中的 doSomething() 方法会调用 behavior()，setStrategy(Strategy) 方法可以动态地改变 strategy 对象，也就是说能动态地改变 Context 所使用的算法</li>
<li>策略模式的策略类可以作为单例，如果设置为成员变量时可以不设置单例。</li>
</ul>
<img src="/posts/3932426784/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.png" class="">
<ul>
<li>与状态模式的比较</li>
</ul>
<p>状态模式的类图和策略模式类似，并且都是能够动态改变对象的行为。但是状态模式是通过状态转移来改变 Context 所组合的 State 对象，而策略模式是通过 Context 本身的决策来改变组合的 Strategy 对象。所谓的状态转移，是指 Context 在运行过程中由于一些条件发生改变而使得 State 对象发生改变，注意必须要是在运行过程中。</p>
<p>状态模式主要是用来解决状态转移的问题，当状态发生转移了，那么 Context 对象就会改变它的行为；而策略模式主要是用来封装一组可以互相替代的算法族，并且可以根据需要动态地去替换 Context 使用的算法。</p>
<h2 id="Implementation"><a class="header-anchor" href="#Implementation"></a>Implementation</h2>
<h3 id="策略接口"><a class="header-anchor" href="#策略接口"></a>策略接口</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 算法方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">behavior</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="具体策略"><a class="header-anchor" href="#具体策略"></a>具体策略</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyA</span> <span class="keyword">extends</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">behavior</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;策略A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyB</span> <span class="keyword">extends</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">behavior</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;策略B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="策略使用者"><a class="header-anchor" href="#策略使用者"></a>策略使用者</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    Strategy strategy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(Strategy strategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">        strategy.behavior();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试类"><a class="header-anchor" href="#测试类"></a>测试类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Context a = <span class="keyword">new</span> Context(<span class="keyword">new</span> ConcreteStrategyA());</span><br><span class="line">        a.doSomething();</span><br><span class="line"></span><br><span class="line">        Context b = <span class="keyword">new</span> Context(<span class="keyword">new</span> ConcreteStrategyB());</span><br><span class="line">        b.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Example"><a class="header-anchor" href="#Example"></a>Example</h2>
<ul>
<li>javax.servlet.Filter#doFilter()</li>
<li>java.util.Comparator#compare()</li>
</ul>
<h2 id="Usage"><a class="header-anchor" href="#Usage"></a>Usage</h2>
<ul>
<li>比如在类的构造器中，设置handler,方法内 handler.handle();</li>
</ul>
<h2 id="Refence"><a class="header-anchor" href="#Refence"></a>Refence</h2>
<ul>
<li><a href="https://book.douban.com/subject/2334288/">&lt;大话设计模式&gt;</a></li>
<li><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">设计模式 | 菜鸟教程</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E7%9B%AE%E5%BD%95.md">Github | CyC2018</a></li>
</ul>
]]></content>
      <categories>
        <category>理论</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>组合模式</title>
    <url>/posts/1191195587.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>组合模式(Composite),将对象组合成树形结构以表示’部分-整体’的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性</p>

</blockquote>
<span id="more"></span>
<h2 id="Class-Diagram"><a class="header-anchor" href="#Class-Diagram"></a>Class Diagram</h2>
<img src="/posts/1191195587/%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F.png" class="">
<h2 id="Implementation"><a class="header-anchor" href="#Implementation"></a>Implementation</h2>
<h3 id="组件接口"><a class="header-anchor" href="#组件接口"></a>组件接口</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Component</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        print(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> level)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component component)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component component)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="组合组件"><a class="header-anchor" href="#组合组件"></a>组合组件</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Composite</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Component&gt; child;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Composite</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        child = <span class="keyword">new</span> ArrayList&lt;Component&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; level; i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;--&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Composite:&quot;</span> + name);</span><br><span class="line">        <span class="keyword">for</span> (Component component : child) &#123;</span><br><span class="line">            component.print(level + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        child.add(component);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        child.remove(component);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="实例组件"><a class="header-anchor" href="#实例组件"></a>实例组件</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Leaf</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; level; i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;--&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;left:&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(); <span class="comment">// 牺牲透明性换取单一职责原则，这样就不用考虑是叶子节点还是组合节点</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试类"><a class="header-anchor" href="#测试类"></a>测试类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompositeTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Composite root = <span class="keyword">new</span> Composite(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        Component node1 = <span class="keyword">new</span> Leaf(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        Component node2 = <span class="keyword">new</span> Composite(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        Component node3 = <span class="keyword">new</span> Leaf(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        root.add(node1);</span><br><span class="line">        root.add(node2);</span><br><span class="line">        root.add(node3);</span><br><span class="line">        Component node21 = <span class="keyword">new</span> Leaf(<span class="string">&quot;21&quot;</span>);</span><br><span class="line">        Component node22 = <span class="keyword">new</span> Composite(<span class="string">&quot;22&quot;</span>);</span><br><span class="line">        node2.add(node21);</span><br><span class="line">        node2.add(node22);</span><br><span class="line">        Component node221 = <span class="keyword">new</span> Leaf(<span class="string">&quot;221&quot;</span>);</span><br><span class="line">        node22.add(node221);</span><br><span class="line">        root.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Example"><a class="header-anchor" href="#Example"></a>Example</h2>
<ul>
<li>java.util.Map#putAll(Map)</li>
<li>java.util.List#addAll(Collection)</li>
<li>java.util.Set#addAll(Collection)</li>
</ul>
<h2 id="Refence"><a class="header-anchor" href="#Refence"></a>Refence</h2>
<ul>
<li><a href="https://book.douban.com/subject/2334288/">&lt;大话设计模式&gt;</a></li>
<li><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">设计模式 | 菜鸟教程</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E7%9B%AE%E5%BD%95.md">Github | CyC2018</a></li>
</ul>
]]></content>
      <categories>
        <category>理论</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>装饰者模式</title>
    <url>/posts/1942064508.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构<br>
这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。</p>

</blockquote>
<span id="more"></span>
<h2 id="Class-Diagram"><a class="header-anchor" href="#Class-Diagram"></a>Class Diagram</h2>
<img src="/posts/1942064508/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F.png" class="">
<h2 id="Implementation"><a class="header-anchor" href="#Implementation"></a>Implementation</h2>
<h3 id="类接口"><a class="header-anchor" href="#类接口"></a>类接口</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String description = <span class="string">&quot;Unknown Beverage&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="实体类-被装饰者"><a class="header-anchor" href="#实体类-被装饰者"></a>实体类(被装饰者)</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DarkRoast</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DarkRoast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        description = <span class="string">&quot;DarkRoast&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.99</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="抽象装饰者"><a class="header-anchor" href="#抽象装饰者"></a>抽象装饰者</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CondimentDecorator</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *所有的调料装饰者都必须重新实现该方法，因为调料的该方法应该得到扩充，方法实现不同于原来方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="具体装饰者"><a class="header-anchor" href="#具体装饰者"></a>具体装饰者</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mocha</span> <span class="keyword">extends</span> <span class="title">CondimentDecorator</span> </span>&#123;</span><br><span class="line">    Beverage beverage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mocha</span><span class="params">(Beverage beverage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beverage = beverage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.getDescription() + <span class="string">&quot;, Mocha&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.20</span> + beverage.cost();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试类"><a class="header-anchor" href="#测试类"></a>测试类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecoratorTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Beverage beverage1 = <span class="keyword">new</span> DarkRoast();</span><br><span class="line">        beverage1 = <span class="keyword">new</span> Mocha(beverage1);</span><br><span class="line">        beverage1 = <span class="keyword">new</span> Mocha(beverage1);</span><br><span class="line">        System.out.println(beverage1.getDescription()+ <span class="string">&quot; $&quot;</span> + beverage1.cost());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Example"><a class="header-anchor" href="#Example"></a>Example</h2>
<ul>
<li>java.io.BufferedInputStream(InputStream)</li>
<li>java.io.BufferedOutputStream(OutputStream)</li>
</ul>
<h2 id="Refence"><a class="header-anchor" href="#Refence"></a>Refence</h2>
<ul>
<li><a href="https://book.douban.com/subject/2334288/">&lt;大话设计模式&gt;</a></li>
<li><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">设计模式 | 菜鸟教程</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E7%9B%AE%E5%BD%95.md">Github | CyC2018</a></li>
<li><a href="https://book.douban.com/subject/2243615/">《HeadFirst 设计模式》</a></li>
</ul>
]]></content>
      <categories>
        <category>理论</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>观察者模式</title>
    <url>/posts/2586075670.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知它的依赖对象。观察者模式属于行为型模式。</p>

</blockquote>
<span id="more"></span>
<h1>观察者模式</h1>
<h2 id="使用场景"><a class="header-anchor" href="#使用场景"></a>使用场景</h2>
<p>对象间存在一对多关系时，可以使用观察者模式。<br>
当一个对象被修改时，可以通知依赖于它的其他对象。</p>
<h2 id="举个栗子"><a class="header-anchor" href="#举个栗子"></a>举个栗子</h2>
<ol>
<li>拍卖的时候，拍卖师观察最高标价，然后通知给其他竞价者竞价</li>
</ol>
<h2 id="注意事项"><a class="header-anchor" href="#注意事项"></a>注意事项</h2>
<ul>
<li>Java中已经含有对观察者模式的支持类s</li>
<li>避免循环引用</li>
<li>如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式</li>
</ul>
<h2 id="实现"><a class="header-anchor" href="#实现"></a>实现</h2>
<h3 id="被观察类"><a class="header-anchor" href="#被观察类"></a>被观察类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; observers</span><br><span class="line">            = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> state;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state;</span><br><span class="line">        notifyAllObservers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加观察者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Observer observer)</span></span>&#123;</span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyAllObservers</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer : observers) &#123;</span><br><span class="line">            observer.update();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="观察接口"><a class="header-anchor" href="#观察接口"></a>观察接口</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Subject subject;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="观察者实例"><a class="header-anchor" href="#观察者实例"></a>观察者实例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryObserver</span> <span class="keyword">extends</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BinaryObserver</span><span class="params">(Subject subject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subject = subject;</span><br><span class="line">        <span class="keyword">this</span>.subject.attach(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Binary String: &quot;</span></span><br><span class="line">                + Integer.toBinaryString(subject.getState()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试"><a class="header-anchor" href="#测试"></a>测试</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObserverTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Subject subject = <span class="keyword">new</span> Subject();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> BinaryObserver(subject);    <span class="comment">// 二进制</span></span><br><span class="line">        <span class="keyword">new</span> OctalObserver (subject);    <span class="comment">// 八进制</span></span><br><span class="line">        <span class="keyword">new</span> HexaObserver(subject);  <span class="comment">// 十六进制</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;First state change: 15&quot;</span>);</span><br><span class="line">        subject.setState(<span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Second state change: 10&quot;</span>);</span><br><span class="line">        subject.setState(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>理论</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>解释器模式</title>
    <url>/posts/1940214718.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>解释器模式（Interpreter Pattern）提供了评估语言的语法或表达式的方式，它属于行为型模式。这种模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。</p>

</blockquote>
<span id="more"></span>
<h2 id="Class-Diagram"><a class="header-anchor" href="#Class-Diagram"></a>Class Diagram</h2>
<img src="/posts/1940214718/interpreter.png" class="">
<h2 id="Implementation"><a class="header-anchor" href="#Implementation"></a>Implementation</h2>
<h3 id="表达式接口"><a class="header-anchor" href="#表达式接口"></a>表达式接口</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="非终结表达式-操作符表达式"><a class="header-anchor" href="#非终结表达式-操作符表达式"></a>非终结表达式(操作符表达式)</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">NonTerminalExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line">    Expression e1,e2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NonTerminalExpression</span><span class="params">(Expression e1, Expression e2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.e1 = e1;</span><br><span class="line">        <span class="keyword">this</span>.e2 = e2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>加法操作</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlusExpression</span> <span class="keyword">extends</span> <span class="title">NonTerminalExpression</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PlusExpression</span><span class="params">(Expression e1, Expression e2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(e1, e2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">this</span>.e1.interpret() + <span class="keyword">this</span>.e2.interpret();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>减法操作</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MinusExpression</span> <span class="keyword">extends</span> <span class="title">NonTerminalExpression</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinusExpression</span><span class="params">(Expression e1, Expression e2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(e1, e2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.e1.interpret() - <span class="keyword">this</span>.e2.interpret();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="终结表达式-数据表达式"><a class="header-anchor" href="#终结表达式-数据表达式"></a>终结表达式(数据表达式)</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TerminalExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    String value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TerminalExpression</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.parseInt(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="增加表达式解析器"><a class="header-anchor" href="#增加表达式解析器"></a>增加表达式解析器</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpressionParser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Expression <span class="title">parse</span><span class="params">(String expr)</span></span>&#123;</span><br><span class="line">        Expression expression = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;expr.length();i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> ch =  expr.charAt(i);</span><br><span class="line">            <span class="keyword">switch</span>(ch)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                    expression = <span class="keyword">new</span> PlusExpression(expression,<span class="keyword">new</span> TerminalExpression(String.valueOf(expr.charAt(++i))));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                    expression = <span class="keyword">new</span> MinusExpression(expression,<span class="keyword">new</span> TerminalExpression(String.valueOf(expr.charAt(++i))));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    expression = <span class="keyword">new</span> TerminalExpression(String.valueOf(ch));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> expression;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试"><a class="header-anchor" href="#测试"></a>测试</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterpreterTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        TerminalExpression s3 = <span class="keyword">new</span> TerminalExpression(<span class="string">&quot;333&quot;</span>);</span><br><span class="line">        TerminalExpression s5 = <span class="keyword">new</span> TerminalExpression(<span class="string">&quot;555&quot;</span>);</span><br><span class="line">        TerminalExpression s8 = <span class="keyword">new</span> TerminalExpression(<span class="string">&quot;888&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> result = <span class="keyword">new</span> MinusExpression(<span class="keyword">new</span> PlusExpression(s3,s8),s5).interpret();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Expression exp = ExpressionParser.parse(<span class="string">&quot;3+8-5&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> result = exp.interpret();</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Example"><a class="header-anchor" href="#Example"></a>Example</h2>
<ul>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html">java.util.Pattern</a></li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/text/Format.html">java.text.Format 及子类</a></li>
</ul>
<h2 id="Refence"><a class="header-anchor" href="#Refence"></a>Refence</h2>
<ul>
<li><a href="https://book.douban.com/subject/2334288/">&lt;大话设计模式&gt;</a></li>
<li><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">设计模式 | 菜鸟教程</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E7%9B%AE%E5%BD%95.md">Github | CyC2018</a></li>
</ul>
]]></content>
      <categories>
        <category>理论</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>访问者模式</title>
    <url>/posts/2960930216.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>通过访问者模式，可以通过访问者类进行对固定数据的不同方式的访问。增加访问方式只要增加访问类而不需要更改数据对象。</p>

</blockquote>
<span id="more"></span>
<h2 id="Class-Diagram"><a class="header-anchor" href="#Class-Diagram"></a>Class Diagram</h2>
<img src="/posts/2960930216/visitor.png" class="">
<h2 id="Implementation"><a class="header-anchor" href="#Implementation"></a>Implementation</h2>
<h3 id="数据接口"><a class="header-anchor" href="#数据接口"></a>数据接口</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="具体数据类型"><a class="header-anchor" href="#具体数据类型"></a>具体数据类型</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElementA</span> <span class="keyword">implements</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Element A operation&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElementB</span> <span class="keyword">implements</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationB</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Element B operation&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="访问者接口"><a class="header-anchor" href="#访问者接口"></a>访问者接口</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ElementA elemA)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ElementB elemB)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="具体访问者"><a class="header-anchor" href="#具体访问者"></a>具体访问者</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OneVisitor</span> <span class="keyword">extends</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ElementA elemA)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;访问者 OneVisitor 访问 ElementA&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ElementB elemB)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;访问者 OneVisitor 访问 ElementB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TwoVisitor</span> <span class="keyword">extends</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ElementA elemA)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;访问者 TwoVisitor 访问 ElementA&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ElementB elemB)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;访问者 TwoVisitor 访问 ElementB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="对外提供访问"><a class="header-anchor" href="#对外提供访问"></a>对外提供访问</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectStructure</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Element&gt; elementList = <span class="keyword">new</span> ArrayList&lt;Element&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Element element)</span></span>&#123;</span><br><span class="line">        elementList.add(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detach</span><span class="params">(Element element)</span></span>&#123;</span><br><span class="line">        elementList.remove(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span></span>&#123;</span><br><span class="line">        elementList.forEach((element)-&gt;&#123;</span><br><span class="line">            element.accept(visitor);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试"><a class="header-anchor" href="#测试"></a>测试</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VisitorTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ObjectStructure objectStructure = <span class="keyword">new</span> ObjectStructure();</span><br><span class="line">        objectStructure.attach(<span class="keyword">new</span> ElementA());</span><br><span class="line">        objectStructure.attach(<span class="keyword">new</span> ElementB());</span><br><span class="line"></span><br><span class="line">        objectStructure.accept(<span class="keyword">new</span> OneVisitor());</span><br><span class="line">        objectStructure.accept(<span class="keyword">new</span> TwoVisitor());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Exmaple"><a class="header-anchor" href="#Exmaple"></a>Exmaple</h2>
<ul>
<li>javax.lang.model.element.Element and javax.lang.model.element.ElementVisitor</li>
<li>javax.lang.model.type.TypeMirror and javax.lang.model.type.TypeVisitor</li>
</ul>
<h2 id="Reflence"><a class="header-anchor" href="#Reflence"></a>Reflence</h2>
<ul>
<li><a href="https://book.douban.com/subject/2334288/">&lt;大话设计模式&gt;</a></li>
<li><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">设计模式 | 菜鸟教程</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E7%9B%AE%E5%BD%95.md">Github | CyC2018</a></li>
</ul>
]]></content>
      <categories>
        <category>理论</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>责任链模式</title>
    <url>/posts/1644716670.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>顾名思义，责任链模式(Chain of Responsibility Pattern) 为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。</p>

</blockquote>
<span id="more"></span>
<h1>责任链（Chain Of Responsibility）</h1>
<h2 id="Class-Diagram"><a class="header-anchor" href="#Class-Diagram"></a>Class Diagram</h2>
<h2 id="Implementation"><a class="header-anchor" href="#Implementation"></a>Implementation</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * User: 长歌</span></span><br><span class="line"><span class="comment"> * Date: 2019/11/6</span></span><br><span class="line"><span class="comment"> * Description: 抽象日志组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractLogger</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> INFO = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> DEBUG = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> ERROR = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> level;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//责任链中的下一个元素</span></span><br><span class="line">    <span class="keyword">protected</span> AbstractLogger nextLogger;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextLogger</span><span class="params">(AbstractLogger nextLogger)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nextLogger = nextLogger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logMessage</span><span class="params">(<span class="keyword">int</span> level, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.level &lt;= level) &#123;</span><br><span class="line">            write(message);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nextLogger != <span class="keyword">null</span>) &#123;</span><br><span class="line">            nextLogger.logMessage(level, message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String message)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsoleLogger</span> <span class="keyword">extends</span> <span class="title">AbstractLogger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConsoleLogger</span><span class="params">(<span class="keyword">int</span> level)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Standard Console::Logger: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorLogger</span> <span class="keyword">extends</span> <span class="title">AbstractLogger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ErrorLogger</span><span class="params">(<span class="keyword">int</span> level)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Error Console::Logger: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileLogger</span> <span class="keyword">extends</span> <span class="title">AbstractLogger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileLogger</span><span class="params">(<span class="keyword">int</span> level)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;File::Logger: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * User: 长歌</span></span><br><span class="line"><span class="comment"> * Date: 2019/11/6</span></span><br><span class="line"><span class="comment"> * Description: 日志工厂类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggerFactroy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LoggerFactroy</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractLogger <span class="title">getLogger</span><span class="params">()</span></span>&#123;</span><br><span class="line">        AbstractLogger logger = <span class="keyword">new</span> ErrorLogger(AbstractLogger.ERROR);</span><br><span class="line">        AbstractLogger fileLogger = <span class="keyword">new</span> FileLogger(AbstractLogger.DEBUG);</span><br><span class="line">        AbstractLogger consoleLogger = <span class="keyword">new</span> ConsoleLogger(AbstractLogger.INFO);</span><br><span class="line"></span><br><span class="line">        logger.setNextLogger(fileLogger);</span><br><span class="line">        fileLogger.setNextLogger(consoleLogger);</span><br><span class="line">        <span class="keyword">return</span> logger;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试类"><a class="header-anchor" href="#测试类"></a>测试类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainOfResponsibilityPatternTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        AbstractLogger logger = LoggerFactroy.getLogger();</span><br><span class="line">        logger.logMessage(AbstractLogger.INFO, <span class="string">&quot;This is an information.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        logger.logMessage(AbstractLogger.DEBUG,</span><br><span class="line">                <span class="string">&quot;This is a debug level information.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        logger.logMessage(AbstractLogger.ERROR,</span><br><span class="line">                <span class="string">&quot;This is an error information.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Example"><a class="header-anchor" href="#Example"></a>Example</h2>
<ul>
<li>[javax.servlet.Filter#doFilter()</li>
</ul>
]]></content>
      <categories>
        <category>理论</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>过滤器模式</title>
    <url>/posts/3277476179.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>过滤器模式（Filter Pattern）或标准模式（Criteria Pattern）是一种设计模式，这种模式允许开发人员使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来</p>

</blockquote>
<span id="more"></span>
<h2 id="Class-Diagram"><a class="header-anchor" href="#Class-Diagram"></a>Class Diagram</h2>
<img src="/posts/3277476179/%E8%BF%87%E6%BB%A4%E5%99%A8%E6%A8%A1%E5%BC%8F.png" class="">
<h2 id="Implementation"><a class="header-anchor" href="#Implementation"></a>Implementation</h2>
<h3 id="过滤器接口"><a class="header-anchor" href="#过滤器接口"></a>过滤器接口</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">doFilter</span><span class="params">(List&lt;T&gt; list)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="具体过滤器"><a class="header-anchor" href="#具体过滤器"></a>具体过滤器</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFilterA</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">doFilter</span><span class="params">(List&lt;T&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> List&lt;T&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.forEach((item)-&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span>(!item.equals(<span class="string">&quot;a&quot;</span>))&#123;</span><br><span class="line">                result.add(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFilterB</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">doFilter</span><span class="params">(List&lt;T&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> List&lt;T&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.forEach((item)-&gt;&#123;</span><br><span class="line">            <span class="keyword">if</span>(!item.equals(<span class="string">&quot;b&quot;</span>))&#123;</span><br><span class="line">                result.add(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试类"><a class="header-anchor" href="#测试类"></a>测试类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; stringList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;Filter&gt; filterList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        stringList.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        stringList.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        stringList.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        stringList.add(<span class="string">&quot;d&quot;</span>);</span><br><span class="line"></span><br><span class="line">        filterList.add(<span class="keyword">new</span> ConcreteFilterA());</span><br><span class="line">        filterList.add(<span class="keyword">new</span> ConcreteFilterB());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        filterList.forEach((filter -&gt; &#123;</span><br><span class="line">            List&lt;String&gt; result = filter.doFilter(stringList);</span><br><span class="line">            System.out.println(<span class="string">&quot;Filter&quot;</span>+filter.getClass().getSimpleName()+<span class="string">&quot; : &quot;</span>+result.toString());</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Example"><a class="header-anchor" href="#Example"></a>Example</h2>
<ul>
<li>List.stream().filter()</li>
</ul>
<h2 id="Reflence"><a class="header-anchor" href="#Reflence"></a>Reflence</h2>
<ul>
<li><a href="https://book.douban.com/subject/2334288/">&lt;大话设计模式&gt;</a></li>
<li><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">设计模式 | 菜鸟教程</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E7%9B%AE%E5%BD%95.md">Github | CyC2018</a></li>
</ul>
]]></content>
      <categories>
        <category>理论</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>迭代器模式</title>
    <url>/posts/1151138151.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>一种模式用于顺序访问集合对象的元素，不需要知道集合对象的底层表示。</p>

</blockquote>
<span id="more"></span>
<h2 id="Class-Diagram"><a class="header-anchor" href="#Class-Diagram"></a>Class Diagram</h2>
<img src="/posts/1151138151/iterator.png" class="">
<h2 id="Implementation"><a class="header-anchor" href="#Implementation"></a>Implementation</h2>
<h3 id="迭代器接口"><a class="header-anchor" href="#迭代器接口"></a>迭代器接口</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否有下一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是|否</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取下一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="迭代器实现类"><a class="header-anchor" href="#迭代器实现类"></a>迭代器实现类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * User: 长歌</span></span><br><span class="line"><span class="comment"> * Date: 2019/11/15</span></span><br><span class="line"><span class="comment"> * Description: 词典</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dictionary</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String words[] = &#123;<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>,<span class="string">&quot;leithda&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;String&gt; <span class="title">iterator</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cursor;</span><br><span class="line">        <span class="keyword">int</span> lastRet = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cursor != words.length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i = cursor;</span><br><span class="line">            <span class="keyword">if</span>(i &gt;= words.length)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            cursor = i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> words[lastRet = i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试"><a class="header-anchor" href="#测试"></a>测试</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Dictionary dictionary = <span class="keyword">new</span> Dictionary();</span><br><span class="line"></span><br><span class="line">        Iterator it = dictionary.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Example"><a class="header-anchor" href="#Example"></a>Example</h2>
<ul>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html">java.util.Iterator</a></li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/util/Enumeration.html">java.util.Enumeration</a></li>
</ul>
<h2 id="Refence"><a class="header-anchor" href="#Refence"></a>Refence</h2>
<ul>
<li><a href="https://book.douban.com/subject/2334288/">&lt;大话设计模式&gt;</a></li>
<li><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">设计模式 | 菜鸟教程</a></li>
<li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20%E7%9B%AE%E5%BD%95.md">Github | CyC2018</a></li>
</ul>
]]></content>
      <categories>
        <category>理论</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>适配器模式</title>
    <url>/posts/4123342314.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>将一个接口转换成客户希望的另一个接口，使接口不兼容的那些类可以一起工作，其别名为包装器(Wrapper)。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式</p>

</blockquote>
<span id="more"></span>
<h1>适配器模式</h1>
<h2 id="使用场景"><a class="header-anchor" href="#使用场景"></a>使用场景</h2>
<ol>
<li>系统需要使用一些现有的类，而这些类的接口（如方法名）不符合系统的需要，甚至没有这些类的源代码。</li>
<li>想创建一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。</li>
</ol>
<h2 id="优点"><a class="header-anchor" href="#优点"></a>优点</h2>
<ol>
<li>可以让任何两个没有关联的类一起运行。</li>
<li>提高了类的复用。</li>
<li>增加了类的透明度。</li>
<li>灵活性好。</li>
</ol>
<h2 id="缺点"><a class="header-anchor" href="#缺点"></a>缺点</h2>
<ol>
<li>过多的使用适配器，会让系统很凌乱，明明调用的这个接口的方法，里面的实现却是另一个方法</li>
<li>java 最多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。</li>
</ol>
<h2 id="实现"><a class="header-anchor" href="#实现"></a>实现</h2>
<ul>
<li>再来一个好理解的例子，我们国家的民用电都是 220V，日本是 110V，而我们的手机充电一般需要 5V，这时候要充电，就需要一个电压适配器，将 220V 或者 100V 的输入电压变换为 5V 输出</li>
</ul>
<h3 id="电压接口"><a class="header-anchor" href="#电压接口"></a>电压接口</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AC</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出电压</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 电压值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">outputAC</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="电压实例"><a class="header-anchor" href="#电压实例"></a>电压实例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AC110</span> <span class="keyword">implements</span> <span class="title">AC</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">outputAC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ac = <span class="number">110</span>;</span><br><span class="line">        <span class="keyword">return</span> ac;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AC220</span> <span class="keyword">implements</span> <span class="title">AC</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">outputAC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ac = <span class="number">220</span>;</span><br><span class="line">        <span class="keyword">return</span> ac;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="适配器接口"><a class="header-anchor" href="#适配器接口"></a>适配器接口</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DC5Adapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否可以适配</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ac 电压</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">support</span><span class="params">(AC ac)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 适配处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ac 输入电压</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 适配后电压</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">outputDC5V</span><span class="params">(AC ac)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="适配器实例"><a class="header-anchor" href="#适配器实例"></a>适配器实例</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChinaPowerAdapter</span> <span class="keyword">implements</span> <span class="title">DC5Adapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> voltage = <span class="number">220</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">support</span><span class="params">(AC ac)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (voltage == ac.outputAC());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">outputDC5V</span><span class="params">(AC ac)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> adapterInput = ac.outputAC();</span><br><span class="line">        <span class="comment">//变压器...</span></span><br><span class="line">        <span class="keyword">int</span> adapterOutput = adapterInput / <span class="number">44</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用ChinaPowerAdapter变压适配器，输入AC:&quot;</span> + adapterInput + <span class="string">&quot;V&quot;</span> + <span class="string">&quot;，输出DC:&quot;</span> + adapterOutput + <span class="string">&quot;V&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> adapterOutput;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JapanPowerAdapter</span> <span class="keyword">implements</span> <span class="title">DC5Adapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> voltage = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">support</span><span class="params">(AC ac)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (voltage == ac.outputAC());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">outputDC5V</span><span class="params">(AC ac)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> adapterInput = ac.outputAC();</span><br><span class="line">        <span class="comment">//变压器...</span></span><br><span class="line">        <span class="keyword">int</span> adapterOutput = adapterInput / <span class="number">22</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用JapanPowerAdapter变压适配器，输入AC:&quot;</span> + adapterInput + <span class="string">&quot;V&quot;</span> + <span class="string">&quot;，输出DC:&quot;</span> + adapterOutput + <span class="string">&quot;V&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> adapterOutput;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="手机充电器类"><a class="header-anchor" href="#手机充电器类"></a>手机充电器类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Charger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;DC5Adapter&gt; adapters = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Charger</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.adapters.add(<span class="keyword">new</span> ChinaPowerAdapter());</span><br><span class="line">        <span class="keyword">this</span>.adapters.add(<span class="keyword">new</span> JapanPowerAdapter());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换电压</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ac 输入电压</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 输出电压</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">convertAC</span><span class="params">(AC ac)</span> </span>&#123;</span><br><span class="line">        DC5Adapter adapter = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (DC5Adapter ad : <span class="keyword">this</span>.adapters) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ad.support(ac)) &#123;</span><br><span class="line">                adapter = ad;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (adapter == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span>  IllegalArgumentException(<span class="string">&quot;没有找到合适的变压适配器&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> adapter.outputDC5V(ac);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="测试如下"><a class="header-anchor" href="#测试如下"></a>测试如下</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdapterTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出如下：</span></span><br><span class="line"><span class="comment">     *     被适配者的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBasic1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Adapter adapter = <span class="keyword">new</span> Adapter();</span><br><span class="line"></span><br><span class="line">        adapter.request();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出如下：</span></span><br><span class="line"><span class="comment">     *     被适配者的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBasic2</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Adapter2 adapter = <span class="keyword">new</span> Adapter2();</span><br><span class="line"></span><br><span class="line">        adapter.request();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出如下：</span></span><br><span class="line"><span class="comment">     *     使用ChinaPowerAdapter变压适配器，输入AC:220V，输出DC:5V</span></span><br><span class="line"><span class="comment">     *     220V电压 充电 转换后的电压为:5</span></span><br><span class="line"><span class="comment">     *     使用JapanPowerAdapter变压适配器，输入AC:110V，输出DC:5V</span></span><br><span class="line"><span class="comment">     *     110V电压 充电 转换后的电压为:5</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCharger</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">        AC chinaAC = <span class="keyword">new</span> AC220();</span><br><span class="line">        Charger charger = <span class="keyword">new</span> Charger();</span><br><span class="line">        System.out.println(<span class="string">&quot;220V电压 充电 转换后的电压为:&quot;</span>+charger.convertAC(chinaAC));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 去日本旅游，电压是 110V</span></span><br><span class="line">        AC japanAC = <span class="keyword">new</span> AC110();</span><br><span class="line">        System.out.println(<span class="string">&quot;110V电压 充电 转换后的电压为:&quot;</span>+charger.convertAC(japanAC));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>对应结构如图:</li>
</ul>
<img src="/posts/4123342314/adapter.png" class="">
<h2 id="个人理解"><a class="header-anchor" href="#个人理解"></a>个人理解</h2>
<blockquote>
<p>想复用现有接口或者方法签名，但是需要增加额外功能时使用适配器模式</p>
</blockquote>
]]></content>
      <categories>
        <category>理论</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/posts/4049607742.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>
<p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p>

</blockquote>
<span id="more"></span>
<h2 id="Implementation"><a class="header-anchor" href="#Implementation"></a>Implementation</h2>
<h3 id="懒汉式"><a class="header-anchor" href="#懒汉式"></a>懒汉式</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.leithda.single;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * User: leithda</span></span><br><span class="line"><span class="comment"> * Date: 2021/5/27</span></span><br><span class="line"><span class="comment"> * Time: 13:09</span></span><br><span class="line"><span class="comment"> * Description: 单例模式1，懒汉式，线程不安全，Lazy加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置构造函数为私有，防止类被实例化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">/* 可以通过下面代码避免反射多次实例化 单例对象</span></span><br><span class="line"><span class="comment">    private Singleton()&#123;</span></span><br><span class="line"><span class="comment">        if(instance != null)&#123;</span></span><br><span class="line"><span class="comment">            throw new IllegalArgumentException(&quot;单例构造器不能重复使用&quot;);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="懒汉式2"><a class="header-anchor" href="#懒汉式2"></a>懒汉式2</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.leithda.single;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * User: leithda</span></span><br><span class="line"><span class="comment"> * Date: 2021/5/27</span></span><br><span class="line"><span class="comment"> * Time: 13:20</span></span><br><span class="line"><span class="comment"> * Description: 单例模式2，懒汉式，线程安全，Lazy加载，性能低</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton2 instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  加锁 synchronized  保证单例，影响效率</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton2 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton2();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="饿汉式"><a class="header-anchor" href="#饿汉式"></a>饿汉式</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.leithda.single;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * User: leithda</span></span><br><span class="line"><span class="comment"> * Date: 2021/5/27</span></span><br><span class="line"><span class="comment"> * Time: 13:20</span></span><br><span class="line"><span class="comment"> * Description: 单例模式3，饿汉式，线程安全，无Lazy加载，浪费内存</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton3</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  类装载时对象就会实例化，浪费内存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton3 instance = <span class="keyword">new</span> Singleton3();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton3</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton3 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="双重锁验锁"><a class="header-anchor" href="#双重锁验锁"></a>双重锁验锁</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.leithda.single;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * User: leithda</span></span><br><span class="line"><span class="comment"> * Date: 2021/5/27</span></span><br><span class="line"><span class="comment"> * Time: 13:21</span></span><br><span class="line"><span class="comment"> * Description: 单例模式4，双重锁验锁（DCL，即 double-checked locking）,线程安全，Lazy加载，性能较高，实现复杂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton4</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加volatile是为了避免代码优化时进行重排序，导致返回未初始化成功的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton4 instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton4</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton4 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 当对象没有加载时，拿锁进行对象实例化保证单例。对象加载时，直接返回，性能较好</span></span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton4.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton4();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="内部类"><a class="header-anchor" href="#内部类"></a>内部类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.leithda.single;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * User: leithda</span></span><br><span class="line"><span class="comment"> * Date: 2021/5/27</span></span><br><span class="line"><span class="comment"> * Time: 13:21</span></span><br><span class="line"><span class="comment"> * Description: 单例模式5，内部类实现，线程安全，Lazy加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton5</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 优化了Singleton3，使用静态内部类实现了Lazy加载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleHolder</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton5 INSTANCE  = <span class="keyword">new</span> Singleton5();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton5</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton5 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingleHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="枚举方式"><a class="header-anchor" href="#枚举方式"></a>枚举方式</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.leithda.single;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * User: leithda</span></span><br><span class="line"><span class="comment"> * Date: 2021/5/27</span></span><br><span class="line"><span class="comment"> * Time: 13:22</span></span><br><span class="line"><span class="comment"> * Description: 单例模式6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Singleton6</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这种方式可以防止通过 reflection attact 调用类的私有构造方法</span></span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="测试"><a class="header-anchor" href="#测试"></a>测试</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.leithda.single;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * User: leithda</span></span><br><span class="line"><span class="comment"> * Date: 2021/5/27</span></span><br><span class="line"><span class="comment"> * Time: 13:10</span></span><br><span class="line"><span class="comment"> * Description: 单例模式测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Singleton singletonFirst = Singleton.getInstance();</span><br><span class="line">        Singleton singletonSecond = Singleton.getInstance();</span><br><span class="line">        System.out.println(<span class="string">&quot;singleton==singleton1 is &quot;</span> + (singletonFirst == singletonSecond));</span><br><span class="line"></span><br><span class="line">        Singleton2 singleton2First = Singleton2.getInstance();</span><br><span class="line">        Singleton2 singleton2Second = Singleton2.getInstance();</span><br><span class="line">        System.out.println(<span class="string">&quot;singleton2First==singleton2Second is &quot;</span> + (singleton2First == singleton2Second));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Singleton3 singleton3First = Singleton3.getInstance();</span><br><span class="line">        Singleton3 singleton3Second = Singleton3.getInstance();</span><br><span class="line">        System.out.println(<span class="string">&quot;singleton3First==singleton3Second is &quot;</span> + (singleton3First == singleton3Second));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Singleton4 singleton4First = Singleton4.getInstance();</span><br><span class="line">        Singleton4 singleton4Second = Singleton4.getInstance();</span><br><span class="line">        System.out.println(<span class="string">&quot;singleton4First==singleton4Second is &quot;</span> + (singleton4First == singleton4Second));</span><br><span class="line"></span><br><span class="line">        Singleton5 singleton5First = Singleton5.getInstance();</span><br><span class="line">        Singleton5 singleton5Second = Singleton5.getInstance();</span><br><span class="line">        System.out.println(<span class="string">&quot;singleton5First==singleton5Second is &quot;</span> + (singleton5First == singleton5Second));</span><br><span class="line"></span><br><span class="line">        Singleton6 singleton6First = Singleton6.INSTANCE;</span><br><span class="line">        Singleton6 singleton6Second = Singleton6.INSTANCE;</span><br><span class="line">        System.out.println(<span class="string">&quot;singleton6First==singleton6Second is &quot;</span> + (singleton6First == singleton6Second));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>关于反射调用示例私有构造方法的例子可以自行测试，可以通过Singleton中方式避免反射执行私有构造函数。</li>
</ul>
<h2 id="Usage"><a class="header-anchor" href="#Usage"></a>Usage</h2>
<ul>
<li>某些情况下，某个类要求只有一个实例的情况下</li>
<li>对象需要被共享时，使用单例可以节约内存空间，加快访问速度。如Web中的配置对象、数据库连接池等</li>
<li>当某个类需要频繁实例化，而创建的对象有频繁被销毁的情况下。如多线程的线程池、网络连接池等</li>
<li>各种 配置类 XxxManager 及 工厂类 XxxFactory</li>
</ul>
]]></content>
      <categories>
        <category>理论</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装MySQL</title>
    <url>/posts/728095789.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>CentOS上使用Docker安装MySQL</p>

</blockquote>
<span id="more"></span>
<h1>Docker安装MySQL</h1>
<h2 id="安装docker"><a class="header-anchor" href="#安装docker"></a>安装docker</h2>
<ol>
<li>
<p>安装 <code>yum-utils</code>工具包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>添加docker的yum源(阿里源)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>卸载旧版本(如果存在则删除)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum -y remove docker docker-common docker-selinux docker-engine</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查看所有版本，并选择指定版本安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum list docker-ce --showduplicates | sort -r</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>安装docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install docker-ce # 默认安装最新版本</span><br></pre></td></tr></table></figure>
<ul>
<li><code>$ yum install docker-ce-&lt;VERSION_STRING&gt; </code>(指定安装版本)。例：<code> yum install docker-ce-18.03.1.ce</code></li>
</ul>
</li>
<li>
<p>验证安装成功</p>
</li>
<li>
<p>启动并加入开机启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker       # (重启命令  $  systemctl restart docker ) </span><br><span class="line">sudo systemctl enable docker   # 开机自启动</span><br><span class="line">sudo docker version  # 查看docker版本号</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>验证安装成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>将当前用户(此时可以使用dev登录)加入到<code>docker</code>用户组</p>
<ul>
<li>
<p>新增<code>docker</code>用户组，已存在可忽略</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo groupadd docker</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>将用户加入<code>docker</code>用户组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo usermod -aG docker $&#123;USER&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>重启<code>docker</code>服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>重新登录用户</p>
</li>
</ul>
</li>
</ol>
<h2 id="安装MySQL"><a class="header-anchor" href="#安装MySQL"></a>安装MySQL</h2>
<ol start="2">
<li>
<p>查看可用的MySQL版本</p>
<p><a href="https://hub.docker.com/_/mysql?tab=tags">Docker-MySQL版本</a></p>
</li>
<li>
<p>拉取docker镜像（可以直接使用第7步操作进行拉取）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br><span class="line"><span class="comment"># docker pull mysql:&#123;tag&#125;</span></span><br><span class="line"><span class="comment"># 如 docker pull mysql:5.7</span></span><br><span class="line"><span class="comment"># docker pull mysql 会默认拉取最新版本</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查看本地是否安装了MySQL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>创建本地数据目录及复制MySQL的配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /home/dev/data/mysql/data /home/dev/data/mysql/logs /home/dev/data/mysql/conf</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├── mysql</span><br><span class="line">│   ├── conf <span class="comment"># 拷贝自MySQL</span></span><br><span class="line">│   │   ├── docker.cnf</span><br><span class="line">│   │   ├── mysql.cnf</span><br><span class="line">│   │   └── mysqldump.cnf</span><br><span class="line">│   ├── data</span><br><span class="line">│   └── logs</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>配置文件挂载到服务器主要为了修改方便，<strong>配置文件可以通过如下方式获取</strong>.</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动获取配置文件的docker容器</span></span><br><span class="line">$ docker run -p 23306:3306 --name mysql_config -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器是否启动</span></span><br><span class="line">$ docker ps</span><br><span class="line">CONTAINER ID   IMAGE       COMMAND                  CREATED          STATUS          PORTS                                                    NAMES</span><br><span class="line">e454f36eb8c5   mysql:5.7   <span class="string">&quot;docker-entrypoint.s…&quot;</span>   26 seconds ago   Up 24 seconds   33060/tcp, 0.0.0.0:23306-&gt;3306/tcp, :::23306-&gt;3306/tcp   mysql_config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器，查看配置文件</span></span><br><span class="line">$ docker <span class="built_in">exec</span> -it mysql_config /bin/bash</span><br><span class="line">$ <span class="built_in">cd</span> /etc/mysql/conf.d/</span><br><span class="line">$ ls -rlt</span><br><span class="line">total 12</span><br><span class="line">-rw-r--r-- 1 root root 55 Aug  3  2016 mysqldump.cnf</span><br><span class="line">-rw-r--r-- 1 root root  8 Aug  3  2016 mysql.cnf</span><br><span class="line">-rw-r--r-- 1 root root 43 Apr 19 18:57 docker.cnf</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">exit</span> <span class="comment"># 退出容器</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝容器中文件到本机， `.` 表示拷贝到当前目录</span></span><br><span class="line">$ docker cp mysql_config:/etc/mysql/conf.d/ .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看拷贝结果</span></span><br><span class="line">$ ls</span><br><span class="line">conf.d  data  front  install_package  java  middle</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将conf.d中文件拷贝到指定的文件夹即可</span></span><br><span class="line">$ mv conf.d/* ~/data/mysql/conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除空文件夹</span></span><br><span class="line">$ rm -rf conf.d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭容器并删除</span></span><br><span class="line">$ docker stop mysql_config</span><br><span class="line">$ docker rm mysql_config</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>启动脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql -v /home/dev/data/mysql/conf:/etc/mysql/conf.d -v /home/dev/data/mysql/logs:/logs -v /home/dev/data/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-p 主机端口：容器内端口</code>：将容器内的MySQL使用的3306端口映射到主机的3306端口</li>
<li><code>-v 主机路径：容器内路径</code>：将容器内路径映射到主机路径</li>
<li><code>-e VAR=&#123;value&#125;</code>：指定容器内环境变量的值</li>
<li><code>-d</code>：指定容器后台运行</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>软件安装</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装JDK</title>
    <url>/posts/1441854962.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>Linux 安装 JDK</p>

</blockquote>
<span id="more"></span>
<h1>Linux安装JDK</h1>
<h2 id="下载jdk"><a class="header-anchor" href="#下载jdk"></a>下载jdk</h2>
<p>进入 <a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">jdk下载页面</a> 下载 <code>jdk-8u291-linux-x64.tar.gz</code>安装包并上传至服务器</p>
<ul>
<li>版本任意选择</li>
</ul>
<h2 id="解压"><a class="header-anchor" href="#解压"></a>解压</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /opt/soft</span><br><span class="line"></span><br><span class="line">sudo tar -zxvf jdk-8u291-linux-x64.tar.gz -C /opt/soft</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="配置环境变量"><a class="header-anchor" href="#配置环境变量"></a>配置环境变量</h2>
<blockquote>
<p>编辑<code>/etc/profile</code> 文件</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在文件最后添加以下内容</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/soft/jdk1.8.0_291  <span class="comment"># jdk解压目录</span></span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$&#123;JAVA_HOME&#125;</span>/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib:<span class="variable">$CLASSPATH</span></span><br><span class="line"><span class="built_in">export</span> JAVA_PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="variable">$&#123;JRE_HOME&#125;</span>/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$&#123;JAVA_PATH&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="刷新配置文件"><a class="header-anchor" href="#刷新配置文件"></a>刷新配置文件</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
<h2 id="验证"><a class="header-anchor" href="#验证"></a>验证</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dev @ localhost in ~ [10:17:39] </span></span><br><span class="line">$ java -version</span><br><span class="line">java version <span class="string">&quot;1.8.0_291&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_291-b10)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.291-b10, mixed mode)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>软件安装</category>
      </categories>
      <tags>
        <tag>jdk</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装Zookeeper</title>
    <url>/posts/549757466.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>Linux 安装 Zookeeper</p>

</blockquote>
<span id="more"></span>
<h1>Linux安装Zookeeper</h1>
<h2 id="下载安装包"><a class="header-anchor" href="#下载安装包"></a>下载安装包</h2>
<p>进入到 <a href="http://zookeeper.apache.org/releases.html">Apache ZooKeeper</a>，下载安装包(注意下载可执行包，不是源码包)</p>
<h2 id="解压安装包"><a class="header-anchor" href="#解压安装包"></a>解压安装包</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tar -zxvf apache-zookeeper-3.6.3-bin.tar.gz -C /opt/soft</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名</span></span><br><span class="line">sudo mv /opt/soft/apache-zookeeper-3.6.3-bin /opt/soft/zookeeper-3.6.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据及日志文件夹</span></span><br><span class="line"><span class="built_in">cd</span> /opt/soft/zookeeper-3.6.3</span><br><span class="line">sudo mkdir data</span><br></pre></td></tr></table></figure>
<h2 id="配置文件"><a class="header-anchor" href="#配置文件"></a>配置文件</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/soft/zookeeper-3.6.3/conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝示例配置文件</span></span><br><span class="line">sudo cp zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure>
<h2 id="修改配置文件"><a class="header-anchor" href="#修改配置文件"></a>修改配置文件</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vi zoo.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定数据文件路径为刚才创建好的目录</span></span><br><span class="line">dataDir=/opt/soft/zookeeper-3.6.3/data</span><br></pre></td></tr></table></figure>
<h2 id="启动"><a class="header-anchor" href="#启动"></a>启动</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入软件目录</span></span><br><span class="line"><span class="built_in">cd</span> /opt/soft/zookeeper-3.6.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">./bin/zkServer.sh start zoo.cfg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">./bin/zkServer.sh stop zoo.cfg</span><br></pre></td></tr></table></figure>
<h2 id="查看"><a class="header-anchor" href="#查看"></a>查看</h2>
<p>使用jps命令查看zookeeper进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ jps</span><br><span class="line">1972 QuorumPeerMain</span><br><span class="line">2011 Jps</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>软件安装</category>
      </categories>
      <tags>
        <tag>Zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建源码调试环境</title>
    <url>/posts/2366354889.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>万丈高楼平地起，让我们开始Tomcat源码的探索之路吧~</p>

</blockquote>
<span id="more"></span>
<h1>搭建源码调试环境</h1>
<h2 id="下载源码"><a class="header-anchor" href="#下载源码"></a>下载源码</h2>
<h2 id="导入IDEA"><a class="header-anchor" href="#导入IDEA"></a>导入IDEA</h2>
<h2 id="文件调整"><a class="header-anchor" href="#文件调整"></a>文件调整</h2>
<h2 id=""><a class="header-anchor" href="#"></a></h2>
]]></content>
      <categories>
        <category>源码</category>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>源码</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis开发与运维笔记_API的理解和使用</title>
    <url>/posts/4241361649.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>Redis提供了5种数据结构，理解每种数据结构的特点对于Redis开发运维非常重要，同时掌握Redis的单线程命令处理机制，会使数据结构和命令的选择事半功倍</p>

</blockquote>
<span id="more"></span>
<p>参考书籍：<a href="https://book.douban.com/subject/26971561/">Redis开发与运维</a></p>
<hr>
<h1>API的理解和使用</h1>
<h2 id="预备"><a class="header-anchor" href="#预备"></a>预备</h2>
<h3 id="全局命令"><a class="header-anchor" href="#全局命令"></a>全局命令</h3>
<ol>
<li>查看所有键</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">keys *</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>键总数</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dbsize</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>dbsize</code>命令直接获取Redis内置的键总数，复杂度是<strong>O(1)</strong>。<code>keys</code>会获取所有键，复杂度是<strong>O(n)</strong>,当Redis中保存大量键时，线上环境应禁止使用。</p>
</blockquote>
<ol start="3">
<li>检查键是否存在</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">exists key</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>删除键</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">del key [key ...]</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>键过期</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">expire key seconds</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>ttl</code>命令会返回键的过期时间。返回结果有以下几种：</p>
<ul>
<li><strong>大于等于0的整数</strong>：键剩余的过期时间</li>
<li><strong>-1</strong>：键没有设置过期时间</li>
<li><strong>-2</strong>：键不存在</li>
</ul>
</blockquote>
<ol start="6">
<li>键的数据结构类型</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span> key</span><br></pre></td></tr></table></figure>
<h3 id="数据结构和内部编码"><a class="header-anchor" href="#数据结构和内部编码"></a>数据结构和内部编码</h3>
<blockquote>
<p>type命令返回的是当前键的数据结构，它们分别是：<code>string、hash、list、set、zset</code><br>
实际上，每种数据结构都有自己底层的内部编码实现。<br>
可以使用<code>object encoding key</code>命令获取当前键使用的内部编码。</p>
</blockquote>
<img src="/posts/4241361649/redis%E7%9A%84%E4%BA%94%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png" class="" title="redis的五种数据结构">
<img src="/posts/4241361649/Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E5%86%85%E9%83%A8%E7%BC%96%E7%A0%81.png" class="" title="Redis数据结构和内部编码">
<p>Redis这样设计有两点好处：1）改进内部编码时，对外的数据结构和命令没有影响。2）不同的内部编码具有不同的优势。如:ziplist比较节省内存。</p>
<h3 id="单线程架构"><a class="header-anchor" href="#单线程架构"></a>单线程架构</h3>
<blockquote>
<p>Redis使用了单线程架构和<strong>I/O多路复用模型</strong><sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>来实现高性能的内存数据库服务</p>
</blockquote>
<h4 id="单线程模型"><a class="header-anchor" href="#单线程模型"></a>单线程模型</h4>
<p>Redis使用单线程处理命令，所以不会存在两条命令同时执行的情况，避免了并发问题。</p>
<h4 id="为什么单线程这么快"><a class="header-anchor" href="#为什么单线程这么快"></a>为什么单线程这么快</h4>
<p>通常来讲，单线程处理能力要比多线程差，为什么Redis这么快？</p>
<ol>
<li>纯内存访问</li>
<li>非阻塞I/O，Redis使用<strong>epoll</strong><sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>作为I/O多路复用技术的实现</li>
<li>单线程避免了线程切换和竞争产生的消耗</li>
</ol>
<blockquote>
<p>单线程简化了数据结构和算法的实现，避免了线程切换和线程竞争的消耗。但是存在如下问题：单线程模型对每条命令的执行时间是有要求的。如果某个命令执行时间过长，会造成其他命令的阻塞。</p>
</blockquote>
<h2 id="字符串"><a class="header-anchor" href="#字符串"></a>字符串</h2>
<blockquote>
<p>字符串是Redis最基本的数据结构，字符串类型的值实际可以是字符串(简单的字符串、复杂的字符串[如Json、xml等]、数字[整数、浮点数]、甚至是二进制[图片、音频、视频])，但是值最大不能超过512M</p>
</blockquote>
<h3 id="命令"><a class="header-anchor" href="#命令"></a>命令</h3>
<h4 id="常用命令"><a class="header-anchor" href="#常用命令"></a>常用命令</h4>
<ol>
<li>设置值</li>
</ol>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SET key value [expiration EX seconds|PX milliseconds] [NX|XX]</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>EX seconds</strong>：秒级过期时间，功能等同<code>SETEX key seconds value</code>命令</li>
<li><strong>PX milliseconds</strong>：毫秒级过期时间</li>
<li><strong>NX</strong>：键不存在则设置成功，功能等同<code>SETNX key value</code>命令</li>
<li><strong>XX</strong>：键存在则设置成功</li>
</ul>
<blockquote>
<p><code>setnx</code>在多个客户端执行时，只有一个客户端才能成功，可以作为分布式锁的一种实现方式。<a href="https://redis.io/topics/distlock">Redis官方方案</a>。</p>
</blockquote>
<ol start="2">
<li>获取值</li>
</ol>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">GET key</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果键不存在，返回<code>nil</code></p>
</blockquote>
<ol start="3">
<li>批量设置值</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MSET key value [key value ...]</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>批量获取值</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">MGET key [key ...]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>批量操作可以节省网络开销时间。</p>
</blockquote>
<ol start="5">
<li>计数</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">INCR key</span><br><span class="line">INCRBY key increment</span><br><span class="line">DECR key</span><br><span class="line">DECRBY key decrement</span><br><span class="line">INCRBYFLOAT key increment</span><br></pre></td></tr></table></figure>
<blockquote>
<p>编程语言中常用CAS机制实现计数功能，存在一定CPU开销。Redis使用单线程机制则不存在这个问题</p>
</blockquote>
<h4 id="不常用命令"><a class="header-anchor" href="#不常用命令"></a>不常用命令</h4>
<ol>
<li>追加值 <code>APPEND key value</code></li>
<li>字符串长度 <code>STRLEN key</code></li>
<li>设置并返回值 <code>GETSET key value</code></li>
<li>设置指定位置的字符 <code>SETRANGE key offset value</code></li>
<li>获取部分字符串 <code>GETRANGE key start end</code></li>
</ol>
<h3 id="内部编码"><a class="header-anchor" href="#内部编码"></a>内部编码</h3>
<blockquote>
<p>字符串的内部编码有三种：</p>
<ol>
<li><strong>int</strong>：8个字节的长整型</li>
<li><strong>embstr</strong>：小于等于39个字节的字符串</li>
<li><strong>raw</strong>：大于39个字节的字符串</li>
</ol>
</blockquote>
<h3 id="典型使用场景"><a class="header-anchor" href="#典型使用场景"></a>典型使用场景</h3>
<ol>
<li>缓存功能</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">UserInfo <span class="title">getUserInfo</span><span class="params">(<span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">  String userInfoKey = <span class="string">&quot;user:info&quot;</span> + id;</span><br><span class="line">  String value = redis.get(userInfoKey);</span><br><span class="line">  UserInfo userInfo;</span><br><span class="line">  <span class="keyword">if</span>(value != <span class="keyword">null</span>)&#123;</span><br><span class="line">    userInfo = deserialize(value);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    userInfo = mysql.get(id);</span><br><span class="line">    <span class="keyword">if</span>(userInfo != <span class="keyword">null</span>)&#123;</span><br><span class="line">      redis.setex(userInfoKey, <span class="number">3600</span>, serialize(userInfo));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> userInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>计数</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">incrVideoCount</span><span class="params">(<span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">  key = <span class="string">&quot;video:playCount:&quot;</span> + id;</span><br><span class="line">  <span class="keyword">return</span> redis.incr(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>共享Session</li>
</ol>
<p>将Session保存在Redis实现多端共享。</p>
<ol start="4">
<li>限速</li>
</ol>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 60s内短信发送不得超过5次</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">phoneVerify</span><span class="params">(String phoneNumber)</span></span>&#123;</span><br><span class="line">  key = <span class="string">&quot;shortMsg:limit:&quot;</span> + phoneNumber;</span><br><span class="line">  isExists = redis.set(key,<span class="number">1</span>,<span class="string">&quot;EX 60&quot;</span>,<span class="string">&quot;NX&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span>(isExists != <span class="keyword">null</span> || redis.incr(key) &lt;= <span class="number">5</span>)&#123;</span><br><span class="line">    <span class="comment">// 通过 </span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 限速 </span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="哈希"><a class="header-anchor" href="#哈希"></a>哈希</h2>
<h3 id="命令-2"><a class="header-anchor" href="#命令-2"></a>命令</h3>
<ol>
<li>设置值</li>
<li>获取值 <code>HGET key field</code></li>
<li>删除field  <code>HDEL key field [field ...]</code></li>
<li>计算field个数 <code>HLEN key</code></li>
<li>批量设置或获取field-value</li>
</ol>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HMGET key field [field ...]</span><br><span class="line">HMSET key field value [field value ...]</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>判断field是否存在 <code>HEXISTS key field</code></li>
<li>获取所有的field <code>HKEYS key</code></li>
<li>获取所有的value <code>HVALS key</code></li>
<li>获取所有的field-value  <code>HGETALL key</code></li>
<li>hincrby hincrbyfloat</li>
</ol>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HINCRBY key field increment</span><br><span class="line">HINCRBYFLOAT key field increment</span><br></pre></td></tr></table></figure>
<ol start="11">
<li>计算value的字符串长度 <code>HSTRLEN key field</code></li>
</ol>
<h2 id="列表"><a class="header-anchor" href="#列表"></a>列表</h2>
<h3 id="命令-3"><a class="header-anchor" href="#命令-3"></a>命令</h3>
<table>
<thead>
<tr>
<th>操作类型</th>
<th>操作</th>
</tr>
</thead>
<tbody>
<tr>
<td>添加</td>
<td><code>rpush</code>、<code>rpushx</code>、<code>lpush</code>、<code>lpushx</code>、<code>linsert</code></td>
</tr>
<tr>
<td>查</td>
<td><code>lrange</code>、<code>lindex</code>、<code>llen</code></td>
</tr>
<tr>
<td>删除</td>
<td><code>lpop</code>、<code>rpop</code>、<code>lrem</code>、<code>ltrim</code></td>
</tr>
<tr>
<td>修改</td>
<td><code>lset</code></td>
</tr>
<tr>
<td>阻塞操作</td>
<td><code>blpop</code>、<code>brpop</code></td>
</tr>
</tbody>
</table>
<h4 id="添加"><a class="header-anchor" href="#添加"></a>添加</h4>
<ul>
<li>从列表右侧添加：<code> RPUSH key value [value ...]</code></li>
<li>当列表存在时，从右侧添加：<code>RPUSHX key value</code></li>
<li>在首个指定元素pivot(前/后)添加元素:<code>LINSERT key BEFORE|AFTER pivot value</code></li>
</ul>
<h4 id="查"><a class="header-anchor" href="#查"></a>查</h4>
<ul>
<li>获取指定范围内的列表元素:<code>LRANGE key start stop</code></li>
<li>根据索引获取元素:<code>LINDEX key index</code></li>
<li>获取列表长度:<code>LLEN key</code></li>
</ul>
<h4 id="删除"><a class="header-anchor" href="#删除"></a>删除</h4>
<ul>
<li>从列表左侧弹出元素:<code>LPOP key</code></li>
<li>删除指定元素:<code>LREM key count value</code>
<ul>
<li><strong>count = 0</strong>:删除所有等于指定值的元素</li>
<li><strong>count &lt; 0</strong>:从右到左删除count个元素</li>
<li><strong>count &gt; 0</strong>:从左到右删除count个元素</li>
</ul>
</li>
<li>删除指定范围之外的元素:<code>LTRIM key start stop</code></li>
</ul>
<h4 id="修改"><a class="header-anchor" href="#修改"></a>修改</h4>
<ul>
<li>修改指定索引的元素:<code>LSET key index value</code></li>
</ul>
<h4 id="阻塞操作"><a class="header-anchor" href="#阻塞操作"></a>阻塞操作</h4>
<ul>
<li><code>BLPOP key [key ...] timeout</code></li>
<li><code>BRPOP key [key ...] timeout</code>
<ul>
<li><code>lpop/rpop</code>的阻塞版本，当列表内无元素时，客户端会阻塞等待，直到有元素可以弹出</li>
</ul>
</li>
</ul>
<blockquote>
<ul>
<li>如果是多个键，brpop会从左到右遍历键，一旦有一个键可以弹出元素，客户端立即返回。</li>
<li>多个客户端阻塞获取同一个key，最先执行获取的最先获取到</li>
</ul>
</blockquote>
<h3 id="内部编码-2"><a class="header-anchor" href="#内部编码-2"></a>内部编码</h3>
<p>列表类型的内部编码有两种：</p>
<ul>
<li><code>ziplist(压缩列表)</code>：元素个数小于<code>list-max-ziplist-entries(512)</code>,同时列表中每个元素的值都小于<code>list-max-ziplist-value(64字节)</code>，Redis会使用<code>ziplist</code>作为<code>list</code>的内部编码来减少内存的使用。</li>
<li><code>linkedlist(链表)</code>: 不满足ziplist的条件时，使用<code>linkedlist</code>作为<code>list</code>的内部编码实现</li>
</ul>
<blockquote>
<p>Redis3.2版本提供了quicklist内部编码，简单地说它是以一个ziplist为节点的linkedlist，它结合了ziplist和linkedlist两者的优势，为列表类型提供了一 种更为优秀的内部编码实现，它的设计原理可以参考Redis的另一个作者 <strong>Matt Stancliff的博客</strong><sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></p>
</blockquote>
<h3 id="使用场景"><a class="header-anchor" href="#使用场景"></a>使用场景</h3>
<ol>
<li>
<p>消息队列</p>
</li>
<li>
<p>文章列表</p>
<ol>
<li>文章有三个属性：title、timestamp、content</li>
</ol>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hmset acticle:1 title xx timestamp 1476536196 content xxxx</span><br><span class="line">...</span><br><span class="line">hmset acticle:k title yy timestamp 1476512536 content yyyy</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>添加文章，key是<code>user:&#123;id&#125;:articles</code></li>
</ol>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lpush user:1:acticles article:1 article:3</span><br><span class="line">...</span><br><span class="line">lpush user:k:acticles article:5</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>分页获取文章,获取id为1的前10篇文章</li>
</ol>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">articles = lrange user:1:articles 0 9</span><br><span class="line"><span class="keyword">for</span> article <span class="keyword">in</span> &#123;articles&#125;</span><br><span class="line">  hgetall &#123;article&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<ul>
<li>分页获取文章个数过多时，多次hgetall可能存在性能问题</li>
<li><code>lrange</code> 在列表两端时性能较好，列表数据过大时，可以考虑做二次拆分减小列表长度</li>
</ul>
</blockquote>
<blockquote>
<p>列表使用场景可参考以下口诀：</p>
<ul>
<li>lpush+lpop=Stack(栈)</li>
<li>lpush+rpop=Queue(队列)</li>
<li>lpsh+ltrim=Capped Collection(有限集合)</li>
<li>lpush+brpop=Message Queue(消息队列)</li>
</ul>
</blockquote>
<h2 id="集合"><a class="header-anchor" href="#集合"></a>集合</h2>
<h3 id="命令-4"><a class="header-anchor" href="#命令-4"></a>命令</h3>
<h4 id="集合内操作"><a class="header-anchor" href="#集合内操作"></a>集合内操作</h4>
<ol>
<li>添加元素 <code>SADD key member [member ...]</code></li>
<li>删除元素 <code>SREM key member [member ...]</code></li>
<li>计算元素个数 <code>SCARD key</code></li>
<li>判断元素是否在集合中 <code>SISMEMBER key member</code></li>
<li>随机从集合中返回指定个数元素 <code>SRANDMEMBER key [count]</code></li>
<li>从集合随机弹出元素 <code>SPOP key [count]</code></li>
<li>获取所有元素 <code>SMEMBERS key</code>
<ul>
<li>元素过多存在阻塞可能，可以使用<code>SSCAN key cursor [MATCH pattern] [COUNT count]</code>来完成</li>
</ul>
</li>
</ol>
<h4 id="集合间操作"><a class="header-anchor" href="#集合间操作"></a>集合间操作</h4>
<ol>
<li>求多个集合的交集: <code>SINTER key [key ...]</code></li>
<li>求多个集合的并集: <code>SUINON key [key ...]</code></li>
<li>求多个集合的差集: <code>SDIFF key [key ...]</code></li>
<li>将交集、并集、差集的结果保存: <code>SINTERSTORE/SUINONSTORE/SDIFFSTORE destination key [key ...]</code></li>
</ol>
<h3 id="内部编码-3"><a class="header-anchor" href="#内部编码-3"></a>内部编码</h3>
<ul>
<li><code>intset(整数集合)</code>: 集合中元素为整数且个数小于<code>set-max-intset-entries(512)</code>时</li>
<li><code>hashtable(哈希表)</code></li>
</ul>
<h3 id="使用场景-2"><a class="header-anchor" href="#使用场景-2"></a>使用场景</h3>
<p>集合类型比较经典的使用场景是标签(tag)。</p>
<ol>
<li>给用户添加标签</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sadd user:1:tags tag1 tag2 tag5</span><br><span class="line">sadd user:2:tags tag2 tag3 tag5</span><br><span class="line">...</span><br><span class="line">sadd user:k:tags tag1 tag2 tag4</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>给标签添加用户</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sadd tag1:users user:1 user:3</span><br><span class="line">sadd tag2:users user:1 user:2 user:3</span><br><span class="line">...</span><br><span class="line">sadd tagk:users user:1 user:2</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<blockquote>
<p>用户和标签的关系应该在一个事务内执行。</p>
</blockquote>
<ol start="3">
<li>删除用户下的标签</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">srem user:1:tags tag1 tag5</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>删除标签下的用户</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">srem tag1:users user:1</span><br><span class="line">srem tag5:users user:1</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>计算用户共同感兴趣的标签</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sinter user:1:tags user:2:tags</span><br></pre></td></tr></table></figure>
<blockquote>
<p>集合使用场景可以按照如下方法判断：</p>
<ul>
<li>sadd=Tagging(标签)</li>
<li>spop/srandmember=Random item(生成随机数，比如抽奖)</li>
<li>sadd+sinter=Social Graph(社交需求)</li>
</ul>
</blockquote>
<h2 id="有序集合"><a class="header-anchor" href="#有序集合"></a>有序集合</h2>
<blockquote>
<p>和集合不同是，Sorted Set为每个元素设置一个<code>score</code>作为排序的依据。</p>
</blockquote>
<blockquote>
<p>列表、集合和有序集合的区别：</p>
</blockquote>
<blockquote>
<table>
<thead>
<tr>
<th>数据结构</th>
<th>是否允许重复</th>
<th>是否有序</th>
<th>有序实现方式</th>
<th>应用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td>列表</td>
<td>是</td>
<td>是</td>
<td>索引下标</td>
<td>时间轴、消息队列等</td>
</tr>
<tr>
<td>集合</td>
<td>否</td>
<td>否</td>
<td>无</td>
<td>标签、社交等</td>
</tr>
<tr>
<td>有序集合</td>
<td>否</td>
<td>是</td>
<td>分值</td>
<td>排行榜系统、社交等</td>
</tr>
</tbody>
</table>
</blockquote>
<h3 id="命令-5"><a class="header-anchor" href="#命令-5"></a>命令</h3>
<h4 id="集合内"><a class="header-anchor" href="#集合内"></a>集合内</h4>
<ol>
<li>添加成员 <code>zadd key score member [score member ...]</code></li>
<li>计算成员个数 <code>zcard key</code></li>
<li>计算某元素分数 <code>zscore key member</code></li>
<li>计算成员的排名</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zrank key member</span><br><span class="line">zrevrank key member</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>删除成员 <code>zrem key member [member ...]</code></li>
<li>增加成员的分数 <code>zincrby key increment member</code></li>
<li>返回指定排名范围的成员</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zrange key start end [withscores] <span class="comment"># 从低到高</span></span><br><span class="line">zrevrange key start end [withscores]  <span class="comment"># 从高到低</span></span><br></pre></td></tr></table></figure>
<ol start="8">
<li>返回指定分数范围的成员</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zrangebyscore key min max [withscores] [<span class="built_in">limit</span> offset count] <span class="comment"># 从低到高</span></span><br><span class="line">zrevrangebyscore key max min [withscores] [<span class="built_in">limit</span> offset count]  <span class="comment"># 从高到低</span></span><br></pre></td></tr></table></figure>
<ol start="9">
<li>返回指定分数范围成员个数 <code>zcount key min max</code></li>
<li>删除指定排名内的升序元素 <code>zremrangebyrank key start end</code></li>
<li>删除指定分数范围的成员 <code>zremrangebyscore key min max</code></li>
</ol>
<h4 id="集合间"><a class="header-anchor" href="#集合间"></a>集合间</h4>
<ol>
<li>
<p>交集 <code>zinterstore destination numkeys key [key ...] [weights weight [weight ...]] [aggregate sum|min|max]</code></p>
<ul>
<li><strong>destination</strong>:交集计算结果保存到这个键</li>
<li><strong>numkeys</strong>:需要做交集计算键的个数</li>
<li><strong>key[key…]</strong>:需要做交集计算的键</li>
<li><strong>weights weight[weight…]</strong>:每个键的权重，在做交集计算时，每个键中的每个member会将自己分数乘以这个权重，每个键的权重默认是1</li>
<li><strong>aggregate sum|min|max</strong>:计算成员交集后，分值可以按照sum(和)、 min(最小值)、max(最大值)做汇总，默认值是sum</li>
</ul>
</li>
<li>
<p>并集 <code>zunionstore destination numkeys key [key ...] [weights weight [weight ...]] [aggregate sum|min|max]</code></p>
</li>
</ol>
<ul>
<li>参数与交集参数一致。</li>
</ul>
<h3 id="内部编码-4"><a class="header-anchor" href="#内部编码-4"></a>内部编码</h3>
<ul>
<li><code>ziplist(压缩列表)</code></li>
<li><code>skiplist(跳跃表)</code></li>
</ul>
<h3 id="使用场景-3"><a class="header-anchor" href="#使用场景-3"></a>使用场景</h3>
<p>排序集合典型的应用场景就是排行榜系统。例如视频网站需要对用户上传的视频做排行榜，榜单的维度可能是多个方面的:按照时间、按照播放数量、按照获得的赞数。</p>
<ol>
<li>添加用户赞数</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zadd user:ranking:2016_03_15 mike 3 <span class="comment"># mike 上传视频 获得了3个赞</span></span><br><span class="line">zincrby user:ranking:2016_03_15 mike 1 <span class="comment"># mike的视频后续又获得了一个赞</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>取消用户赞数</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zrem user:ranking:2016_03_15 mike <span class="comment"># 用户mike视频注销了</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>展示获取赞数最多的十个用户</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zrevrangebyrank user:ranking:2016_03_15 0 9</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>展示用户信息以及用户分数</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hgetall user:info:tom</span><br><span class="line">zscore user:ranking:2016_03_15 tom </span><br><span class="line">zrank user:ranking:2016_03_15 tom</span><br></pre></td></tr></table></figure>
<h2 id="键管理"><a class="header-anchor" href="#键管理"></a>键管理</h2>
<h3 id="单个键管理"><a class="header-anchor" href="#单个键管理"></a>单个键管理</h3>
<ol>
<li>键重命名 <code>rename key newkey</code></li>
</ol>
<ul>
<li>键的新名称存在时，值会被覆盖，可以使用<code>renamenx key newkey</code>命令避免</li>
<li>重命名期间会执行<code>del</code>命令删除旧的键，当键对应的值比较大时存在阻塞风险</li>
</ul>
<ol start="2">
<li>随机返回一个键 <code>randomkey</code></li>
<li>键过期<br>
除了expire、ttl命令以外，Redis还提供了 expireat、pexpire、pexpireat、pttl、persist等一系列命令</li>
</ol>
<ul>
<li><strong>expire key seconds</strong>:键在seconds秒后过期</li>
<li><strong>expireat key timestamp</strong>:键在秒级时间戳timestamp后过期</li>
<li><strong>pttl</strong>: 查询键的剩余时间(毫秒级)</li>
<li><strong>pexpire key milliseconds</strong>:键在milliseconds毫秒后过期</li>
<li><strong>pexpireat key milliseconds-timestamp</strong>键在毫秒级时间戳timestamp后过期</li>
<li>关于Redis相关过期命令，需要注意以下几点：
<ul>
<li>如果expire key的键不存在，返回结果为0</li>
<li>如果过期时间为负值，键会立即被删除，犹如使用del命令一样</li>
<li>persist命令可以将键的过期时间清除</li>
<li>对于字符串类型键，执行set命令会去掉过期时间，这个问题很容易在开发中被忽视</li>
<li>Redis不支持二级数据结构(例如哈希、列表)内部元素的过期功能</li>
<li>setex命令作为set+expire的组合，不但是原子执行，同时减少了一次网络通讯的时间</li>
</ul>
</li>
</ul>
<ol start="4">
<li>迁移键</li>
</ol>
<ul>
<li>move <code>move key db</code></li>
<li>dump+restore
<ul>
<li>在源Redis上，执行<code>dump key</code>将对应键值序列化，格式采用RDB格式</li>
<li>在目标Redis上，restore命令将上面序列化的值进行复原，其中ttl参数代表过期时间，如果ttl=0代表没有过期时间</li>
<li>整个过程非原子操作。且开启了两个客户端分别进行操作</li>
</ul>
</li>
<li>migrate <code>migrate host port key|&quot;&quot; destination-db timeout [copy] [replace] [keys key [key ...]]</code>
<ul>
<li><strong>host</strong>:目标Redis的IP地址</li>
<li><strong>port</strong>:目标Redis的端口</li>
<li><strong>key|“”</strong>:Redis3.0.6后，支持迁移多个键，此处填<code>&quot;&quot;</code></li>
<li><strong>destination-db</strong>:目标Redis的数据库索引</li>
<li><strong>timeout</strong>:迁移的超时时间(单位为毫秒)</li>
<li><strong>[copy]</strong>:如果添加此选项，迁移后并不删除源键</li>
<li><strong>[replace]</strong>:如果添加此选项，migrate不管目标Redis是否存在该键都会 正常迁移进行数据覆盖</li>
<li><strong>[keys key[key…]]</strong>:迁移多个键，例如要迁移key1、key2、key3，此处填 写<code>keys key1 key2 key3</code></li>
</ul>
</li>
</ul>
<blockquote>
<p>move、dump+restore、migrate三个命令比较</p>
</blockquote>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用域</th>
<th>原子性</th>
<th>支持多个键</th>
</tr>
</thead>
<tbody>
<tr>
<td>move</td>
<td>Redis实例内部</td>
<td>是</td>
<td>否</td>
</tr>
<tr>
<td>dump + restore</td>
<td>Redis实例之间</td>
<td>否</td>
<td>否</td>
</tr>
<tr>
<td>migrate</td>
<td>Redis实例之间</td>
<td>是</td>
<td>是</td>
</tr>
</tbody>
</table>
<h3 id="遍历键"><a class="header-anchor" href="#遍历键"></a>遍历键</h3>
<h4 id="全量遍历键"><a class="header-anchor" href="#全量遍历键"></a>全量遍历键</h4>
<blockquote>
<p><code>keys pattern</code><br>
pattern支持glob风格的通配符</p>
<ul>
<li><strong>*</strong>：匹配任意字符</li>
<li><strong>.</strong>：匹配一个字符</li>
<li><strong>[]</strong>:匹配部分字符,<code>[1,3]</code>代表1或3，<code>[1-10]</code>代表匹配1-10中任意一个数字</li>
<li><strong>\x</strong>:用来做转义，例如要匹配<code>*</code>、<code>.</code>等</li>
</ul>
</blockquote>
<h4 id="渐进式遍历"><a class="header-anchor" href="#渐进式遍历"></a>渐进式遍历</h4>
<blockquote>
<p><code>scan cursor [match pattern] [count number]</code></p>
<ul>
<li><strong>cursor</strong>:游标，从0开始，遍历至游标为0结束。每次遍历会返回当前游标的值<br>
<strong>match pattern</strong>:可选参数，它的作用的是做模式的匹配，这点和keys的 模式匹配很像<br>
<strong>count number</strong>:可选参数，它的作用是表明每次要遍历的键个数，默认值是10，此参数可以适当增大</li>
</ul>
</blockquote>
<blockquote>
<p>除了<code>scan</code>外，Redis还提供了面向哈希类型、集合类型、有序集合的扫 描遍历命令，<code>hscan、sscan、zscan</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String key = <span class="string">&quot;myset&quot;</span>;</span><br><span class="line"><span class="comment">// 定义 pattern</span></span><br><span class="line">String pattern = <span class="string">&quot;old:user*&quot;</span>;</span><br><span class="line"><span class="comment">// 游标每次从0开始</span></span><br><span class="line">String cursor = <span class="string">&quot;0&quot;</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">      ScanResult scanResult = redis.sscan(key,cursor,pattern);</span><br><span class="line">      List elements = scanResult.getResult();</span><br><span class="line">      <span class="keyword">if</span>(elements != <span class="keyword">null</span> &amp;&amp; element.size() &gt; <span class="number">0</span> )&#123;</span><br><span class="line">            <span class="comment">// 批量删除</span></span><br><span class="line">            redis.srem(key,elements)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 获取新的游标</span></span><br><span class="line">      cursor = scanResult.getStringCursor();</span><br><span class="line">      <span class="comment">// 如果游标为0表示遍历结束</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="string">&quot;0&quot;</span>.equals(cursor))&#123;</span><br><span class="line">      	<span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>当scan过程中，如果发生键值的修改、删除、增加等，可能会发生问题。</li>
</ul>
</blockquote>
<h3 id="数据库管理"><a class="header-anchor" href="#数据库管理"></a>数据库管理</h3>
<ol>
<li>切换数据库 <code>select dbIndex</code></li>
<li>清除数据库 <code>flushdb/flushall</code></li>
</ol>
<h2 id="本节内容回顾"><a class="header-anchor" href="#本节内容回顾"></a>本节内容回顾</h2>
<ol>
<li>Redis提供了5种数据结构，每种数据结构都有多种内部编码实现</li>
<li>纯内存存储、IO多路复用技术、单线程架构是造就Redis高性能的三个因素</li>
<li>由于Redis的单线程架构，所以需要每个命令能被快速执行完，否则会存在阻塞Redis的可能，理解Redis单线程命令处理机制是开发和运维Redis的核心之一</li>
<li>批量操作(例如mget、mset、hmset等)能够有效提高命令执行的效率，但要注意每次批量操作的个数和字节数</li>
<li>了解每个命令的时间复杂度在开发中至关重要，例如在使用keys、hgetall、smembers、zrange等时间复杂度较高的命令时，需要考虑数据规模对于Redis的影响</li>
<li>persist命令可以删除任意类型键的过期时间，但是set命令也会删除字符串类型键的过期时间，这在开发时容易被忽视</li>
<li>move、dump+restore、migrate是Redis发展过程中三种迁移键的方式，其中move命令基本废弃，migrate命令用原子性的方式实现了dump+restore，并且支持批量操作，是Redis Cluster实现水平扩容的重要工具。</li>
<li>scan命令可以解决keys命令可能带来的阻塞问题，同时Redis还提供了hscan、sscan、zscan渐进式地遍历hash、set、zset。</li>
</ol>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>I/O多路复用模型详见 <a href="https://www.cnblogs.com/john8169/p/9780484.html">Redis 和 IO 多路复用</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>epoll模型详见 <a href="https://baike.baidu.com/item/epoll/10738144?fr=aladdin">epoll</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p><a href="https://matt.sh/redis-quicklist">https://matt.sh/redis-quicklist</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis开发与运维笔记-哨兵</title>
    <url>/posts/2400819807.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>Redis的主从复制模式下，一旦主节点由于故障不能提供服务，需要人 工将从节点晋升为主节点，同时还要通知应用方更新主节点地址，对于很多应用场景这种故障处理的方式是无法接受的。可喜的是Redis从2.8开始正式 提供了Redis Sentinel(哨兵)架构来解决这个问题。</p>

</blockquote>
<span id="more"></span>
<blockquote>
<p>参考书籍：<a href="https://book.douban.com/subject/26971561/">Redis开发与运维</a></p>
</blockquote>
<hr>
<h1>哨兵</h1>
<h2 id="基本概念"><a class="header-anchor" href="#基本概念"></a>基本概念</h2>
<h3 id="主从复制的问题"><a class="header-anchor" href="#主从复制的问题"></a>主从复制的问题</h3>
<p>Redis的主从复制模式解决了两个问题：1、主节点备份，主节点出现故障时从节点可以切换为主节点提供服务。2、应用可以从从节点读取数据，降低主节点的读压力。</p>
<p>Redis的主从模式也引入了新的问题：</p>
<ul>
<li>主节点故障，选择从节点切换为主节点，修改应用配置，修改其他从节点指向新的主节点进行复制。这些都需要手工干预</li>
<li>主节点的写能力受到单机限制(与哨兵无关)</li>
<li>主节点的存储能力受到单机限制(与哨兵无关)</li>
</ul>
<h3 id="高可用"><a class="header-anchor" href="#高可用"></a>高可用</h3>
<p>主从复制模式主节点发生故障时处理流程如下：</p>
<ol>
<li>选取一个从节点执行<code>slaveof no one</code>使其成为主节点。</li>
<li>更新应用的主节点信息，并重启应用</li>
<li>更新其他从节点使其复制新的主节点</li>
<li>原主节点故障解决后，使其复制新的主节点</li>
</ol>
<blockquote>
<p>上述处理流程被认为不是高可用的，因为整个流程需要人进行手工干预，有些公司将上述流程自动化了，但是仍然存在下面这些问题：1）判断节点不可达的机制是否健全和标准。2）如果有多个从节点，怎样保证只有一个从节点晋升为主节点。3）通知客户端更新新主节点的机制是否足够健壮。</p>
</blockquote>
<h3 id="Redis-Sentinel高可用"><a class="header-anchor" href="#Redis-Sentinel高可用"></a>Redis Sentinel高可用</h3>
<p>当主节点出现故障时，Redis Sentinel能自动完成故障发现和故障转移，并通知应用方，从而实现真正的高可用。</p>
<p>以1个主节点、2个从节点、3个Sentinel节点为例：拓扑结构如下图</p>
<img src="/posts/2400819807/sentinel%E7%A4%BA%E4%BE%8B.png" class="" title="sentinel示例">
<p>当主节点出现故障时，从节点复制失败。整个故障转移的流程如下：</p>
<ol>
<li>
<p>主节点故障，导致2个从节点与主节点失去连接，主从复制失败</p>
</li>
<li>
<p>每个Sentinel节点通过定期监控发现主节点故障</p>
</li>
<li>
<p>多个Sentinel节点对主节点的故障达成一致，选举出Sentinel-3节点作为领导者负责故障转移</p>
</li>
<li>
<p>如图所示，Sentinel-3节点完成故障转移流程同1.2节叙述一致，不过是自动完成的</p>
</li>
</ol>
<h2 id="安装和部署"><a class="header-anchor" href="#安装和部署"></a>安装和部署</h2>
<p>按照1.3中拓扑结构搭建Redis哨兵。</p>
<h3 id="部署结构"><a class="header-anchor" href="#部署结构"></a>部署结构</h3>
<table>
<thead>
<tr>
<th>角色</th>
<th>ip</th>
<th>port</th>
</tr>
</thead>
<tbody>
<tr>
<td>master</td>
<td>127.0.0.1</td>
<td>6379</td>
</tr>
<tr>
<td>slave-1</td>
<td>127.0.0.1</td>
<td>6380</td>
</tr>
<tr>
<td>slave-2</td>
<td>127.0.0.1</td>
<td>6381</td>
</tr>
<tr>
<td>sentinel-1</td>
<td>127.0.0.1</td>
<td>26379</td>
</tr>
<tr>
<td>sentinel-2</td>
<td>127.0.0.1</td>
<td>26380</td>
</tr>
<tr>
<td>sentinel-3</td>
<td>127.0.0.1</td>
<td>26381</td>
</tr>
</tbody>
</table>
<h3 id="部署redis节点"><a class="header-anchor" href="#部署redis节点"></a>部署redis节点</h3>
<ol>
<li>
<p>部署主节点</p>
<ul>
<li>配置<code>redis-6379.conf</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">port 6379</span><br><span class="line">daemonize yes</span><br><span class="line">logfile <span class="string">&quot;6379.log&quot;</span> </span><br><span class="line">dbfilename <span class="string">&quot;dump-6379.rdb&quot;</span> </span><br><span class="line">dir <span class="string">&quot;./data/&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>启动</li>
</ul>
<p><code>redis-server redis-6379.conf</code></p>
</li>
<li>
<p>部署从节点</p>
<ul>
<li>配置<code>redis-6380.conf</code>、<code>redis-6381.conf</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">port 6380</span><br><span class="line">daemonize yes</span><br><span class="line">logfile <span class="string">&quot;6380.log&quot;</span> </span><br><span class="line">dbfilename <span class="string">&quot;dump-6380.rdb&quot;</span> </span><br><span class="line">dir <span class="string">&quot;./data/&quot;</span></span><br><span class="line">slaveof 127.0.0.1 6379</span><br></pre></td></tr></table></figure>
<ul>
<li>启动</li>
</ul>
<p><code>redis-server redis-6380.conf</code></p>
</li>
<li>
<p>查看主从关系，使用<code>info Replication</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ redis-cli info Replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=127.0.0.1,port=6380,state=online,offset=434,lag=1</span><br><span class="line">slave1:ip=127.0.0.1,port=6381,state=online,offset=434,lag=1</span><br><span class="line">master_replid:993bee493d216cc7bdf38b59d6fc4e0535e94df8</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:434</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:434</span><br><span class="line"></span><br><span class="line">➜  ~ redis-cli -p 6380 info Replication   </span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:127.0.0.1</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:5</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:476</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_replid:993bee493d216cc7bdf38b59d6fc4e0535e94df8</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:476</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:476</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="部署Sentinel节点"><a class="header-anchor" href="#部署Sentinel节点"></a>部署Sentinel节点</h3>
<ol>
<li>
<p>配置 <code>redis-sentinel-26379.conf</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">port 26379</span><br><span class="line">daemonize yes</span><br><span class="line">logfile <span class="string">&quot;26379.log&quot;</span></span><br><span class="line">dir ./data/</span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>mymaster</strong>:主节点别名</li>
<li><strong>127.0.0.1 6379</strong>:监视主节点,后面的2表示判断主节点失败至少需要2个Sentinel节点同意。</li>
</ul>
</li>
<li>
<p>启动Sentinel节点</p>
<p><code>redis-server redis-sentinel-26379.conf --sentinel</code></p>
<p><code>redis-sentinel redis-sentinel-26379.conf</code></p>
</li>
<li>
<p>确认</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  ~ redis-cli -p 26379 info Sentinel        </span><br><span class="line"><span class="comment"># Sentinel</span></span><br><span class="line">sentinel_masters:1</span><br><span class="line">sentinel_tilt:0</span><br><span class="line">sentinel_running_scripts:0</span><br><span class="line">sentinel_scripts_queue_length:0</span><br><span class="line">sentinel_simulate_failure_flags:0</span><br><span class="line">master0:name=mymaster,status=ok,address=127.0.0.1:6379,slaves=2,sentinels=1</span><br></pre></td></tr></table></figure>
<ul>
<li>由于此时只启动了一个Sentinel节点，所以sentinel=1，全部启动后统计信息：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">➜  redis_sentinel redis-cli -p 26381 info Sentinel        </span><br><span class="line"><span class="comment"># Sentinel</span></span><br><span class="line">sentinel_masters:1</span><br><span class="line">sentinel_tilt:0</span><br><span class="line">sentinel_running_scripts:0</span><br><span class="line">sentinel_scripts_queue_length:0</span><br><span class="line">sentinel_simulate_failure_flags:0</span><br><span class="line">master0:name=mymaster,status=ok,address=127.0.0.1:6379,slaves=2,sentinels=3</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>生产环境Sentinel节点应该部署在不同的物理机上</p>
<p>Redis Sentinel 节点与Redis 数据节点在配置上没有任何区别。只是添加了一些Sentinel节点对它们的监控</p>
</blockquote>
<h3 id="配置优化"><a class="header-anchor" href="#配置优化"></a>配置优化</h3>
<p>Redis安装目录下有一个 sentinel.conf，是默认的Sentinel节点配置文件。下面就以它为例子进行说明：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">port 26379</span><br><span class="line">dir /opt/soft/redis/data</span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br><span class="line"><span class="comment">#sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span></span><br><span class="line"><span class="comment">#sentinel notification-script &lt;master-name&gt; &lt;script-path&gt; </span></span><br><span class="line"><span class="comment">#sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="配置优化和说明"><a class="header-anchor" href="#配置优化和说明"></a>配置优化和说明</h4>
<h5 id="sentinel-monitor"><a class="header-anchor" href="#sentinel-monitor"></a>sentinel monitor</h5>
<p><code>sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;port&gt; &lt;quorum&gt;</code></p>
<ul>
<li>master-name：主节点别名</li>
<li>ip、port:主节点IP、端口</li>
<li>quorum：判断主节点最终不可达所需票数。选举时，至少有max(quorum, sentinels/2+1)个节点才能选举出领导者</li>
</ul>
<h5 id="sentinel-down-after-milliseconds"><a class="header-anchor" href="#sentinel-down-after-milliseconds"></a>sentinel down-after-milliseconds</h5>
<blockquote>
<p><code>sentinel down-after-milliseconds &lt;master-name&gt; &lt;times&gt;</code></p>
</blockquote>
<p>​		每个Sentinel节点都要通过定期发送ping命令来判断Redis数据节点和其 余Sentinel节点是否可达，如果超过了down-after-milliseconds配置的时间且没 有有效的回复，则判定节点不可达，<code>&lt;times&gt;</code>(单位为毫秒)就是超时时 间。</p>
<p>​	<strong>注：虽然此配置项指定 <code>master-name</code>，但是对Sentinel节点、主节点、从节点可达性判断都生效。</strong></p>
<h5 id="sentinel-parallel-syncs"><a class="header-anchor" href="#sentinel-parallel-syncs"></a>sentinel parallel-syncs</h5>
<blockquote>
<p><code>sentinel parallel-syncs &lt;master-name&gt; &lt;nums&gt;</code></p>
</blockquote>
<p>​		限制故障转移后，每次向新节点发起复制的从节点个数</p>
<p>sentinel failover-timeout</p>
<blockquote>
<p><code>sentinel failover-timeout &lt;master-name&gt; &lt;times&gt;</code></p>
</blockquote>
<p>​		通常被解释成故障转移超时时间，实际上它作用于故障转移的各个阶段：</p>
<ul>
<li>如果Redis Sentinel对一个主节点故障转移失败，那么下次再对该主 节点做故障转移的起始时间是failover-timeout的2倍</li>
<li>选举出来晋升的从节点执行<code>slaveof no one</code>失败，超过此超时时间则故障转移失败</li>
<li>从节点晋升主节点成功后，Sentinel节点还会执行info命令来进行确认，如果此过程超时则故障转移失败</li>
<li>其余从节点复制时超过此时间，则故障转移失败。注意即使超过了这个时间，Sentinel节点也会最终配置从 节点去同步最新的主节点。</li>
</ul>
<h5 id="sentinel-auth-pass"><a class="header-anchor" href="#sentinel-auth-pass"></a>sentinel auth-pass</h5>
<blockquote>
<p><code>sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</code></p>
</blockquote>
<p>​		如果Sentinel监控的主节点配置了密码，sentinel auth-pass配置通过添加 主节点的密码，防止Sentinel节点对主节点无法监控。</p>
<h5 id="sentinel-notification-script"><a class="header-anchor" href="#sentinel-notification-script"></a>sentinel notification-script</h5>
<blockquote>
<p><code>sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;</code></p>
</blockquote>
<p>​		<code>sentinel notification-script</code>的作用是在故障转移期间，当一些警告级别的 Sentinel事件发生(指重要事件，例如-sdown:客观下线、-odown:主观下线)时，会触发对应路径的脚本，并向脚本发送相应的事件参数。</p>
<p>​		例如在/opt/redis/scripts/下配置了notification.sh，该脚本会接收每个 Sentinel节点传过来的事件参数，可以利用这些参数作为邮件或者短信报警依据:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#获取所有参数</span></span><br><span class="line">msg=$* </span><br><span class="line"><span class="comment">#报警脚本或者接口，将msg作为参数 </span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>
<h5 id="sentinel-client-reconfig-script"><a class="header-anchor" href="#sentinel-client-reconfig-script"></a>sentinel client-reconfig-script</h5>
<blockquote>
<p><code>sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;</code></p>
</blockquote>
<p>​		<code>sentinel client-reconfig-script</code>的作用是在故障转移结束后，会触发对应路 径的脚本，并向脚本发送故障转移结果的相关参数。和notification-script类 似，可以在/opt/redis/scripts/下配置了client-reconfig.sh，该脚本会接收每个 Sentinel节点传过来的故障转移结果参数，并触发类似短信和邮件报警:</p>
<p>​	发送的具体内容如下：</p>
<hr>
<p><code>&lt;master-name&gt; &lt;role&gt; &lt;state&gt; &lt;from-ip&gt; &lt;from-port&gt; &lt;to-ip&gt; &lt;to-port&gt;</code></p>
<hr>
<p><strong>注：</strong></p>
<ol>
<li><code>&lt;script-path&gt;</code>必须有可执行权限。</li>
<li><code>&lt;script-path&gt;</code>开头必须包含shell脚本头(例如#!/bin/sh)，否则事件发生时Redis将无法执行脚本产生如下错误</li>
<li>Redis规定脚本的最大执行时间不能超过60秒，超过后脚本将被杀掉。</li>
<li>如果shell脚本以exit 1结束，那么脚本稍后重试执行。如果以exit 2或者更高的值结束，那么脚本不会重试。正常返回值是exit 0。</li>
<li>如果需要运维的Redis Sentinel比较多，建议不要使用这种脚本的形式来进行通知，这样会增加部署的成本</li>
</ol>
<h4 id="监控多个主节点"><a class="header-anchor" href="#监控多个主节点"></a>监控多个主节点</h4>
<p>配置如下</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">sentinel monitor master-business-1 10.10.xx.1 6379 2 </span><br><span class="line">sentinel down-after-milliseconds master-business-1 60000 </span><br><span class="line">sentinel failover-timeout master-business-1 180000 </span><br><span class="line">sentinel parallel-syncs master-business-1 1</span><br><span class="line"></span><br><span class="line">sentinel monitor master-business-2 10.16.xx.2 6380 2 </span><br><span class="line">sentinel down-after-milliseconds master-business-2 10000 </span><br><span class="line">sentinel failover-timeout master-business-2 180000 </span><br><span class="line">sentinel parallel-syncs master-business-2 1</span><br></pre></td></tr></table></figure>
<h4 id="调整配置"><a class="header-anchor" href="#调整配置"></a>调整配置</h4>
<blockquote>
<p><code>sentinel set &lt;param&gt; &lt;value&gt;</code></p>
</blockquote>
<table>
<thead>
<tr>
<th>参数</th>
<th>使用方法</th>
</tr>
</thead>
<tbody>
<tr>
<td>quorum</td>
<td>sentinel set mymaster quorum 2</td>
</tr>
<tr>
<td>down-after-milliseconds</td>
<td>sentinel set mymaster down-after-milliseconds 30000</td>
</tr>
<tr>
<td>failover-timeout</td>
<td>sentinel set mymaster failover-timeout 360000</td>
</tr>
<tr>
<td>parallel-syncs</td>
<td>sentinel set mymaster parallel-syncs 2</td>
</tr>
<tr>
<td>notification-script</td>
<td>sentinel set mymaster notification-script /opt/xx.sh</td>
</tr>
<tr>
<td>client-reconfig-script</td>
<td>sentinel set mymaster client-reconfig-script /opt/yy.sh</td>
</tr>
<tr>
<td>auth-pass</td>
<td>sentinel set mymaster auth-pass masterPassword</td>
</tr>
</tbody>
</table>
<p><strong>有几点需要注意：</strong></p>
<ul>
<li>sentinel set命令只对当前Sentinel节点有效。</li>
<li>sentinel set命令如果执行成功会立即刷新配置文件，这点和Redis普 通数据节点设置配置需要执行config rewrite刷新到配置文件不同。</li>
<li>建议所有Sentinel节点的配置尽可能一致，这样在故障发现和转移时 比较容易达成一致。</li>
<li>表9中为sentinel set支持的参数，具体可以参考源码中的sentinel.c的 sentinelSetCommand函数。</li>
<li>Sentinel对外不支持config命令。</li>
</ul>
<h3 id="部署技巧"><a class="header-anchor" href="#部署技巧"></a>部署技巧</h3>
<ol>
<li>
<p>Sentinel节点不应该部署在一台物理“机器”上</p>
</li>
<li>
<p>部署至少三个且奇数个的Sentinel节点</p>
<p>领导者选举需要至少一半加一个节点，保证判断准确的情况下，至少3个，奇数相对于偶数节省一个Sentinel节点。</p>
</li>
<li>
<p>只有一套Sentinel，还是每个主节点配置一套Sentinel?</p>
<p>如果Sentinel节点集合监控的是同一个业务的多个主节点集合，那么使用方案一。否则一般建议采用方案二。</p>
</li>
</ol>
<h2 id="API"><a class="header-anchor" href="#API"></a>API</h2>
<h3 id="sentinel-masters"><a class="header-anchor" href="#sentinel-masters"></a><code>sentinel masters</code></h3>
<p>​		展示所有被监控的主节点状态以及相关的统计信息</p>
<h3 id="sentinel-master-master-name"><a class="header-anchor" href="#sentinel-master-master-name"></a><code>sentinel master &lt;master name&gt;</code></h3>
<p>​		展示指定<code>&lt;master name&gt;</code>的主节点状态以及相关的统计信息</p>
<h3 id="sentinel-slaves-master-name"><a class="header-anchor" href="#sentinel-slaves-master-name"></a><code>sentinel slaves &lt;master name&gt;</code></h3>
<p>​		展示指定<code>&lt;master name&gt;</code>的从节点状态以及相关的统计信息</p>
<h3 id="sentinel-sentinels-master-name"><a class="header-anchor" href="#sentinel-sentinels-master-name"></a><code>sentinel sentinels &lt;master name&gt;</code></h3>
<p>​		展示指定<code>&lt;master name&gt;</code>的Sentinel节点集合(不包含当前Sentinel节点)</p>
<h3 id="sentinel-get-master-addr-by-name-master-name"><a class="header-anchor" href="#sentinel-get-master-addr-by-name-master-name"></a><code>sentinel get-master-addr-by-name &lt;master name&gt;</code></h3>
<p>​		返回指定<code>&lt;master name&gt;</code>主节点的IP地址和端口</p>
<h3 id="sentinel-reset-pattern"><a class="header-anchor" href="#sentinel-reset-pattern"></a><code>sentinel reset &lt;pattern&gt;</code></h3>
<p>​		当前Sentinel节点对符合<code>&lt;pattern&gt;(通配符风格)</code>主节点的配置进行重 置，包含清除主节点的相关状态(例如故障转移)，重新发现从节点和 Sentinel节点</p>
<h3 id="sentinel-failover-master-name"><a class="header-anchor" href="#sentinel-failover-master-name"></a><code>sentinel failover &lt;master name&gt;</code></h3>
<p>​		对指定<code>&lt;master name&gt;</code>主节点进行强制故障转移(没有和其他Sentinel节 点“协商”)，当故障转移完成后，其他Sentinel节点按照故障转移的结果更 新自身配置，这个命令在Redis Sentinel的日常运维中非常有用</p>
<h3 id="sentinel-ckquorum-master-name"><a class="header-anchor" href="#sentinel-ckquorum-master-name"></a><code>sentinel ckquorum &lt;master name&gt;</code></h3>
<p>​		检测当前可达的Sentinel节点总数是否达到<code>&lt;quorum&gt;</code>的个数。例如 quorum=3，而当前可达的Sentinel节点个数为2个，那么将无法进行故障转 移，Redis Sentinel的高可用特性也将失去</p>
<h3 id="sentinel-flushconfig"><a class="header-anchor" href="#sentinel-flushconfig"></a><code>sentinel flushconfig</code></h3>
<p>​		将Sentinel节点的配置强制刷到磁盘上，这个命令Sentinel节点自身用得 比较多，对于开发和运维人员只有当外部原因(例如磁盘损坏)造成配置文 件损坏或者丢失时，这个命令是很有用的。</p>
<h3 id="sentinel-remove-master-name"><a class="header-anchor" href="#sentinel-remove-master-name"></a><code>sentinel remove &lt;master name&gt;</code></h3>
<p>​		取消当前Sentinel节点对于指定<code>&lt;master name&gt;</code>主节点的监控</p>
<h3 id="sentinel-monitor-master-name-ip-port-quorum"><a class="header-anchor" href="#sentinel-monitor-master-name-ip-port-quorum"></a><code>sentinel monitor&lt;master name&gt;&lt;ip&gt;&lt;port&gt;&lt;quorum&gt;</code></h3>
<p>​		与配置文件中的命令相同</p>
<h3 id="sentinel-set-master-name"><a class="header-anchor" href="#sentinel-set-master-name"></a><code>sentinel set&lt;master name&gt;</code></h3>
<p>​		修改Sentinel配置</p>
<h3 id="sentinel-is-master-down-by-addr"><a class="header-anchor" href="#sentinel-is-master-down-by-addr"></a><code>sentinel is-master-down-by-addr</code></h3>
<p>​		Sentinel节点之间用来交换对主节点是否下线的判断，根据参数的不同，还可以作为Sentinel领导者选举的通信方式。具体细节后面介绍。</p>
<h2 id="客户端连接"><a class="header-anchor" href="#客户端连接"></a>客户端连接</h2>
<h3 id="Redis-Sentinel的客户端"><a class="header-anchor" href="#Redis-Sentinel的客户端"></a>Redis Sentinel的客户端</h3>
<p>​		编程语言的客户端，如果需要正确地连接Redis Sentinel，必须有Sentinel节点集合和 masterName两个参数。</p>
<h3 id="Redis-Sentinel客户端基本实现原理"><a class="header-anchor" href="#Redis-Sentinel客户端基本实现原理"></a>Redis Sentinel客户端基本实现原理</h3>
<p>基本步骤如下：</p>
<ol>
<li>遍历Sentinel节点集合获取一个可用的Sentinel节点，后面会介绍 Sentinel节点之间可以共享数据，所以从任意一个Sentinel节点获取主节点信息都是可以的</li>
<li>通过sentinel get-master-addr-by-name master-name这个API来获取对应主节点的相关信息</li>
<li>验证当前获取的“主节点”是真正的主节点，这样做的目的是为了防止故障转移期间主节点的变化</li>
<li>保持和Sentinel节点集合的“联系”，时刻获取关于主节点的相关“信息”</li>
</ol>
<h3 id="Java操作Redis-Sentinel"><a class="header-anchor" href="#Java操作Redis-Sentinel"></a>Java操作Redis Sentinel</h3>
<p>连接池初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JedisSentinelPool</span><span class="params">(String masterName, Set&lt;String&gt; sentinels,</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="keyword">final</span> GenericObjectPoolConfig poolConfig, <span class="keyword">final</span> <span class="keyword">int</span> connectionTimeout, <span class="keyword">final</span> <span class="keyword">int</span> soTimeout,</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="keyword">final</span> String password, <span class="keyword">final</span> <span class="keyword">int</span> database,</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="keyword">final</span> String clientName)</span></span>&#123; </span><br><span class="line">  <span class="comment">//... </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>masterName——主节点名</li>
<li>sentinels——Sentinel节点集合</li>
<li>poolConfig——common-pool连接池配置</li>
<li>connectTimeout——连接超时</li>
<li>soTimeout——读写超时</li>
<li>password——主节点密码</li>
<li>database——当前数据库索引</li>
<li>clientName——客户端名</li>
</ul>
<p>连接池初始化重要函数<code>#initSentinels</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> HostAndPort <span class="title">initSentinels</span><span class="params">(Set&lt;String&gt; sentinels, <span class="keyword">final</span> String masterName)</span> </span>&#123; <span class="comment">// 主节点</span></span><br><span class="line">  HostAndPort master = <span class="keyword">null</span>;</span><br><span class="line">  <span class="comment">// 遍历所有sentinel节点</span></span><br><span class="line">  <span class="keyword">for</span> (String sentinel : sentinels) &#123;</span><br><span class="line">    <span class="comment">// 连接sentinel节点</span></span><br><span class="line">    HostAndPort hap = toHostAndPort(Arrays.asList(sentinel.split(<span class="string">&quot;:&quot;</span>))); </span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(hap.getHost(), hap.getPort());</span><br><span class="line">    <span class="comment">// 使用sentinel get-master-addr-by-name masterName获取主节点信息</span></span><br><span class="line">    List&lt;String&gt; masterAddr = jedis.sentinelGetMasterAddrByName(masterName); </span><br><span class="line">    <span class="comment">// 命令返回列表为空或者长度不为2，继续从下一个sentinel节点查询</span></span><br><span class="line">    <span class="keyword">if</span> (masterAddr == <span class="keyword">null</span> || masterAddr.size() != <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">continue</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 解析masterAddr获取主节点信息</span></span><br><span class="line">    master = toHostAndPort(masterAddr); <span class="comment">// 找到后直接跳出for循环</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (master == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 直接抛出异常，</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 为每个sentinel节点开启主节点switch的监控线程 </span></span><br><span class="line">  <span class="keyword">for</span> (String sentinel : sentinels) &#123;</span><br><span class="line">    <span class="keyword">final</span> HostAndPort hap = toHostAndPort(Arrays.asList(sentinel.split(<span class="string">&quot;:&quot;</span>))); </span><br><span class="line">    MasterListener masterListener = <span class="keyword">new</span> MasterListener(masterName, hap.getHost(),hap.getPort()); </span><br><span class="line">    masterListener.start();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回结果 </span></span><br><span class="line">	<span class="keyword">return</span> master;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>故障转移监听函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Jedis sentinelJedis = <span class="keyword">new</span> Jedis(sentinelHost, sentinelPort); </span><br><span class="line"><span class="comment">// 客户端订阅Sentinel节点上&quot;+switch-master&quot;(切换主节点)频道 </span></span><br><span class="line">  sentinelJedis.subscribe(<span class="keyword">new</span> JedisPubSub() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String channel, String message)</span> </span>&#123;</span><br><span class="line">  	String[] switchMasterMsg = message.split(<span class="string">&quot; &quot;</span>); </span><br><span class="line">    <span class="keyword">if</span> (switchMasterMsg.length &gt; <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="comment">// 判断是否为当前masterName</span></span><br><span class="line">      <span class="keyword">if</span> (masterName.equals(switchMasterMsg[<span class="number">0</span>])) &#123;</span><br><span class="line">        <span class="comment">// 发现当前masterName发生switch，使用initPool重新初始化连接池</span></span><br><span class="line">        initPool(toHostAndPort(switchMasterMsg[<span class="number">3</span>], switchMasterMsg[<span class="number">4</span>])); </span><br><span class="line">      &#125;</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="string">&quot;+switch-master&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="实现原理"><a class="header-anchor" href="#实现原理"></a>实现原理</h2>
<h3 id="三个定时监控任务"><a class="header-anchor" href="#三个定时监控任务"></a>三个定时监控任务</h3>
<ol>
<li>
<p>每隔10秒，每个Sentinel节点会向主节点和从节点发送info命令获取最新的拓扑结构，作用如下：</p>
<ul>
<li>通过向主节点执行info命令，获取从节点的信息，这也是为什么 Sentinel节点不需要显式配置监控从节点</li>
<li>当有新的从节点加入时都可以立刻感知出来</li>
<li>节点不可达或者故障转移后，可以通过info命令实时更新节点拓扑信息</li>
</ul>
</li>
<li>
<p>每隔2秒，每个Sentinel节点会向Redis数据节点的__sentinel__:hello 频道上发送该Sentinel节点对于主节点的判断以及当前Sentinel节点的信息，时每个Sentinel节点也会订阅该频道，来了解其他 Sentinel节点以及它们对主节点的判断，所以这个定时任务可以完成以下两个工作：</p>
<ul>
<li>发现新的Sentinel节点:通过订阅主节点的__sentinel__:hello了解其他 的Sentinel节点信息，如果是新加入的Sentinel节点，将该Sentinel节点信息保 存起来，并与该Sentinel节点创建连接</li>
<li>Sentinel节点之间交换主节点的状态，作为后面客观下线以及领导者选举的依据。</li>
</ul>
</li>
<li>
<p>每隔1秒，每个Sentinel节点会向主节点、从节点、其余Sentinel节点 发送一条ping命令做一次心跳检测</p>
</li>
</ol>
<h3 id="主观下线和客观下线"><a class="header-anchor" href="#主观下线和客观下线"></a>主观下线和客观下线</h3>
<ol>
<li>
<p>主观下线</p>
<p>​		每个Sentinel节点向主节点、从节点、其他Sentinel节点发送ping命令时，如果超过<code>down-after-milliseconds</code>时间没有进行有效回复，Sentinel节点就会对该节点做失败 判定，这个行为叫做主观下线。</p>
</li>
<li>
<p>客观下线</p>
<p>​		当Sentinel主观下线的节点是主节点时，该Sentinel节点会通过sentinel is- master-down-by-addr命令向其他Sentinel节点询问对主节点的判断，当超过 &lt;quorum&gt;个数，Sentinel节点认为主节点确实有问题，这时该Sentinel节点会 做出客观下线的决定</p>
</li>
</ol>
<blockquote>
<p>从节点、Sentinel节点在主观下线后，没有后续的故障转移操作。</p>
<p>这里需要介绍一下<code>sentinel is-master-down-by-addr</code>命令：</p>
<blockquote>
<p>​	<code>sentinel is-master-down-by-addr &lt;ip&gt; &lt;port&gt; &lt;current_epoch&gt; &lt;runid&gt;</code></p>
</blockquote>
<ul>
<li>current-epoch:当前配置纪元</li>
<li>runid：参数有两种类型，不同类型决定了此API作用的不同
<ul>
<li>runid = &quot;*&quot;时，作用是Sentinel节点直接交换对主节点下线的判定</li>
<li>当runid等于当前Sentinel节点的runid时，作用是当前Sentinel节点希望目标Sentinel节点同意自己成为领导者的请求</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="领导者Sentinel节点选举"><a class="header-anchor" href="#领导者Sentinel节点选举"></a>领导者Sentinel节点选举</h3>
<p>​		Redis使用了Raft算法实 现领导者选举，具体流程如下：</p>
<ol>
<li>每个在线的Sentinel节点都有资格成为领导者，当它确认主节点主观 下线时候，会向其他Sentinel节点发送sentinel is-master-down-by-addr命令， 要求将自己设置为领导者</li>
<li>收到命令的Sentinel节点，如果没有同意过其他Sentinel节点的sentinel is-master-down-by-addr命令，将同意该请求，否则拒绝</li>
<li>如果该Sentinel节点发现自己的票数已经大于等于max(quorum， num(sentinels)/2+1)，那么它将成为领导者</li>
<li>如果此过程没有选举出领导者，将进入下一次选举</li>
</ol>
<h3 id="故障转移"><a class="header-anchor" href="#故障转移"></a>故障转移</h3>
<p>​		领导者选举处的Sentinel节点负责故障转移，具体步骤如下：</p>
<h4 id="在从节点列表中选出一个节点作为新的主节点"><a class="header-anchor" href="#在从节点列表中选出一个节点作为新的主节点"></a>在从节点列表中选出一个节点作为新的主节点</h4>
<ol>
<li>过滤：主观下线(断线)，5s内没回复Sentinel的ping响应，与主节点失联超过down-after-milliseconds*10秒</li>
<li>选择<code>slave-priority</code>(优先级)最高的从节点列表，如果存在则返回，不存在则继续</li>
<li>选择复制偏移量最大的从节点，如果存在则返回，不存在继续</li>
<li>选择runId最小的从节点</li>
</ol>
<h4 id="晋升主节点"><a class="header-anchor" href="#晋升主节点"></a>晋升主节点</h4>
<p>​		Sentinel对选中从节点执行<code>slaveof no one</code>使其晋升为主节点</p>
<h4 id="复制新主节点"><a class="header-anchor" href="#复制新主节点"></a>复制新主节点</h4>
<p>​		Sentinel领导者节点会向剩余的从节点发送命令，让它们成为新主节 点的从节点，复制规则和parallel-syncs参数有关</p>
<h4 id="原主节点处理"><a class="header-anchor" href="#原主节点处理"></a>原主节点处理</h4>
<p>​		Sentinel节点集合会将原来的主节点更新为从节点，并保持着对其关注，当其恢复后命令它去复制新的主节点</p>
<h2 id="相关阅读"><a class="header-anchor" href="#相关阅读"></a>相关阅读</h2>
<ul>
<li><a href="https://mp.weixin.qq.com/s/nHBpqZe8v7KTo1hj08hx7A">你管这破玩意叫 Redis 哨兵？</a></li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis开发与运维笔记_总结</title>
    <url>/posts/2279241279.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>至此，已经将《Redis开发与运维》一书中的大部分内容整理并学习完毕，这篇文章将按照书中章节目录进行归纳总结，加深记忆。</p>

</blockquote>
<span id="more"></span>
<h1>Redis总结</h1>
<h2 id="初识"><a class="header-anchor" href="#初识"></a>初识</h2>
<h3 id="Redis的特性"><a class="header-anchor" href="#Redis的特性"></a>Redis的特性</h3>
<ol>
<li>速度快，纯内存操作，单线程架构，代码优雅</li>
<li>基于键值对的数据结构服务器</li>
<li>丰富的功能，键过期，Pub/Sub，Lua及Pipeline等</li>
<li>稳定简单，源码简短而不简单</li>
<li>客户端支持好</li>
<li>RDB和AOF持久化策略</li>
<li>主从复制功能</li>
<li>Redis Sentinel和Redis Cluster实现高可用</li>
</ol>
<h3 id="Redis的使用场景"><a class="header-anchor" href="#Redis的使用场景"></a>Redis的使用场景</h3>
<ol>
<li><strong>缓存</strong></li>
<li>排行榜</li>
<li>计数器应用</li>
<li>社交网络(标签)</li>
<li>简单的消息队列系统</li>
</ol>
<h2 id="API的理解和使用"><a class="header-anchor" href="#API的理解和使用"></a>API的理解和使用</h2>
<h3 id="五种数据结构"><a class="header-anchor" href="#五种数据结构"></a>五种数据结构</h3>
<p>字符串(String)、哈希(hash)、列表(list)、集合(set)、有序集合(zset)</p>
<p>Redis中每种数据结构对应不同的内部实现。具体对应关系如下</p>
<table>
<thead>
<tr>
<th>数据结构</th>
<th>内部编码</th>
<th>条件</th>
</tr>
</thead>
<tbody>
<tr>
<td>字符串(String)</td>
<td>int<br>embstr<br>raw</td>
<td>int：8个字节的长整形<br>embstr：≤39个字节的字符串<br>raw：＞39个字节的字符串</td>
</tr>
<tr>
<td>哈希(hash)</td>
<td>ziplist<br>hashtable</td>
<td>ziplist<br/>hashtable</td>
</tr>
<tr>
<td>列表(list)</td>
<td>ziplist<br>linkedlist</td>
<td>ziplist：元素个数&lt;<code>list-max-ziplist-entries</code>(512)个，元素大小&lt;<code>list-max-ziplist-value</code>(64字节)<br>linkedlist：不满足ziplist时</td>
</tr>
<tr>
<td>集合(set)</td>
<td>intset<br>hashtable</td>
<td>intset：元素为整数，个数&lt;<code>set-max-intset-entries</code>(512)<br>hashtable：不满足intset条件时</td>
</tr>
<tr>
<td>有序集合(zset)</td>
<td>ziplist<br>skiplist</td>
<td>ziplist<br/>skiplist</td>
</tr>
</tbody>
</table>
<h3 id="命令"><a class="header-anchor" href="#命令"></a>命令</h3>
<blockquote>
<p>官方文档：<a href="https://redis.io/commands">https://redis.io/commands</a></p>
<p>客户端内可以通过<code>help &lt;commond&gt;</code>查看具体命令的说明，或者通过<code>help @&lt;group&gt;</code>查看不同组内的命令说明，help命令可以通过Tab命令进行自动补全。</p>
</blockquote>
<ul>
<li>了解每个命令的复杂度对于日常的使用有很大的帮助，可以根据数据规模预估复杂度高的命令阻塞Redis等问题</li>
<li>批量操作可以减少不必要的网络时间，有效的提高查询效率</li>
<li>scan命令可以解决keys命令带来的阻塞问题，同时Redis还提供了hscan、sscan、zscan渐进式地遍历hash、set、zset</li>
</ul>
<h3 id="应用场景"><a class="header-anchor" href="#应用场景"></a>应用场景</h3>
<ul>
<li>String：缓存、计数、共享数据存储、限速</li>
<li>list：栈、队列、消息队列</li>
<li>set：标签，随机数抽奖等</li>
<li>zset：排行榜</li>
</ul>
<h2 id="小功能大用处"><a class="header-anchor" href="#小功能大用处"></a>小功能大用处</h2>
<h3 id="慢查询"><a class="header-anchor" href="#慢查询"></a>慢查询</h3>
<p>redis的慢查询日志放在list中，通过<code>slowlog get [n]</code>获取列表，<code>slowlog len</code>查看列表长度。<code>showlog reset</code>重置。</p>
<p>慢查询由两个参数控制：</p>
<ul>
<li><code>slowlog-log-slower-than</code>：慢查询阈值，默认10毫秒，命令超过1毫秒时QPS不足1000，生产建议调到1ms.</li>
<li><code>slowlog-max-len</code>：慢查询队列长度，根据业务情况适当调大，避免日志丢失，同时可以采用定时同步到存储层的方法避免日志丢失。</li>
</ul>
<h3 id="Redis-Shell"><a class="header-anchor" href="#Redis-Shell"></a>Redis Shell</h3>
<ul>
<li>redis-server：主要用于启动Redis实例</li>
<li>redis-cli：Redis客户端工具，可用于测试延迟，发送键命令，发送集群命令等完成客户端功能</li>
<li>redis-benchmark：Redis基准测试工具，主要用于基准性能测试。</li>
</ul>
<h3 id="Pipeline"><a class="header-anchor" href="#Pipeline"></a>Pipeline</h3>
<p>将多条命令封装为一条pipeline发送到服务器，节省发送多次造成的网络耗时。</p>
<table>
<thead>
<tr>
<th>原生批量命令</th>
<th>Pipeline</th>
</tr>
</thead>
<tbody>
<tr>
<td>原生批量命令是原子的</td>
<td>非原子</td>
</tr>
<tr>
<td>原生批量命令支持多个Key</td>
<td>支持多条命令</td>
</tr>
<tr>
<td>原生批量命令是Redis服务端支持的</td>
<td>Pipeline需要服务端和客户端共同支持</td>
</tr>
</tbody>
</table>
<h3 id="事务与Lua"><a class="header-anchor" href="#事务与Lua"></a>事务与Lua</h3>
<p><code>multi</code>代表事务开始，<code>exec</code>代表事务结束。可以通过<code>watch key</code>命令检查key是否被修改。</p>
<blockquote>
<p>通过<code>help @script</code>查看脚本相关命令。</p>
</blockquote>
<ul>
<li><code>SCRIPT LOAD script</code>：加载Lua脚本到内存</li>
<li><code>SCRIPT EXISTS sha1 [sha1 ...]</code>：检查Lua脚本是否加载</li>
<li><code>EVAL script numkeys key [key ...] arg [arg ...]</code>：执行脚本</li>
<li><code>EVALSHA sha1 numkeys key [key ...] arg [arg ...]</code>：执行已经加载的脚本</li>
<li><code>SCRIPT DEBUG YES|SYNC|NO</code>：调试Lua脚本</li>
<li><code>SCRIPT FLUSH [ASYNC|SYNC]</code>：清除已经加载的Lua脚本</li>
<li><code>SCRIPT KILL</code>：停止正在执行的Lua命令，当Lua执行写入时无法停止，只能Kill掉Redis进程</li>
</ul>
<h3 id="Bitmaps"><a class="header-anchor" href="#Bitmaps"></a>Bitmaps</h3>
<p>位操作，主要操作如下：</p>
<ol>
<li><code>SETBIT key offset value</code>：设置值</li>
<li><code>GETBIT key offset</code>：获取值</li>
<li><code>BITCOUNT key [start end]</code>：统计范围内为1的个数</li>
<li><code>BITPOS key bit [start] [end]</code>：统计范围内第一个值为对应bit的位置</li>
<li><code>BITOP operation destkey key [key ...]</code>：对多个String进行按位操作，可选操作如下：
<ul>
<li>and(交集)、or(并 集)、not(非)、xor(异或)</li>
</ul>
</li>
</ol>
<h3 id="HyperLoglog"><a class="header-anchor" href="#HyperLoglog"></a>HyperLoglog</h3>
<p>HyperLogLog不是一种新的数据结构，而是一种基数算法，通过HyperLoglog可以使用极小的内存空间完成独立总数的统计。</p>
<ul>
<li>
<p>添加：<code>PFADD key element [element ...]</code></p>
</li>
<li>
<p>计算独立总数：<code>PFCOUNT key [key ...]</code></p>
</li>
<li>
<p>合并：<code> PFMERGE destkey sourcekey [sourcekey ...]</code></p>
</li>
</ul>
<blockquote>
<p>使用该结构时需要注意：1）只是为了获取独立总数，不需要获取单条记录；2）允许一定的误差</p>
</blockquote>
<h3 id="发布订阅-Pub-Sub"><a class="header-anchor" href="#发布订阅-Pub-Sub"></a>发布订阅(Pub/Sub)</h3>
<p>Redis提供了基于“发布/订阅”模式的消息机制，此种模式下，消息发布者和订阅者不进行直接通信，发布者客户端向指定的频道(channel)发布消息，订阅该频道的每个客户端都可以收到该消息。</p>
<ul>
<li>发布消息到频道：<code>PUBLISH channel message</code></li>
<li>订阅频道：<code>SUBSCRIBE channel [channel ...]</code></li>
<li>取消订阅：<code>UNSUBSCRIBE [channel [channel ...]]</code></li>
<li>按照模式进行订阅及取消：<code>PSUBSCRIBE(PUNSUBSCRIBE) pattern [pattern ...]</code></li>
<li>查询订阅：<code>PUBSUB subcommand [argument [argument ...]]</code>
<ul>
<li>查看活跃的频道：<code>PUBSUB CHANNELS [pattern]</code></li>
<li>查看频道订阅数：<code>PUBSUB NUMSUB [channels]</code></li>
<li>查看模式订阅数：<code>PUBSUB NUMPAT</code></li>
</ul>
</li>
</ul>
<h3 id="Geo"><a class="header-anchor" href="#Geo"></a>Geo</h3>
<p>地理信息定位功能，目前用到的场景不多，此处略过</p>
<h2 id="客户端"><a class="header-anchor" href="#客户端"></a>客户端</h2>
<p>Redis通过Redis定制的RESP(Redis Serialization Protocol,Redis序列化协议)实现客户端与服务端的交互</p>
<p>命令格式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">*&lt;参数数量&gt; CRLF</span><br><span class="line">$&lt;参数1的字节数量&gt; CRLF</span><br><span class="line">&lt;参数1&gt; CRLF</span><br><span class="line">...</span><br><span class="line">$&lt;参数N的字节数量&gt; CRLF</span><br><span class="line">&lt;参数N&gt; CRLF</span><br></pre></td></tr></table></figure>
<p>Redis支持的客户端可以查看<a href="https://redis.io/clients">Redis- Clients</a></p>
<p>客户端的输入缓冲区最大为1G，不可配置，输出缓冲区支持普通客户端、发布订阅客户端、复制客户端配置，收到<code>maxmemory</code>限制。</p>
<p><code>info clients</code>用于查看客户端统计信息，用于发现问题。</p>
<p>Redis的<code>timeout</code>配置可以自动关闭闲置客户端，<code>tcp-keepalive</code>参数可以周期性检查关闭无效TCP连接。</p>
<h2 id="持久化"><a class="header-anchor" href="#持久化"></a>持久化</h2>
<p>Redis提供了两种持久化方式：RDB和AOF</p>
<h3 id="RDB"><a class="header-anchor" href="#RDB"></a>RDB</h3>
<p>RDB一次性生产内存快照，产生的文件紧凑，读取RDB的速度更快。但是生成RDB文件的开销较大，无法做到实时持久化，一般用作冷备和复制传输。</p>
<p>主动生成rdb文件可以使用<code>save</code>或<code>bgsave</code>，<code>save</code>会阻塞主线程，一般不建议使用。<code>bgsave</code>通过fork创建子线程生成rdb文件。</p>
<p>rdb文件的存储位置和文件名称可以通过配置更改，也可以在运行期间通过<code>config set</code>进行动态修改。</p>
<h3 id="AOF"><a class="header-anchor" href="#AOF"></a>AOF</h3>
<p>AOF通过追加命令的方式记录操作日志。AOF主要解决了数据持久化的实时性。</p>
<p>通过<code>appendonl yes</code>开启AOF持久化，开启后，所有的写入命令会写入到aof_buf缓冲区，之后根据<code>appendfsync</code>设置的策略(一般为everysec，后台定时每秒fsync一次)刷到磁盘。</p>
<p>AOF重写，随着服务的运行，AOF文件会越来越大，执行<code>bgrewriteaof</code>手动进行AOF重写，或当文件大小超过<code>auto-aof-rewrite-min-size</code>(64MB)且文件增量超过<code>auto-aof-rewrite-percentage</code>时自动进行重写。AOF重写时，会fork子进程进行重写，运用<strong>Copy On Write</strong>技术，父进程在重写期间仍然可以响应命令。子进程根据内存数据移除无效命令、合并命令达到缩减AOF文件体积的目的。</p>
<p>copy-on-write：fork子线程期间，父子进程共用相同的页，当有写入命令时，父进程拷贝出页进行写入。同时，AOF重写期间，父进程将命令写入到重写缓冲区中，重写完成后将缓存区中内容写入到AOF以保证数据的不丢失。</p>
<p>AOF持久化可能出现追加阻塞问题，当硬盘资源紧张时，子线程无法完成写入磁盘，无法返回完成信号给主线程，主线程发现上次fsync超过2s时会阻塞，保证数据的一致性。</p>
<p>AOF重写期间，如果父进程收到大量请求可能导致输出缓冲区占用内存过多，严重时直接导致系统崩溃，Redis提供参数<code>client-output-buffer-limit slave 256MB 64MB 60</code>（如果60秒内输出缓冲区消耗持续大于64MB或者直接超过256MB，主节点将直接关闭客户端连接）。其默认限制如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">client-output-buffer-limit</span> <span class="string">normal 0 0 0</span></span><br><span class="line"><span class="meta">client-output-buffer-limit</span> <span class="string">slave 256mb 64mb 60</span></span><br><span class="line"><span class="meta">client-output-buffer-limit</span> <span class="string">pubsub 8mb 2mb 60</span></span><br></pre></td></tr></table></figure>
<h2 id="复制"><a class="header-anchor" href="#复制"></a>复制</h2>
<p>通过配置文件或命令方式设置客户端为从节点。通过<code>slave of one</code>可以断开从节点的复制。默认情况，从节点为只读模式<code>slave-read-only=yes</code>，线上建议不要修改。<code>repl-disable-tcp-nodelay</code>用于合并多个小的请求定时发送(默认40ms发送一次)，跨机房等网络带宽紧张环境建议开启。</p>
<p>复制分为全量复制和部分复制。主从复制时，主从节点都会保存自身的偏移量。主节点除了将命令发送给从节点，还会将命令写入复制积压缓冲区(<code>repl_backlog_size</code>默认为1MB)。从节点故障重新上线后，会将自身节点报给主节点，主节点根据偏移量计算，如果命中缓冲区则会将缓冲区内数据发送给从节点，进而避免了全量复制的资源消耗。</p>
<p>全量复制流程见:<a href="https://leithda.gitee.io/posts/3460365957.html#%E5%85%A8%E9%87%8F%E5%A4%8D%E5%88%B6">Redis开发与运维笔记_持久化#全量复制</a></p>
<p>复制期间主从节点存在可能存在数据不一致现象。使用复制时应避免全量复制操作，避免主节点下挂载过多从节点，避免在他同一机器上部署过多主节点(规避机器故障恢复后的全量复制)。</p>
<h2 id="阻塞"><a class="header-anchor" href="#阻塞"></a>阻塞</h2>
<p>通过慢查询和监控指标发现阻塞问题。可能的原有分为两种：内在原因和外在原因</p>
<h3 id="内在原因"><a class="header-anchor" href="#内在原因"></a>内在原因</h3>
<p>根据慢查询日志定位慢查询，合理使用数据结构及命令。根据<code>redis-cli bigkeys</code>发现大对象，根据业务场景进行拆分或优化。</p>
<p>通过<code>reids-cli --stat</code>查看redis使用情况，利用<code>top</code>命令查看CPU利用率信息。根据<code>info commandstats</code>统计信息进行分析。</p>
<p>持久化相关的阻塞，Fork子进程阻塞、AOF刷盘阻塞、HugePage写操作阻塞（重写期间copy-on-write机制）</p>
<h3 id="外在原因"><a class="header-anchor" href="#外在原因"></a>外在原因</h3>
<p>CPU竞争，避免和IO密集型服务部署在同一台机器上。开启持久化功能的节点不要绑定单核，避免持久化期间子进程与父进程的CPU抢占。</p>
<p>操作系统会根据设置，当内存不足时，将内存中的数据交换到磁盘，如果Redis使用的内存被交换到硬盘，会造成性能的下降。</p>
<p>连接拒绝，操作系统连接数的限制(文件句柄限制<code>ulimit -n</code>，TCP连接队列<code>backlog</code>溢出)，Redis最大连接数都会导致连接决绝</p>
<p>网络延迟，跨机房部署或者网络抖动时，网络带宽资源紧张时，会造成Redis网络时间变长，发生阻塞</p>
<h2 id="理解内存"><a class="header-anchor" href="#理解内存"></a>理解内存</h2>
<h3 id="内存消耗"><a class="header-anchor" href="#内存消耗"></a>内存消耗</h3>
<p>使用<code>info memory</code>检查Redis的内存消耗状态</p>
<p>Redis进程内存消耗主要包括：自身内存+对象内存+缓存内存+内存碎片</p>
<ul>
<li>
<p>自身内存：redis自身占用内存，很小</p>
</li>
<li>
<p>对象内存：占用最大，存储用户的所有数据</p>
</li>
<li>
<p>缓存内存：客户端缓冲(输入最大1G，无法控制，输出由<code>client-output-buffer-limit</code>控制)、复制积压缓冲区(用于实现部分复制功能，建议调大)、AOF缓冲区(保存AOF重写期间保存的命令)</p>
</li>
<li>
<p>内存碎片：频繁执行更新(append、setrange)、大量过期键删除可能导致碎片率的提高。尽量做到数据对其和安全重启可以减缓此类问题</p>
</li>
</ul>
<p>子进程内存消耗。redis通过Fork子进程完成持久化动作，由于copy-on-write机制，并不需要一倍的内存。</p>
<p>通过<code>maxmemory</code>设置Redis的最大内存。可以通过<code>config set maxmemory 2GB</code>动态调整内存上限。</p>
<p>内存溢出控制策略，通过<code>maxmemory-policy</code>参数控制，策略有如下几种：</p>
<ul>
<li><code>noeviction</code>:默认策略，不删除数据。拒绝所有写入操作并返回客户端错误信息<code>(error)OOM command not allowed when used memory</code>，此时Redis只响应读操作</li>
<li><code>vloatile-lru</code>：根据LRU算法删除设置了超时的键，直到腾出足够空间。如果没有可删除的键，回退到<code>noeviction</code></li>
<li><code>allkeys-lru</code>：根据LRU算法删除键。直到腾出足够空间</li>
<li><code>allkeys-random</code>：随机删除所有键，直到腾出足够空间</li>
<li><code>volatile-ttl</code>：根据键值对象的ttl，删除最近要过期的数据，如果没有，回退到noeviction策略</li>
<li>设置了<code>maxmemory</code>时，当<code>used_memory&gt;maxmemory</code>的状态下，会触发回收内存操作。应设置足够大的<code>maxmemory</code>避免长期处于这种状态下。</li>
</ul>
<p>可以通过以下方式优化内存使用：</p>
<ol>
<li>精简键值对大小，使用高效二进制序列化工具</li>
<li>使用对象共享池优化小整数对象</li>
<li>数据优先使用整数</li>
<li>优化字符串的使用，避免预分配造成的内存浪费</li>
<li>使用ziplist压缩编码优化hash、list等结构，注重效率和空间的平衡</li>
<li>使用intset编码优化整数集合</li>
</ol>
<h2 id="哨兵"><a class="header-anchor" href="#哨兵"></a>哨兵</h2>
<p>哨兵主要用于保证Redis主从复制的高可用。以1主2从3哨兵节点为例：</p>
<img src="/posts/2279241279/sentinel%E7%A4%BA%E4%BE%8B.png" class="" title="img">
<h3 id="部署"><a class="header-anchor" href="#部署"></a>部署</h3>
<p>按照上述结构部署Redis:</p>
<table>
<thead>
<tr>
<th>角色</th>
<th>ip</th>
<th>port</th>
</tr>
</thead>
<tbody>
<tr>
<td>master</td>
<td>127.0.0.1</td>
<td>6379</td>
</tr>
<tr>
<td>slave-1</td>
<td>127.0.0.1</td>
<td>6380</td>
</tr>
<tr>
<td>slave-2</td>
<td>127.0.0.1</td>
<td>6381</td>
</tr>
<tr>
<td>sentinel-1</td>
<td>127.0.0.1</td>
<td>26379</td>
</tr>
<tr>
<td>sentinel-2</td>
<td>127.0.0.1</td>
<td>26380</td>
</tr>
<tr>
<td>sentinel-3</td>
<td>127.0.0.1</td>
<td>26381</td>
</tr>
</tbody>
</table>
<p>配置文件列表：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">################### 主节点 ###################</span></span><br><span class="line"><span class="attr">port</span> <span class="string">6379</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">yes</span></span><br><span class="line"><span class="attr">logfile</span> <span class="string">&quot;6379.log&quot; </span></span><br><span class="line"><span class="attr">dbfilename</span> <span class="string">&quot;dump-6379.rdb&quot; </span></span><br><span class="line"><span class="attr">dir</span> <span class="string">&quot;./data/&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">################### 从节点 ###################</span></span><br><span class="line"><span class="attr">port</span> <span class="string">6380</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">yes</span></span><br><span class="line"><span class="attr">logfile</span> <span class="string">&quot;6380.log&quot; </span></span><br><span class="line"><span class="attr">dbfilename</span> <span class="string">&quot;dump-6380.rdb&quot; </span></span><br><span class="line"><span class="attr">dir</span> <span class="string">&quot;./data/&quot;</span></span><br><span class="line"><span class="comment"># 从节点对应的主节点</span></span><br><span class="line"><span class="attr">slaveof</span> <span class="string">127.0.0.1 6379</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">################### Sentinel节点 ###################</span></span><br><span class="line"><span class="attr">port</span> <span class="string">26379</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">yes</span></span><br><span class="line"><span class="attr">logfile</span> <span class="string">&quot;26379.log&quot;</span></span><br><span class="line"><span class="attr">dir</span> <span class="string">./data/</span></span><br><span class="line"><span class="comment"># 别名：mymaster，监控节点 127.0.0.1 6379，2：判断下线至少需要2个节点同意</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">monitor mymaster 127.0.0.1 6379 2</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">down-after-milliseconds mymaster 30000</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">parallel-syncs mymaster 1</span></span><br><span class="line"><span class="attr">sentinel</span> <span class="string">failover-timeout mymaster 180000</span></span><br></pre></td></tr></table></figure>
<ul>
<li>可以监控多个主节点，通过多个 sentinel 配置即可</li>
</ul>
<h3 id="故障转移"><a class="header-anchor" href="#故障转移"></a>故障转移</h3>
<p>当主节点出现故障时，从节点复制失败，故障转移流程如下：</p>
<ol>
<li>主节点故障，从节点复制失败</li>
<li>每个Sentinel节点通过定时监控发现主节点故障，进行客观下线判定</li>
<li>多个Sentinel节点对主节点故障达成一致，选举出一个Sentinel作为领导者负责故障转移</li>
</ol>
<p>领导者故障转移流程：</p>
<ol>
<li>在从节点列表中选出一个节点作为主节点。
<ul>
<li>过滤：主观下线、5秒无ping响应、与主节点失联超过<code>down-after-milliseconds*10</code>的节点，</li>
<li>选择<code>slave-priority</code>优先级最高的，存在则返回，不存在则继续</li>
<li>选择复制偏移量最大的从节点，存在则返回，不存在则继续</li>
<li>选择runId最小的从节点</li>
</ul>
</li>
<li>对选中的从节点执行<code>slave of one</code>使其晋升主节点</li>
<li>复制新主节点，Sentinel领导者向其余节点发送命令，使其复制新的主节点。</li>
<li>将原主节点更新为从节点，等待其恢复后使其复制新的主节点</li>
</ol>
<h2 id="集群"><a class="header-anchor" href="#集群"></a>集群</h2>
<p>Redis通过算法<code>CRC16(key)%16383</code>将key映射到不同的槽，每一个节点负责不同的槽。由于不同的键可能在不同的节点上，集群对批量和事务操作的支持有限。同时，集群的复制结构只支持主从复制，不再支持多层级结构。</p>
<p>搭建集群可以参考:<a href="https://leithda.gitee.io/posts/1044596185">Redis集群搭建5.0版</a></p>
<p>集群节点收到请求时会先计算是否是自己的key，如果不是返回<strong>Move重定向</strong>响应供客户端使用。当键包含<code>&#123;hash_tag&#125;</code>时，槽会根据hash_tag进行计算，相同hash_tag的键会分布到同一个节点上。</p>
<p>当集群进行数据迁移时，如果命令对应的键不在本节点，则可能在迁移目标节点中，此时会返回<strong>ASK重定向</strong>响应。</p>
<h2 id="缓存设计"><a class="header-anchor" href="#缓存设计"></a>缓存设计</h2>
<h3 id="引入缓存"><a class="header-anchor" href="#引入缓存"></a>引入缓存</h3>
<p>缓存解决了数据访问速度慢的问题，降低了数据库的压力，但同时也引入了新的问题：缓存层与存储层的数据不一致，编码的复杂度，降低了系统的稳定性等等。</p>
<p>缓存的更新策略主要分为主动更新和自动触发</p>
<ul>
<li>自动：通过Redis的过期和剔除策略，可以自动的清除不需要的缓存</li>
<li>手动：更新存储层数据时，同步更新缓存内容(或者清除缓存内容，再次查询时增加缓存)</li>
</ul>
<h3 id="缓存穿透"><a class="header-anchor" href="#缓存穿透"></a>缓存穿透</h3>
<p>缓存穿透是指查询一个不存在的数据，处于容错的考虑，通常不会对此次查询进行缓存。解决方法是缓存空对象，添加一个短时间的过期时间避免内存资源浪费。</p>
<h3 id="无底洞优化"><a class="header-anchor" href="#无底洞优化"></a>无底洞优化</h3>
<p>批量操作的key分布在多个节点上时，操作时间为<code>n*网络时间+n*命令时间</code>，常见优化手段:</p>
<ol>
<li>串行命令，执行n次get</li>
<li>串行IO，对映射到相同槽的键执行mget或者pipeline操作，时间为 node*网络时间+n次命令时间</li>
<li>并行IO，多线程执行2中方案，时间为:max(node网络时间)+n次命令时间，编程复杂</li>
<li>利用hash_tag：时间为1次网络时间+N次命令时间。但是可能造成数据倾斜</li>
</ol>
<h3 id="雪崩优化"><a class="header-anchor" href="#雪崩优化"></a>雪崩优化</h3>
<p>缓存层由于故障或其他原因不能提供服务，大量请求命中储存层，造成级联崩溃的情况。解决方案如下：</p>
<ol>
<li>使用Redis Sentinel 或 Redis Cluster 保证缓存高可用</li>
<li>使用熔断组件如<a href="https://github.com/netflix/hystrix">Hystrix</a>等进行资源隔离并熔断处理。</li>
<li>上线前演练，尽量模拟极端情况，避免线上问题</li>
</ol>
<h3 id="热点key重建优化"><a class="header-anchor" href="#热点key重建优化"></a>热点key重建优化</h3>
<p>当一个热点key的并发量非常大，并且更新缓存不能在短时间内完成时，缓存失效到重建期间，大量请求的话，会导致大量线程重建缓存，增加后端负载。要解决这个问题可以减少重建缓存的次数。</p>
<ol>
<li>互斥锁，缓存失效期间，只允许一个或少量线程去进行缓存重建，其他线程进行阻塞等待或其他熔断措施</li>
<li>设置不过期，过期由业务系统维护，当业务系统发现数据过期时使用单独的线程去进行缓存重建。注：会导致数据不一致情况。</li>
</ol>
<h2 id="Redis的配置"><a class="header-anchor" href="#Redis的配置"></a>Redis的配置</h2>
<blockquote>
<p>详情请参考:<a href="https://redis.io/topics/config">Redis configuration – Redis</a></p>
</blockquote>
]]></content>
      <categories>
        <category>数据库</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis集群搭建(Redis5.0版)</title>
    <url>/posts/1044596185.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>在Redis5中redis-trib.rb的功能被集成到了redis-cli中，大大简化了redis的集群部署，加快了进群部署的速度，也方便后期维护与扩容。此篇文章参考<a href="https://redis.io/topics/cluster-tutorial">官方文档</a>搭建Redis集群。</p>
<p><strong>注：Redis版本应在5.0及以上。</strong></p>

</blockquote>
<span id="more"></span>
<h1>Redis集群搭建(Redis5.0版)</h1>
<h2 id="编写配置文件"><a class="header-anchor" href="#编写配置文件"></a>编写配置文件</h2>
<p>创建配置文件目录<code>cluster-test</code>及数据文件目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /home/dev/data/redis/data/cluster-test </span><br><span class="line">mkdir -p /home/dev/data/redis/conf/cluster-test</span><br></pre></td></tr></table></figure>
<p>编写配置文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">## /home/dev/data/redis/conf/cluster-test/redis-6379.conf 同理编写6380-6386的配置</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#节点端口 </span></span><br><span class="line"><span class="attr">port</span> <span class="string">6379</span></span><br><span class="line"><span class="comment"># 开启集群模式 </span></span><br><span class="line"><span class="meta">cluster-enabled</span> <span class="string">yes</span></span><br><span class="line"><span class="comment"># 节点超时时间，单位毫秒 </span></span><br><span class="line"><span class="meta">cluster-node-timeout</span> <span class="string">15000</span></span><br><span class="line"><span class="comment"># 集群内部配置文件 </span></span><br><span class="line"><span class="meta">cluster-config-file</span> <span class="string">&quot;nodes-6379.conf&quot;</span></span><br><span class="line"><span class="comment"># 指定本地数据库文件名，默认值为dump.rdb</span></span><br><span class="line"><span class="attr">dbfilename</span> <span class="string">dump-6379.rdb</span></span><br><span class="line"><span class="comment"># dump 文件保存目录</span></span><br><span class="line"><span class="attr">dir</span> <span class="string">/home/dev/data/redis/data/cluster-test</span></span><br></pre></td></tr></table></figure>
<p>启动redis</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server redis-6379.conf &amp;</span><br><span class="line">redis-server redis-6380.conf &amp;</span><br><span class="line">redis-server redis-6381.conf &amp;</span><br><span class="line">redis-server redis-6382.conf &amp;</span><br><span class="line">redis-server redis-6383.conf &amp;</span><br><span class="line">redis-server redis-6384.conf &amp;</span><br></pre></td></tr></table></figure>
<ul>
<li>这里可以使用redis官方提供的脚本进行基础集群的搭建。具体查看目录<code>redis-x.x.x/utils/create-cluster</code>。其中包含README说明及create-cluster脚本</li>
</ul>
<h2 id="启动集群"><a class="header-anchor" href="#启动集群"></a>启动集群</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster create 127.0.0.1:6379 127.0.0.1:6380 127.0.0.1:6381 127.0.0.1:6382 127.0.0.1:6383 127.0.0.1:6384 --cluster-replicas 1</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>–cluster-replicas：1</strong>：代表集群中的主节点有几个从节点</li>
</ul>
<p>执行过程如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[dev@localhost create-cluster]$ redis-cli --cluster create 127.0.0.1:6379 127.0.0.1:6380 127.0.0.1:6381 127.0.0.1:6382 127.0.0.1:6383 127.0.0.1:6384 --cluster-replicas 1</span><br><span class="line">&gt;&gt;&gt; Performing <span class="built_in">hash</span> slots allocation on 6 nodes...</span><br><span class="line">Master[0] -&gt; Slots 0 - 5460</span><br><span class="line">Master[1] -&gt; Slots 5461 - 10922</span><br><span class="line">Master[2] -&gt; Slots 10923 - 16383</span><br><span class="line">Adding replica 127.0.0.1:6383 to 127.0.0.1:6379</span><br><span class="line">Adding replica 127.0.0.1:6384 to 127.0.0.1:6380</span><br><span class="line">Adding replica 127.0.0.1:6382 to 127.0.0.1:6381</span><br><span class="line">&gt;&gt;&gt; Trying to optimize slaves allocation <span class="keyword">for</span> anti-affinity</span><br><span class="line">[WARNING] Some slaves are <span class="keyword">in</span> the same host as their master</span><br><span class="line">M: e8e05250b518f5e774ce12f9cd8ff0c285c96bd5 127.0.0.1:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">M: e34482fb5455d94959f5b46b41fc17cf72646a4c 127.0.0.1:6380</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">M: fcceb74f27471d80e991b33e23817200b47866ff 127.0.0.1:6381</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">S: 3eee4e2dc41e924d313b6fef575fab40055b69d9 127.0.0.1:6382</span><br><span class="line">   replicates e8e05250b518f5e774ce12f9cd8ff0c285c96bd5</span><br><span class="line">S: 208df20aedbbf1687ac66386fc064771793504e6 127.0.0.1:6383</span><br><span class="line">   replicates e34482fb5455d94959f5b46b41fc17cf72646a4c</span><br><span class="line">S: 6964ab0161d106093024f643bbe03bf9daf57760 127.0.0.1:6384</span><br><span class="line">   replicates fcceb74f27471d80e991b33e23817200b47866ff</span><br><span class="line">Can I <span class="built_in">set</span> the above configuration? (<span class="built_in">type</span> <span class="string">&#x27;yes&#x27;</span> to accept): yes</span><br><span class="line">&gt;&gt;&gt; Nodes configuration updated</span><br><span class="line">&gt;&gt;&gt; Assign a different config epoch to each node</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to join the cluster</span><br><span class="line">Waiting <span class="keyword">for</span> the cluster to join</span><br><span class="line">.</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 127.0.0.1:6379)</span><br><span class="line">M: e8e05250b518f5e774ce12f9cd8ff0c285c96bd5 127.0.0.1:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: fcceb74f27471d80e991b33e23817200b47866ff 127.0.0.1:6381</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 208df20aedbbf1687ac66386fc064771793504e6 127.0.0.1:6383</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates e34482fb5455d94959f5b46b41fc17cf72646a4c</span><br><span class="line">S: 6964ab0161d106093024f643bbe03bf9daf57760 127.0.0.1:6384</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates fcceb74f27471d80e991b33e23817200b47866ff</span><br><span class="line">M: e34482fb5455d94959f5b46b41fc17cf72646a4c 127.0.0.1:6380</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 3eee4e2dc41e924d313b6fef575fab40055b69d9 127.0.0.1:6382</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates e8e05250b518f5e774ce12f9cd8ff0c285c96bd5</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure>
<h2 id="查看集群状态"><a class="header-anchor" href="#查看集群状态"></a>查看集群状态</h2>
<ul>
<li>查看集群状态</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[dev@localhost create-cluster]$ redis-cli cluster info</span><br><span class="line">cluster_state:ok</span><br><span class="line">cluster_slots_assigned:16384</span><br><span class="line">cluster_slots_ok:16384</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:6</span><br><span class="line">cluster_size:3</span><br><span class="line">cluster_current_epoch:6</span><br><span class="line">cluster_my_epoch:1</span><br><span class="line">cluster_stats_messages_ping_sent:281</span><br><span class="line">cluster_stats_messages_pong_sent:281</span><br><span class="line">cluster_stats_messages_sent:562</span><br><span class="line">cluster_stats_messages_ping_received:276</span><br><span class="line">cluster_stats_messages_pong_received:281</span><br><span class="line">cluster_stats_messages_meet_received:5</span><br><span class="line">cluster_stats_messages_received:562</span><br></pre></td></tr></table></figure>
<ul>
<li>查看集群节点信息</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[dev@localhost create-cluster]$ redis-cli cluster nodes</span><br><span class="line">fcceb74f27471d80e991b33e23817200b47866ff 127.0.0.1:6381@16381 master - 0 1622448169000 3 connected 10923-16383</span><br><span class="line">208df20aedbbf1687ac66386fc064771793504e6 127.0.0.1:6383@16383 slave e34482fb5455d94959f5b46b41fc17cf72646a4c 0 1622448169000 2 connected</span><br><span class="line">6964ab0161d106093024f643bbe03bf9daf57760 127.0.0.1:6384@16384 slave fcceb74f27471d80e991b33e23817200b47866ff 0 1622448170329 3 connected</span><br><span class="line">e34482fb5455d94959f5b46b41fc17cf72646a4c 127.0.0.1:6380@16380 master - 0 1622448170000 2 connected 5461-10922</span><br><span class="line">e8e05250b518f5e774ce12f9cd8ff0c285c96bd5 127.0.0.1:6379@16379 myself,master - 0 1622448169000 1 connected 0-5460</span><br><span class="line">3eee4e2dc41e924d313b6fef575fab40055b69d9 127.0.0.1:6382@16382 slave e8e05250b518f5e774ce12f9cd8ff0c285c96bd5 0 1622448171335 1 connected</span><br></pre></td></tr></table></figure>
<h2 id="集群扩容"><a class="header-anchor" href="#集群扩容"></a>集群扩容</h2>
<h3 id="启动备用节点："><a class="header-anchor" href="#启动备用节点："></a>启动备用节点：</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server redis-6385.conf &amp;</span><br><span class="line">redis-server redis-6386.conf &amp;</span><br></pre></td></tr></table></figure>
<h3 id="查看redis"><a class="header-anchor" href="#查看redis"></a>查看redis</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[dev@localhost cluster-test]$ ps -ef | grep redis</span><br><span class="line">dev      3934  3552  0 07:56 pts/1    00:00:01 redis-server *:6379 [cluster]</span><br><span class="line">dev      3935  3552  0 07:56 pts/1    00:00:01 redis-server *:6380 [cluster]</span><br><span class="line">dev      3936  3552  0 07:56 pts/1    00:00:01 redis-server *:6381 [cluster]</span><br><span class="line">dev      3937  3552  0 07:56 pts/1    00:00:01 redis-server *:6382 [cluster]</span><br><span class="line">dev      3938  3552  0 07:56 pts/1    00:00:01 redis-server *:6383 [cluster]</span><br><span class="line">dev      3959  3552  0 07:56 pts/1    00:00:01 redis-server *:6384 [cluster]</span><br><span class="line">dev      3989  3552  0 08:21 pts/1    00:00:00 redis-server *:6385 [cluster]</span><br><span class="line">dev      3994  3552  0 08:21 pts/1    00:00:00 redis-server *:6386 [cluster]</span><br><span class="line">dev      4001  3552  0 08:21 pts/1    00:00:00 grep --color=auto redis</span><br></pre></td></tr></table></figure>
<h3 id="添加master节点"><a class="header-anchor" href="#添加master节点"></a>添加master节点</h3>
<p><code>redis-cli --cluster add-node &lt;host_new&gt;:&lt;port_new&gt; &lt;host&gt;:&lt;port&gt;</code></p>
<ul>
<li>
<p><strong>&lt;host_new&gt;:&lt;port_new&gt;</strong>：新加入集群节点</p>
</li>
<li>
<p><strong>&lt;host&gt;:&lt;port&gt;</strong>：集群内任意节点</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[dev@localhost cluster-test]$ redis-cli --cluster add-node 127.0.0.1:6385 127.0.0.1:6379</span><br><span class="line">&gt;&gt;&gt; Adding node 127.0.0.1:6385 to cluster 127.0.0.1:6379</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 127.0.0.1:6379)</span><br><span class="line">M: e8e05250b518f5e774ce12f9cd8ff0c285c96bd5 127.0.0.1:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: fcceb74f27471d80e991b33e23817200b47866ff 127.0.0.1:6381</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 208df20aedbbf1687ac66386fc064771793504e6 127.0.0.1:6383</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates e34482fb5455d94959f5b46b41fc17cf72646a4c</span><br><span class="line">S: 6964ab0161d106093024f643bbe03bf9daf57760 127.0.0.1:6384</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates fcceb74f27471d80e991b33e23817200b47866ff</span><br><span class="line">M: e34482fb5455d94959f5b46b41fc17cf72646a4c 127.0.0.1:6380</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 3eee4e2dc41e924d313b6fef575fab40055b69d9 127.0.0.1:6382</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates e8e05250b518f5e774ce12f9cd8ff0c285c96bd5</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br><span class="line">&gt;&gt;&gt; Send CLUSTER MEET to node 127.0.0.1:6385 to make it join the cluster.</span><br><span class="line">[OK] New node added correctly.</span><br></pre></td></tr></table></figure>
<h3 id="分配槽"><a class="header-anchor" href="#分配槽"></a>分配槽</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster reshard &lt;host&gt;:&lt;port&gt; --cluster-from &lt;node-id&gt; --cluster-to &lt;node-id&gt; --cluster-slots &lt;number of slots&gt; --cluster-yes</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>&lt;host&gt;:&lt;port&gt;</strong>：集群内任意节点</li>
<li><code>--cluster-from</code>：从集群中哪些节点转移槽，多个几点用<code>,</code>分割</li>
<li><code>--cluster-to</code>：转移槽到集群中的那个节点</li>
<li><code>--cluster-slots</code>：分配的槽的数量</li>
<li><code>--cluster-yes</code>：自动确认，不加此参数，需要手动输入yes确认槽迁移计划</li>
<li><strong>&lt;node-id&gt;</strong>: 节点对应的集群ID，以集群模式启动时会写入到<code>nodes-&#123;port&#125;.conf</code>配置中。也可以通过<code>redis-cli cluster nodes</code>查看</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[dev@localhost create-cluster]$ redis-cli cluster nodes</span><br><span class="line">b48e9109610b9952cde3f032f77563e441a3d75d 127.0.0.1:6385@16385 master - 0 1622449778389 0 connected</span><br><span class="line">fcceb74f27471d80e991b33e23817200b47866ff 127.0.0.1:6381@16381 master - 0 1622449776378 3 connected 10923-16383</span><br><span class="line">208df20aedbbf1687ac66386fc064771793504e6 127.0.0.1:6383@16383 slave e34482fb5455d94959f5b46b41fc17cf72646a4c 0 1622449774000 2 connected</span><br><span class="line">6964ab0161d106093024f643bbe03bf9daf57760 127.0.0.1:6384@16384 slave fcceb74f27471d80e991b33e23817200b47866ff 0 1622449776000 3 connected</span><br><span class="line">e34482fb5455d94959f5b46b41fc17cf72646a4c 127.0.0.1:6380@16380 master - 0 1622449777384 2 connected 5461-10922</span><br><span class="line">e8e05250b518f5e774ce12f9cd8ff0c285c96bd5 127.0.0.1:6379@16379 myself,master - 0 1622449775000 1 connected 0-5460</span><br><span class="line">3eee4e2dc41e924d313b6fef575fab40055b69d9 127.0.0.1:6382@16382 slave e8e05250b518f5e774ce12f9cd8ff0c285c96bd5 0 1622449777000 1 connected</span><br></pre></td></tr></table></figure>
<p>将6379,6380,6381的词槽分别分给6385节点1024个词槽</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster reshard 127.0.0.1:6379 --cluster-from e8e05250b518f5e774ce12f9cd8ff0c285c96bd5,e34482fb5455d94959f5b46b41fc17cf72646a4c,fcceb74f27471d80e991b33e23817200b47866ff --cluster-to b48e9109610b9952cde3f032f77563e441a3d75d --cluster-slots 1024 --cluster-yes</span><br></pre></td></tr></table></figure>
<p>迁移后的集群节点信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[dev@localhost create-cluster]$ redis-cli cluster nodes</span><br><span class="line">b48e9109610b9952cde3f032f77563e441a3d75d 127.0.0.1:6385@16385 master - 0 1622450708439 7 connected 0-340 5461-5802 10923-11263</span><br><span class="line">fcceb74f27471d80e991b33e23817200b47866ff 127.0.0.1:6381@16381 master - 0 1622450708000 3 connected 11264-16383</span><br><span class="line">208df20aedbbf1687ac66386fc064771793504e6 127.0.0.1:6383@16383 slave e34482fb5455d94959f5b46b41fc17cf72646a4c 0 1622450706000 2 connected</span><br><span class="line">6964ab0161d106093024f643bbe03bf9daf57760 127.0.0.1:6384@16384 slave fcceb74f27471d80e991b33e23817200b47866ff 0 1622450707433 3 connected</span><br><span class="line">e34482fb5455d94959f5b46b41fc17cf72646a4c 127.0.0.1:6380@16380 master - 0 1622450706427 2 connected 5803-10922</span><br><span class="line">e8e05250b518f5e774ce12f9cd8ff0c285c96bd5 127.0.0.1:6379@16379 myself,master - 0 1622450705000 1 connected 341-5460</span><br><span class="line">3eee4e2dc41e924d313b6fef575fab40055b69d9 127.0.0.1:6382@16382 slave e8e05250b518f5e774ce12f9cd8ff0c285c96bd5 0 1622450709445 1 connected</span><br></pre></td></tr></table></figure>
<h3 id="添加从节点"><a class="header-anchor" href="#添加从节点"></a>添加从节点</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster add-node &lt;host_new&gt;:&lt;port_new&gt; &lt;host&gt;:&lt;port&gt; --cluster-slave \</span><br><span class="line">--cluster-master-id &lt;node-id&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>--cluster-slave</code>：添加从节点</li>
<li><code>--cluster-master-id &lt;node-id&gt;</code>：从节点的主节点id</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[dev@localhost create-cluster]$ redis-cli --cluster add-node 127.0.0.1:6386 127.0.0.1:6385 --cluster-slave --cluster-master-id b48e9109610b9952cde3f032f77563e441a3d75d</span><br><span class="line">&gt;&gt;&gt; Adding node 127.0.0.1:6386 to cluster 127.0.0.1:6385</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 127.0.0.1:6385)</span><br><span class="line">M: b48e9109610b9952cde3f032f77563e441a3d75d 127.0.0.1:6385</span><br><span class="line">   slots:[0-340],[5461-5802],[10923-11263] (1024 slots) master</span><br><span class="line">S: 208df20aedbbf1687ac66386fc064771793504e6 127.0.0.1:6383</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates e34482fb5455d94959f5b46b41fc17cf72646a4c</span><br><span class="line">M: e34482fb5455d94959f5b46b41fc17cf72646a4c 127.0.0.1:6380</span><br><span class="line">   slots:[5803-10922] (5120 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: e8e05250b518f5e774ce12f9cd8ff0c285c96bd5 127.0.0.1:6379</span><br><span class="line">   slots:[341-5460] (5120 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: fcceb74f27471d80e991b33e23817200b47866ff 127.0.0.1:6381</span><br><span class="line">   slots:[11264-16383] (5120 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 6964ab0161d106093024f643bbe03bf9daf57760 127.0.0.1:6384</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates fcceb74f27471d80e991b33e23817200b47866ff</span><br><span class="line">S: 3eee4e2dc41e924d313b6fef575fab40055b69d9 127.0.0.1:6382</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates e8e05250b518f5e774ce12f9cd8ff0c285c96bd5</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br><span class="line">&gt;&gt;&gt; Send CLUSTER MEET to node 127.0.0.1:6386 to make it join the cluster.</span><br><span class="line">Waiting <span class="keyword">for</span> the cluster to join</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; Configure node as replica of 127.0.0.1:6385.</span><br><span class="line">[OK] New node added correctly.</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>查看集群状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[dev@localhost create-cluster]$ redis-cli cluster nodes</span><br><span class="line">703596043233487cc79ef364d56a13907ccf7cb6 127.0.0.1:6386@16386 slave b48e9109610b9952cde3f032f77563e441a3d75d 0 1622451294000 7 connected</span><br><span class="line">b48e9109610b9952cde3f032f77563e441a3d75d 127.0.0.1:6385@16385 master - 0 1622451294000 7 connected 0-340 5461-5802 10923-11263</span><br><span class="line">fcceb74f27471d80e991b33e23817200b47866ff 127.0.0.1:6381@16381 master - 0 1622451293000 3 connected 11264-16383</span><br><span class="line">208df20aedbbf1687ac66386fc064771793504e6 127.0.0.1:6383@16383 slave e34482fb5455d94959f5b46b41fc17cf72646a4c 0 1622451291000 2 connected</span><br><span class="line">6964ab0161d106093024f643bbe03bf9daf57760 127.0.0.1:6384@16384 slave fcceb74f27471d80e991b33e23817200b47866ff 0 1622451295061 3 connected</span><br><span class="line">e34482fb5455d94959f5b46b41fc17cf72646a4c 127.0.0.1:6380@16380 master - 0 1622451296066 2 connected 5803-10922</span><br><span class="line">e8e05250b518f5e774ce12f9cd8ff0c285c96bd5 127.0.0.1:6379@16379 myself,master - 0 1622451293000 1 connected 341-5460</span><br><span class="line">3eee4e2dc41e924d313b6fef575fab40055b69d9 127.0.0.1:6382@16382 slave e8e05250b518f5e774ce12f9cd8ff0c285c96bd5 0 1622451294055 1 connected</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="集群收缩"><a class="header-anchor" href="#集群收缩"></a>集群收缩</h2>
<blockquote>
<p>下线节点 127.0.0.1:6385、127.0.0.1:6386</p>
</blockquote>
<h3 id="删除master对应的从节点"><a class="header-anchor" href="#删除master对应的从节点"></a>删除master对应的从节点</h3>
<ul>
<li>
<p>查看从节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[dev@localhost create-cluster]$ redis-cli cluster nodes | grep :6386</span><br><span class="line">703596043233487cc79ef364d56a13907ccf7cb6 127.0.0.1:6386@16386 slave b48e9109610b9952cde3f032f77563e441a3d75d 0 1622451429000 7 connected</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>从集群中删除从节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster del-node 127.0.0.1:6379 703596043233487cc79ef364d56a13907ccf7cb6</span><br></pre></td></tr></table></figure>
<ul>
<li>后续使用<code>redis-cli -h 127.0.0.1 -p 6379 cluster nodes</code>查看集群节点状态，6386节点应该已经被移除。</li>
</ul>
</li>
</ul>
<h3 id="清空槽"><a class="header-anchor" href="#清空槽"></a>清空槽</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli --cluster reshard 127.0.0.1:6379 --cluster-from b48e9109610b9952cde3f032f77563e441a3d75d --cluster-to e8e05250b518f5e774ce12f9cd8ff0c285c96bd5 --cluster-slots 341 --cluster-yes</span><br><span class="line"></span><br><span class="line">redis-cli --cluster reshard 127.0.0.1:6379 --cluster-from b48e9109610b9952cde3f032f77563e441a3d75d --cluster-to e34482fb5455d94959f5b46b41fc17cf72646a4c --cluster-slots 341 --cluster-yes</span><br><span class="line"></span><br><span class="line">redis-cli --cluster reshard 127.0.0.1:6379 --cluster-from b48e9109610b9952cde3f032f77563e441a3d75d --cluster-to fcceb74f27471d80e991b33e23817200b47866ff --cluster-slots 342 --cluster-yes</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>由于目标节点只能写一个，因此需要执行三次。</p>
</li>
<li>
<p>查看当前集群槽分配状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[dev@localhost create-cluster]$ redis-cli cluster slots</span><br><span class="line">1) 1) (<span class="built_in">integer</span>) 0 <span class="comment"># 槽起始位置</span></span><br><span class="line">   2) (<span class="built_in">integer</span>) 5460 <span class="comment"># 槽结束位置</span></span><br><span class="line">   3) 1) <span class="string">&quot;127.0.0.1&quot;</span> <span class="comment"># master:host</span></span><br><span class="line">      2) (<span class="built_in">integer</span>) 6379 <span class="comment"># master:port</span></span><br><span class="line">      3) <span class="string">&quot;e8e05250b518f5e774ce12f9cd8ff0c285c96bd5&quot;</span> <span class="comment"># master-node-id</span></span><br><span class="line">   4) 1) <span class="string">&quot;127.0.0.1&quot;</span> <span class="comment"># slave:host</span></span><br><span class="line">      2) (<span class="built_in">integer</span>) 6382 <span class="comment"># slave:port</span></span><br><span class="line">      3) <span class="string">&quot;3eee4e2dc41e924d313b6fef575fab40055b69d9&quot;</span> <span class="comment"># slave-node-id</span></span><br><span class="line">2) 1) (<span class="built_in">integer</span>) 5461</span><br><span class="line">   2) (<span class="built_in">integer</span>) 5801</span><br><span class="line">   3) 1) <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">      2) (<span class="built_in">integer</span>) 6380</span><br><span class="line">      3) <span class="string">&quot;e34482fb5455d94959f5b46b41fc17cf72646a4c&quot;</span></span><br><span class="line">   4) 1) <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">      2) (<span class="built_in">integer</span>) 6383</span><br><span class="line">      3) <span class="string">&quot;208df20aedbbf1687ac66386fc064771793504e6&quot;</span></span><br><span class="line">3) 1) (<span class="built_in">integer</span>) 5802</span><br><span class="line">   2) (<span class="built_in">integer</span>) 5802</span><br><span class="line">   3) 1) <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">      2) (<span class="built_in">integer</span>) 6381</span><br><span class="line">      3) <span class="string">&quot;fcceb74f27471d80e991b33e23817200b47866ff&quot;</span></span><br><span class="line">   4) 1) <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">      2) (<span class="built_in">integer</span>) 6384</span><br><span class="line">      3) <span class="string">&quot;6964ab0161d106093024f643bbe03bf9daf57760&quot;</span></span><br><span class="line">4) 1) (<span class="built_in">integer</span>) 5803</span><br><span class="line">   2) (<span class="built_in">integer</span>) 10922</span><br><span class="line">   3) 1) <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">      2) (<span class="built_in">integer</span>) 6380</span><br><span class="line">      3) <span class="string">&quot;e34482fb5455d94959f5b46b41fc17cf72646a4c&quot;</span></span><br><span class="line">   4) 1) <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">      2) (<span class="built_in">integer</span>) 6383</span><br><span class="line">      3) <span class="string">&quot;208df20aedbbf1687ac66386fc064771793504e6&quot;</span></span><br><span class="line">5) 1) (<span class="built_in">integer</span>) 10923</span><br><span class="line">   2) (<span class="built_in">integer</span>) 16383</span><br><span class="line">   3) 1) <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">      2) (<span class="built_in">integer</span>) 6381</span><br><span class="line">      3) <span class="string">&quot;fcceb74f27471d80e991b33e23817200b47866ff&quot;</span></span><br><span class="line">   4) 1) <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">      2) (<span class="built_in">integer</span>) 6384</span><br><span class="line">      3) <span class="string">&quot;6964ab0161d106093024f643bbe03bf9daf57760&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="下线master节点"><a class="header-anchor" href="#下线master节点"></a>下线master节点</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[dev@localhost create-cluster]$ redis-cli --cluster del-node 127.0.0.1:6379 b48e9109610b9952cde3f032f77563e441a3d75d</span><br><span class="line">&gt;&gt;&gt; Removing node b48e9109610b9952cde3f032f77563e441a3d75d from cluster 127.0.0.1:6379</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER FORGET messages to the cluster...</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER RESET SOFT to the deleted node.</span><br><span class="line"></span><br><span class="line">[dev@localhost create-cluster]$ redis-cli cluster nodes <span class="comment"># 查看当前集群节点状态</span></span><br><span class="line">fcceb74f27471d80e991b33e23817200b47866ff 127.0.0.1:6381@16381 master - 0 1622452136635 10 connected 5802 10923-16383</span><br><span class="line">208df20aedbbf1687ac66386fc064771793504e6 127.0.0.1:6383@16383 slave e34482fb5455d94959f5b46b41fc17cf72646a4c 0 1622452136000 9 connected</span><br><span class="line">6964ab0161d106093024f643bbe03bf9daf57760 127.0.0.1:6384@16384 slave fcceb74f27471d80e991b33e23817200b47866ff 0 1622452138653 10 connected</span><br><span class="line">e34482fb5455d94959f5b46b41fc17cf72646a4c 127.0.0.1:6380@16380 master - 0 1622452137642 9 connected 5461-5801 5803-10922</span><br><span class="line">e8e05250b518f5e774ce12f9cd8ff0c285c96bd5 127.0.0.1:6379@16379 myself,master - 0 1622452136000 8 connected 0-5460</span><br><span class="line">3eee4e2dc41e924d313b6fef575fab40055b69d9 127.0.0.1:6382@16382 slave e8e05250b518f5e774ce12f9cd8ff0c285c96bd5 0 1622452137000 8 connected</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot读写分离</title>
    <url>/posts/4234153870.html</url>
    <content><![CDATA[<blockquote class="blockquote-center">
<p>SpringBoot + Mybatis + MySQL 读写分离</p>

</blockquote>
<span id="more"></span>
<h1>SpringBoot读写分离</h1>
<h2 id="MySQL环境搭建"><a class="header-anchor" href="#MySQL环境搭建"></a>MySQL环境搭建</h2>
<p>参考 <a href="./2814237590">MySQL主从</a> 完成测试环境的搭建</p>
<h2 id="创建SpringBoot应用"><a class="header-anchor" href="#创建SpringBoot应用"></a>创建SpringBoot应用</h2>
<p>创建SpringBoot项目，依赖如下:</p>
<h3 id="依赖"><a class="header-anchor" href="#依赖"></a>依赖</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringMVC --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- AOP 切面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Mybatis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Druid 数据库连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- MySQL 驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- lombok简化开发 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="配置"><a class="header-anchor" href="#配置"></a>配置</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">spring-boot-demo</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">stat-view-servlet:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启Druid监控，用户名和密码为druid</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">druid</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="string">druid</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 多数据源配置</span></span><br><span class="line"><span class="attr">mysql:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">master:</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.33.51:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">master123</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">slave1:</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.33.52:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">slave123</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">slave2:</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.33.53:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">slave123</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      </span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8091</span> <span class="comment"># 端口</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">cn.leithda.dao:</span> <span class="string">debug</span> <span class="comment"># 打印SQL日志</span></span><br></pre></td></tr></table></figure>
<h2 id="编码"><a class="header-anchor" href="#编码"></a>编码</h2>
<h3 id="工具类"><a class="header-anchor" href="#工具类"></a>工具类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> leithda</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 2021/7/9</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> 多数据源类型枚举</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">DBTypeEnum</span> </span>&#123;</span><br><span class="line">    MASTER, SLAVE1, SLAVE2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> leithda</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 2021/7/9</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> 多数据源上下文</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBContextHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;DBTypeEnum&gt; contextHolder = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicInteger counter = <span class="keyword">new</span> AtomicInteger(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(DBTypeEnum dbType)</span> </span>&#123;</span><br><span class="line">        contextHolder.set(dbType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前线程数据库类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DBTypeEnum <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.isNull(contextHolder.get()) ? DBTypeEnum.MASTER : contextHolder.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 切换主库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">master</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        set(DBTypeEnum.MASTER);</span><br><span class="line">        log.info(<span class="string">&quot;切换到master&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 切换从库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">slave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//  轮询</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> MAX = <span class="number">9999</span>;</span><br><span class="line">        <span class="keyword">int</span> index = counter.getAndIncrement() % <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (counter.get() &gt; MAX) &#123;</span><br><span class="line">            counter.set(-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            set(DBTypeEnum.SLAVE1);</span><br><span class="line">            log.info(<span class="string">&quot;切换到slave1&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            set(DBTypeEnum.SLAVE2);</span><br><span class="line">            log.info(<span class="string">&quot;切换到slave2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清除变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        contextHolder.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="动态路由数据源"><a class="header-anchor" href="#动态路由数据源"></a>动态路由数据源</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> leithda</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 2021/7/9</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> 多数据源实现，基于特定的key路由到指定数据源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiDataSourceRouting</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现该方法编写获取 key 的规则</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> DBContextHolder.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>AbstractRoutingDataSource</li>
</ul>
<h3 id="多数据源配置"><a class="header-anchor" href="#多数据源配置"></a>多数据源配置</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> leithda</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 2021/7/9</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> 多数据源配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 主库</span></span><br><span class="line"><span class="comment">    * 可以使用<span class="doctag">@Primary</span> 标志这个 Bean 如果在多个同类 Bean 候选时，该 Bean 优先被考虑。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;mysql.datasource.master&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">masterDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;mysql.datasource.slave1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">slave1DataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;mysql.datasource.slave2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">slave2DataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">myRoutingDataSource</span><span class="params">(<span class="meta">@Qualifier(&quot;masterDataSource&quot;)</span> DataSource masterDataSource,</span></span></span><br><span class="line"><span class="params"><span class="function">                                          <span class="meta">@Qualifier(&quot;slave1DataSource&quot;)</span> DataSource slave1DataSource,</span></span></span><br><span class="line"><span class="params"><span class="function">                                          <span class="meta">@Qualifier(&quot;slave2DataSource&quot;)</span> DataSource slave2DataSource)</span> </span>&#123;</span><br><span class="line">        Map&lt;Object, Object&gt; targetDataSources = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        targetDataSources.put(DBTypeEnum.MASTER, masterDataSource);</span><br><span class="line">        targetDataSources.put(DBTypeEnum.SLAVE1, slave1DataSource);</span><br><span class="line">        targetDataSources.put(DBTypeEnum.SLAVE2, slave2DataSource);</span><br><span class="line">        MultiDataSourceRouting multiDataSourceRouting = <span class="keyword">new</span> MultiDataSourceRouting();</span><br><span class="line">        <span class="comment">// 默认走主库</span></span><br><span class="line">        multiDataSourceRouting.setDefaultTargetDataSource(masterDataSource);</span><br><span class="line">        multiDataSourceRouting.setTargetDataSources(targetDataSources);</span><br><span class="line">        <span class="keyword">return</span> multiDataSourceRouting;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Mybatis配置"><a class="header-anchor" href="#Mybatis配置"></a>Mybatis配置</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> leithda</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 2021/7/9</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> Mybatis 配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource myRoutingDataSource;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多数据源需要自己设置sqlSessionFactory</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        SqlSessionFactoryBean bean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        bean.setDataSource(myRoutingDataSource);</span><br><span class="line">        ResourcePatternResolver resolver = <span class="keyword">new</span> PathMatchingResourcePatternResolver();</span><br><span class="line">        <span class="comment">// 实体类对应的位置</span></span><br><span class="line">        bean.setTypeAliasesPackage(<span class="string">&quot;cn.leithda.entity&quot;</span>);</span><br><span class="line">        <span class="comment">// mybatis的XML的配置</span></span><br><span class="line">        bean.setMapperLocations(resolver.getResources(<span class="string">&quot;classpath:mapper/*.xml&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> bean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 事务管理器需要指定数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">dataSourceTransactionManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(myRoutingDataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="AOP拦截进行读写分离处理"><a class="header-anchor" href="#AOP拦截进行读写分离处理"></a>AOP拦截进行读写分离处理</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadOnlyInterceptor</span> <span class="keyword">implements</span> <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 根据注解进行切入处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around(&quot;@annotation(readOnly)&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">setRead</span><span class="params">(ProceedingJoinPoint joinPoint, ReadOnly readOnly)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DBContextHolder.slave();</span><br><span class="line">            <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//清除DbType一方面为了避免内存泄漏，更重要的是避免对后续在本线程上执行的操作产生影响</span></span><br><span class="line">            DBContextHolder.clear();</span><br><span class="line">            log.info(<span class="string">&quot;清除ThreadLocal线程本地变量&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义切入点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* cn.leithda.service..*.select*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">slavePointcut</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2. 根据方法名进行切入处理,select开头的方法使用从库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around(&quot;slavePointcut()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">slave</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DBContextHolder.slave();</span><br><span class="line">            <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//清除DbType一方面为了避免内存泄漏，更重要的是避免对后续在本线程上执行的操作产生影响</span></span><br><span class="line">            DBContextHolder.clear();</span><br><span class="line">            log.info(<span class="string">&quot;清除ThreadLocal线程本地变量&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>上述拦截器定义了两个规则，带有<code>@ReadOnly</code>或者服务层下<code>select*</code>的方法会查询从库</li>
</ul>
<h2 id="验证"><a class="header-anchor" href="#验证"></a>验证</h2>
<h3 id="主库初始化"><a class="header-anchor" href="#主库初始化"></a>主库初始化</h3>
<p>为了方便直接从<a href="https://gitee.com/y_project/RuoYi">若依</a>中获取初始化数据库的sql并执行。数据库脚本如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- 2、用户信息表</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> sys_user;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> sys_user (</span><br><span class="line">  user_id           <span class="type">bigint</span>(<span class="number">20</span>)      <span class="keyword">not</span> <span class="keyword">null</span> auto_increment    comment <span class="string">&#x27;用户ID&#x27;</span>,</span><br><span class="line">  dept_id           <span class="type">bigint</span>(<span class="number">20</span>)      <span class="keyword">default</span> <span class="keyword">null</span>               comment <span class="string">&#x27;部门ID&#x27;</span>,</span><br><span class="line">  login_name        <span class="type">varchar</span>(<span class="number">30</span>)     <span class="keyword">not</span> <span class="keyword">null</span>                   comment <span class="string">&#x27;登录账号&#x27;</span>,</span><br><span class="line">  user_name         <span class="type">varchar</span>(<span class="number">30</span>)     <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>                 comment <span class="string">&#x27;用户昵称&#x27;</span>,</span><br><span class="line">  user_type         <span class="type">varchar</span>(<span class="number">2</span>)      <span class="keyword">default</span> <span class="string">&#x27;00&#x27;</span>               comment <span class="string">&#x27;用户类型（00系统用户 01注册用户）&#x27;</span>,</span><br><span class="line">  email             <span class="type">varchar</span>(<span class="number">50</span>)     <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>                 comment <span class="string">&#x27;用户邮箱&#x27;</span>,</span><br><span class="line">  phonenumber       <span class="type">varchar</span>(<span class="number">11</span>)     <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>                 comment <span class="string">&#x27;手机号码&#x27;</span>,</span><br><span class="line">  sex               <span class="type">char</span>(<span class="number">1</span>)         <span class="keyword">default</span> <span class="string">&#x27;0&#x27;</span>                comment <span class="string">&#x27;用户性别（0男 1女 2未知）&#x27;</span>,</span><br><span class="line">  avatar            <span class="type">varchar</span>(<span class="number">100</span>)    <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>                 comment <span class="string">&#x27;头像路径&#x27;</span>,</span><br><span class="line">  password          <span class="type">varchar</span>(<span class="number">50</span>)     <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>                 comment <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">  salt              <span class="type">varchar</span>(<span class="number">20</span>)     <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>                 comment <span class="string">&#x27;盐加密&#x27;</span>,</span><br><span class="line">  status            <span class="type">char</span>(<span class="number">1</span>)         <span class="keyword">default</span> <span class="string">&#x27;0&#x27;</span>                comment <span class="string">&#x27;帐号状态（0正常 1停用）&#x27;</span>,</span><br><span class="line">  del_flag          <span class="type">char</span>(<span class="number">1</span>)         <span class="keyword">default</span> <span class="string">&#x27;0&#x27;</span>                comment <span class="string">&#x27;删除标志（0代表存在 2代表删除）&#x27;</span>,</span><br><span class="line">  login_ip          <span class="type">varchar</span>(<span class="number">128</span>)    <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>                 comment <span class="string">&#x27;最后登录IP&#x27;</span>,</span><br><span class="line">  login_date        datetime                                   comment <span class="string">&#x27;最后登录时间&#x27;</span>,</span><br><span class="line">  pwd_update_date   datetime                                   comment <span class="string">&#x27;密码最后更新时间&#x27;</span>,</span><br><span class="line">  create_by         <span class="type">varchar</span>(<span class="number">64</span>)     <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>                 comment <span class="string">&#x27;创建者&#x27;</span>,</span><br><span class="line">  create_time       datetime                                   comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  update_by         <span class="type">varchar</span>(<span class="number">64</span>)     <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>                 comment <span class="string">&#x27;更新者&#x27;</span>,</span><br><span class="line">  update_time       datetime                                   comment <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  remark            <span class="type">varchar</span>(<span class="number">500</span>)    <span class="keyword">default</span> <span class="keyword">null</span>               comment <span class="string">&#x27;备注&#x27;</span>,</span><br><span class="line">  <span class="keyword">primary</span> key (user_id)</span><br><span class="line">) engine<span class="operator">=</span>innodb auto_increment<span class="operator">=</span><span class="number">100</span> comment <span class="operator">=</span> <span class="string">&#x27;用户信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- 初始化-用户信息表数据</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> sys_user <span class="keyword">values</span>(<span class="number">1</span>,  <span class="number">103</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;若依&#x27;</span>, <span class="string">&#x27;00&#x27;</span>, <span class="string">&#x27;ry@163.com&#x27;</span>, <span class="string">&#x27;15888888888&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;29c67a30398638269fe600f73a054934&#x27;</span>, <span class="string">&#x27;111111&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;127.0.0.1&#x27;</span>, sysdate(), sysdate(), <span class="string">&#x27;admin&#x27;</span>, sysdate(), <span class="string">&#x27;&#x27;</span>, <span class="keyword">null</span>, <span class="string">&#x27;管理员&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> sys_user <span class="keyword">values</span>(<span class="number">2</span>,  <span class="number">105</span>, <span class="string">&#x27;ry&#x27;</span>,    <span class="string">&#x27;若依&#x27;</span>, <span class="string">&#x27;00&#x27;</span>, <span class="string">&#x27;ry@qq.com&#x27;</span>,  <span class="string">&#x27;15666666666&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;8e6d98b90472783cc73c17047ddccf36&#x27;</span>, <span class="string">&#x27;222222&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;127.0.0.1&#x27;</span>, sysdate(), sysdate(), <span class="string">&#x27;admin&#x27;</span>, sysdate(), <span class="string">&#x27;&#x27;</span>, <span class="keyword">null</span>, <span class="string">&#x27;测试员&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="服务层代码"><a class="header-anchor" href="#服务层代码"></a>服务层代码</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;sysUserService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysUserServiceImpl</span> <span class="keyword">implements</span> <span class="title">SysUserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SysUserDao sysUserDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SysUser <span class="title">queryById</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sysUserDao.queryById(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@ReadOnly</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SysUser <span class="title">queryByIdWithSlave</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sysUserDao.queryById(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;SysUser&gt; <span class="title">selectAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sysUserDao.selectAll(<span class="keyword">new</span> SysUser());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试"><a class="header-anchor" href="#测试"></a>测试</h3>
<p>为了方便区分主从库区别，将从库中的用户名分别加上1和2以作区分。（注：搭建主从结构时一般设置从库为只读避免数据不一致现象的发生，这里为了演示）</p>
<img src="/posts/4234153870/image-20210709161911980.png" class="" title="image-20210709161911980">
<h4 id="查询主库"><a class="header-anchor" href="#查询主库"></a>查询主库</h4>
<img src="/posts/4234153870/image-20210709162019211.png" class="" title="image-20210709162019211">
<h4 id="查询从库"><a class="header-anchor" href="#查询从库"></a>查询从库</h4>
<img src="/posts/4234153870/image-20210709162122857.png" class="" title="image-20210709162122857">
<img src="/posts/4234153870/image-20210709162137087.png" class="" title="image-20210709162137087">
<h3 id="Druid数据源监控"><a class="header-anchor" href="#Druid数据源监控"></a>Druid数据源监控</h3>
<img src="/posts/4234153870/image-20210709170044256.png" class="" title="image-20210709170044256">
<ul>
<li>如图，可以看到测试方法执行后，对应的数据源都已创建</li>
</ul>
<h3 id="应用日志"><a class="header-anchor" href="#应用日志"></a>应用日志</h3>
<img src="/posts/4234153870/image-20210709162453465.png" class="" title="image-20210709162453465">
<blockquote>
<p>与预期相符，带有@ReadOnly以及以<code>select</code>开始的方法都查询了主库的信息，并按照DBContextHolder设置一样，进行轮询访问两个从库。</p>
</blockquote>
<h2 id="题外话"><a class="header-anchor" href="#题外话"></a>题外话</h2>
<p>本来想写到上面直接结束的，好奇心使我稍稍深入了解了一下。我们看一下<code>AbstractRoutingDataSource</code>是如何实现多数据源进行切换的。</p>
<h3 id="继承关系"><a class="header-anchor" href="#继承关系"></a>继承关系</h3>
<img src="/posts/4234153870/image-20210709163537594.png" class="" title="image-20210709163537594">
<h3 id="AbstractRoutingDataSource类"><a class="header-anchor" href="#AbstractRoutingDataSource类"></a>AbstractRoutingDataSource类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractRoutingDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractDataSource</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>继承InitializingBean，在<code>afterPropertiesSet</code>处理数据源信息并分别放到对应Map中</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.targetDataSources == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Property &#x27;targetDataSources&#x27; is required&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">this</span>.resolvedDataSources = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="keyword">this</span>.targetDataSources.size());</span><br><span class="line">	<span class="keyword">this</span>.targetDataSources.forEach((key, value) -&gt; &#123;</span><br><span class="line">		Object lookupKey = resolveSpecifiedLookupKey(key);</span><br><span class="line">		DataSource dataSource = resolveSpecifiedDataSource(value);</span><br><span class="line">		<span class="keyword">this</span>.resolvedDataSources.put(lookupKey, dataSource);</span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.defaultTargetDataSource != <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">this</span>.resolvedDefaultDataSource = resolveSpecifiedDataSource(<span class="keyword">this</span>.defaultTargetDataSource);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>继承自DataSource，拥有getConnection()方法获取数据库连接</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> determineTargetDataSource().getConnection();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> DataSource <span class="title">determineTargetDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Assert.notNull(<span class="keyword">this</span>.resolvedDataSources, <span class="string">&quot;DataSource router not initialized&quot;</span>);</span><br><span class="line">    Object lookupKey = determineCurrentLookupKey();</span><br><span class="line">    DataSource dataSource = <span class="keyword">this</span>.resolvedDataSources.get(lookupKey);</span><br><span class="line">    <span class="keyword">if</span> (dataSource == <span class="keyword">null</span> &amp;&amp; (<span class="keyword">this</span>.lenientFallback || lookupKey == <span class="keyword">null</span>)) &#123;</span><br><span class="line">        dataSource = <span class="keyword">this</span>.resolvedDefaultDataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dataSource == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Cannot determine target DataSource for lookup key [&quot;</span> + lookupKey + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>相信看到这里，已经可以明白为什么继承这个类并设置到SqlSessionFactory中就可以实现多数据源切换了。</p>
<p>与AQS类似，该类也通过<strong>模板模式</strong>，将套路写好，等待用户自定义某种具体规则，完成特定功能的闭环。</p>
<p>但是使用此种方式存在一个缺点，即数据源无法动态切换，<strong>动态修改数据源需要重启服务</strong>。</p>
</blockquote>
<p>代码地址：<a href="https://gitee.com/leithda/labs/tree/master/TechnicalPoints/ReadWriteSplitting/springboot-demo">https://gitee.com/leithda/labs/tree/master/TechnicalPoints/ReadWriteSplitting/springboot-demo</a></p>
]]></content>
      <categories>
        <category>知识点</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
</search>
